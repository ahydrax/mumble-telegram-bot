// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Mumble/MurmurRPC.proto
// </auto-generated>
// Original file comments:
// Copyright 2005-2020 The Mumble Developers. All rights reserved.
// Use of this source code is governed by a BSD-style license
// that can be found in the LICENSE file at the root of the
// Mumble source tree or at <https://www.mumble.info/LICENSE>.
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace MurmurRPC {
  /// <summary>
  ///
  /// Meta
  /// </summary>
  internal static partial class V1
  {
    static readonly string __ServiceName = "MurmurRPC.V1";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::MurmurRPC.Void> __Marshaller_MurmurRPC_Void = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Void.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Uptime> __Marshaller_MurmurRPC_Uptime = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Uptime.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Version> __Marshaller_MurmurRPC_Version = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Version.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Event> __Marshaller_MurmurRPC_Event = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Event.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Server> __Marshaller_MurmurRPC_Server = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Server.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Server.Types.Query> __Marshaller_MurmurRPC_Server_Query = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Server.Types.Query.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Server.Types.List> __Marshaller_MurmurRPC_Server_List = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Server.Types.List.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Server.Types.Event> __Marshaller_MurmurRPC_Server_Event = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Server.Types.Event.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.ContextAction> __Marshaller_MurmurRPC_ContextAction = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.ContextAction.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.TextMessage> __Marshaller_MurmurRPC_TextMessage = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.TextMessage.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.TextMessage.Types.Filter> __Marshaller_MurmurRPC_TextMessage_Filter = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.TextMessage.Types.Filter.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Log.Types.Query> __Marshaller_MurmurRPC_Log_Query = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Log.Types.Query.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Log.Types.List> __Marshaller_MurmurRPC_Log_List = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Log.Types.List.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Config> __Marshaller_MurmurRPC_Config = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Config.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Config.Types.Field> __Marshaller_MurmurRPC_Config_Field = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Config.Types.Field.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Channel.Types.Query> __Marshaller_MurmurRPC_Channel_Query = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Channel.Types.Query.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Channel.Types.List> __Marshaller_MurmurRPC_Channel_List = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Channel.Types.List.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Channel> __Marshaller_MurmurRPC_Channel = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Channel.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.User.Types.Query> __Marshaller_MurmurRPC_User_Query = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.User.Types.Query.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.User.Types.List> __Marshaller_MurmurRPC_User_List = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.User.Types.List.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.User> __Marshaller_MurmurRPC_User = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.User.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.User.Types.Kick> __Marshaller_MurmurRPC_User_Kick = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.User.Types.Kick.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Tree.Types.Query> __Marshaller_MurmurRPC_Tree_Query = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Tree.Types.Query.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Tree> __Marshaller_MurmurRPC_Tree = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Tree.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Ban.Types.Query> __Marshaller_MurmurRPC_Ban_Query = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Ban.Types.Query.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Ban.Types.List> __Marshaller_MurmurRPC_Ban_List = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Ban.Types.List.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.ACL.Types.List> __Marshaller_MurmurRPC_ACL_List = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.ACL.Types.List.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.ACL.Types.Query> __Marshaller_MurmurRPC_ACL_Query = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.ACL.Types.Query.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.ACL> __Marshaller_MurmurRPC_ACL = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.ACL.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.ACL.Types.TemporaryGroup> __Marshaller_MurmurRPC_ACL_TemporaryGroup = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.ACL.Types.TemporaryGroup.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Authenticator.Types.Response> __Marshaller_MurmurRPC_Authenticator_Response = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Authenticator.Types.Response.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.Authenticator.Types.Request> __Marshaller_MurmurRPC_Authenticator_Request = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.Authenticator.Types.Request.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.DatabaseUser.Types.Query> __Marshaller_MurmurRPC_DatabaseUser_Query = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.DatabaseUser.Types.Query.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.DatabaseUser.Types.List> __Marshaller_MurmurRPC_DatabaseUser_List = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.DatabaseUser.Types.List.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.DatabaseUser> __Marshaller_MurmurRPC_DatabaseUser = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.DatabaseUser.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.DatabaseUser.Types.Verify> __Marshaller_MurmurRPC_DatabaseUser_Verify = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.DatabaseUser.Types.Verify.Parser));
    static readonly grpc::Marshaller<global::MurmurRPC.RedirectWhisperGroup> __Marshaller_MurmurRPC_RedirectWhisperGroup = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::MurmurRPC.RedirectWhisperGroup.Parser));

    static readonly grpc::Method<global::MurmurRPC.Void, global::MurmurRPC.Uptime> __Method_GetUptime = new grpc::Method<global::MurmurRPC.Void, global::MurmurRPC.Uptime>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetUptime",
        __Marshaller_MurmurRPC_Void,
        __Marshaller_MurmurRPC_Uptime);

    static readonly grpc::Method<global::MurmurRPC.Void, global::MurmurRPC.Version> __Method_GetVersion = new grpc::Method<global::MurmurRPC.Void, global::MurmurRPC.Version>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetVersion",
        __Marshaller_MurmurRPC_Void,
        __Marshaller_MurmurRPC_Version);

    static readonly grpc::Method<global::MurmurRPC.Void, global::MurmurRPC.Event> __Method_Events = new grpc::Method<global::MurmurRPC.Void, global::MurmurRPC.Event>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Events",
        __Marshaller_MurmurRPC_Void,
        __Marshaller_MurmurRPC_Event);

    static readonly grpc::Method<global::MurmurRPC.Void, global::MurmurRPC.Server> __Method_ServerCreate = new grpc::Method<global::MurmurRPC.Void, global::MurmurRPC.Server>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerCreate",
        __Marshaller_MurmurRPC_Void,
        __Marshaller_MurmurRPC_Server);

    static readonly grpc::Method<global::MurmurRPC.Server.Types.Query, global::MurmurRPC.Server.Types.List> __Method_ServerQuery = new grpc::Method<global::MurmurRPC.Server.Types.Query, global::MurmurRPC.Server.Types.List>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerQuery",
        __Marshaller_MurmurRPC_Server_Query,
        __Marshaller_MurmurRPC_Server_List);

    static readonly grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Server> __Method_ServerGet = new grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Server>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerGet",
        __Marshaller_MurmurRPC_Server,
        __Marshaller_MurmurRPC_Server);

    static readonly grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Void> __Method_ServerStart = new grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerStart",
        __Marshaller_MurmurRPC_Server,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Void> __Method_ServerStop = new grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerStop",
        __Marshaller_MurmurRPC_Server,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Void> __Method_ServerRemove = new grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ServerRemove",
        __Marshaller_MurmurRPC_Server,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Server.Types.Event> __Method_ServerEvents = new grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Server.Types.Event>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ServerEvents",
        __Marshaller_MurmurRPC_Server,
        __Marshaller_MurmurRPC_Server_Event);

    static readonly grpc::Method<global::MurmurRPC.ContextAction, global::MurmurRPC.Void> __Method_ContextActionAdd = new grpc::Method<global::MurmurRPC.ContextAction, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ContextActionAdd",
        __Marshaller_MurmurRPC_ContextAction,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.ContextAction, global::MurmurRPC.Void> __Method_ContextActionRemove = new grpc::Method<global::MurmurRPC.ContextAction, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ContextActionRemove",
        __Marshaller_MurmurRPC_ContextAction,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.ContextAction, global::MurmurRPC.ContextAction> __Method_ContextActionEvents = new grpc::Method<global::MurmurRPC.ContextAction, global::MurmurRPC.ContextAction>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "ContextActionEvents",
        __Marshaller_MurmurRPC_ContextAction,
        __Marshaller_MurmurRPC_ContextAction);

    static readonly grpc::Method<global::MurmurRPC.TextMessage, global::MurmurRPC.Void> __Method_TextMessageSend = new grpc::Method<global::MurmurRPC.TextMessage, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TextMessageSend",
        __Marshaller_MurmurRPC_TextMessage,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.TextMessage.Types.Filter, global::MurmurRPC.TextMessage.Types.Filter> __Method_TextMessageFilter = new grpc::Method<global::MurmurRPC.TextMessage.Types.Filter, global::MurmurRPC.TextMessage.Types.Filter>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "TextMessageFilter",
        __Marshaller_MurmurRPC_TextMessage_Filter,
        __Marshaller_MurmurRPC_TextMessage_Filter);

    static readonly grpc::Method<global::MurmurRPC.Log.Types.Query, global::MurmurRPC.Log.Types.List> __Method_LogQuery = new grpc::Method<global::MurmurRPC.Log.Types.Query, global::MurmurRPC.Log.Types.List>(
        grpc::MethodType.Unary,
        __ServiceName,
        "LogQuery",
        __Marshaller_MurmurRPC_Log_Query,
        __Marshaller_MurmurRPC_Log_List);

    static readonly grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Config> __Method_ConfigGet = new grpc::Method<global::MurmurRPC.Server, global::MurmurRPC.Config>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigGet",
        __Marshaller_MurmurRPC_Server,
        __Marshaller_MurmurRPC_Config);

    static readonly grpc::Method<global::MurmurRPC.Config.Types.Field, global::MurmurRPC.Config.Types.Field> __Method_ConfigGetField = new grpc::Method<global::MurmurRPC.Config.Types.Field, global::MurmurRPC.Config.Types.Field>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigGetField",
        __Marshaller_MurmurRPC_Config_Field,
        __Marshaller_MurmurRPC_Config_Field);

    static readonly grpc::Method<global::MurmurRPC.Config.Types.Field, global::MurmurRPC.Void> __Method_ConfigSetField = new grpc::Method<global::MurmurRPC.Config.Types.Field, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigSetField",
        __Marshaller_MurmurRPC_Config_Field,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.Void, global::MurmurRPC.Config> __Method_ConfigGetDefault = new grpc::Method<global::MurmurRPC.Void, global::MurmurRPC.Config>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ConfigGetDefault",
        __Marshaller_MurmurRPC_Void,
        __Marshaller_MurmurRPC_Config);

    static readonly grpc::Method<global::MurmurRPC.Channel.Types.Query, global::MurmurRPC.Channel.Types.List> __Method_ChannelQuery = new grpc::Method<global::MurmurRPC.Channel.Types.Query, global::MurmurRPC.Channel.Types.List>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelQuery",
        __Marshaller_MurmurRPC_Channel_Query,
        __Marshaller_MurmurRPC_Channel_List);

    static readonly grpc::Method<global::MurmurRPC.Channel, global::MurmurRPC.Channel> __Method_ChannelGet = new grpc::Method<global::MurmurRPC.Channel, global::MurmurRPC.Channel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelGet",
        __Marshaller_MurmurRPC_Channel,
        __Marshaller_MurmurRPC_Channel);

    static readonly grpc::Method<global::MurmurRPC.Channel, global::MurmurRPC.Channel> __Method_ChannelAdd = new grpc::Method<global::MurmurRPC.Channel, global::MurmurRPC.Channel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelAdd",
        __Marshaller_MurmurRPC_Channel,
        __Marshaller_MurmurRPC_Channel);

    static readonly grpc::Method<global::MurmurRPC.Channel, global::MurmurRPC.Void> __Method_ChannelRemove = new grpc::Method<global::MurmurRPC.Channel, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelRemove",
        __Marshaller_MurmurRPC_Channel,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.Channel, global::MurmurRPC.Channel> __Method_ChannelUpdate = new grpc::Method<global::MurmurRPC.Channel, global::MurmurRPC.Channel>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ChannelUpdate",
        __Marshaller_MurmurRPC_Channel,
        __Marshaller_MurmurRPC_Channel);

    static readonly grpc::Method<global::MurmurRPC.User.Types.Query, global::MurmurRPC.User.Types.List> __Method_UserQuery = new grpc::Method<global::MurmurRPC.User.Types.Query, global::MurmurRPC.User.Types.List>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserQuery",
        __Marshaller_MurmurRPC_User_Query,
        __Marshaller_MurmurRPC_User_List);

    static readonly grpc::Method<global::MurmurRPC.User, global::MurmurRPC.User> __Method_UserGet = new grpc::Method<global::MurmurRPC.User, global::MurmurRPC.User>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserGet",
        __Marshaller_MurmurRPC_User,
        __Marshaller_MurmurRPC_User);

    static readonly grpc::Method<global::MurmurRPC.User, global::MurmurRPC.User> __Method_UserUpdate = new grpc::Method<global::MurmurRPC.User, global::MurmurRPC.User>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserUpdate",
        __Marshaller_MurmurRPC_User,
        __Marshaller_MurmurRPC_User);

    static readonly grpc::Method<global::MurmurRPC.User.Types.Kick, global::MurmurRPC.Void> __Method_UserKick = new grpc::Method<global::MurmurRPC.User.Types.Kick, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UserKick",
        __Marshaller_MurmurRPC_User_Kick,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.Tree.Types.Query, global::MurmurRPC.Tree> __Method_TreeQuery = new grpc::Method<global::MurmurRPC.Tree.Types.Query, global::MurmurRPC.Tree>(
        grpc::MethodType.Unary,
        __ServiceName,
        "TreeQuery",
        __Marshaller_MurmurRPC_Tree_Query,
        __Marshaller_MurmurRPC_Tree);

    static readonly grpc::Method<global::MurmurRPC.Ban.Types.Query, global::MurmurRPC.Ban.Types.List> __Method_BansGet = new grpc::Method<global::MurmurRPC.Ban.Types.Query, global::MurmurRPC.Ban.Types.List>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BansGet",
        __Marshaller_MurmurRPC_Ban_Query,
        __Marshaller_MurmurRPC_Ban_List);

    static readonly grpc::Method<global::MurmurRPC.Ban.Types.List, global::MurmurRPC.Void> __Method_BansSet = new grpc::Method<global::MurmurRPC.Ban.Types.List, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "BansSet",
        __Marshaller_MurmurRPC_Ban_List,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.Channel, global::MurmurRPC.ACL.Types.List> __Method_ACLGet = new grpc::Method<global::MurmurRPC.Channel, global::MurmurRPC.ACL.Types.List>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ACLGet",
        __Marshaller_MurmurRPC_Channel,
        __Marshaller_MurmurRPC_ACL_List);

    static readonly grpc::Method<global::MurmurRPC.ACL.Types.List, global::MurmurRPC.Void> __Method_ACLSet = new grpc::Method<global::MurmurRPC.ACL.Types.List, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ACLSet",
        __Marshaller_MurmurRPC_ACL_List,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.ACL.Types.Query, global::MurmurRPC.ACL> __Method_ACLGetEffectivePermissions = new grpc::Method<global::MurmurRPC.ACL.Types.Query, global::MurmurRPC.ACL>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ACLGetEffectivePermissions",
        __Marshaller_MurmurRPC_ACL_Query,
        __Marshaller_MurmurRPC_ACL);

    static readonly grpc::Method<global::MurmurRPC.ACL.Types.TemporaryGroup, global::MurmurRPC.Void> __Method_ACLAddTemporaryGroup = new grpc::Method<global::MurmurRPC.ACL.Types.TemporaryGroup, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ACLAddTemporaryGroup",
        __Marshaller_MurmurRPC_ACL_TemporaryGroup,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.ACL.Types.TemporaryGroup, global::MurmurRPC.Void> __Method_ACLRemoveTemporaryGroup = new grpc::Method<global::MurmurRPC.ACL.Types.TemporaryGroup, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "ACLRemoveTemporaryGroup",
        __Marshaller_MurmurRPC_ACL_TemporaryGroup,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.Authenticator.Types.Response, global::MurmurRPC.Authenticator.Types.Request> __Method_AuthenticatorStream = new grpc::Method<global::MurmurRPC.Authenticator.Types.Response, global::MurmurRPC.Authenticator.Types.Request>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "AuthenticatorStream",
        __Marshaller_MurmurRPC_Authenticator_Response,
        __Marshaller_MurmurRPC_Authenticator_Request);

    static readonly grpc::Method<global::MurmurRPC.DatabaseUser.Types.Query, global::MurmurRPC.DatabaseUser.Types.List> __Method_DatabaseUserQuery = new grpc::Method<global::MurmurRPC.DatabaseUser.Types.Query, global::MurmurRPC.DatabaseUser.Types.List>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DatabaseUserQuery",
        __Marshaller_MurmurRPC_DatabaseUser_Query,
        __Marshaller_MurmurRPC_DatabaseUser_List);

    static readonly grpc::Method<global::MurmurRPC.DatabaseUser, global::MurmurRPC.DatabaseUser> __Method_DatabaseUserGet = new grpc::Method<global::MurmurRPC.DatabaseUser, global::MurmurRPC.DatabaseUser>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DatabaseUserGet",
        __Marshaller_MurmurRPC_DatabaseUser,
        __Marshaller_MurmurRPC_DatabaseUser);

    static readonly grpc::Method<global::MurmurRPC.DatabaseUser, global::MurmurRPC.Void> __Method_DatabaseUserUpdate = new grpc::Method<global::MurmurRPC.DatabaseUser, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DatabaseUserUpdate",
        __Marshaller_MurmurRPC_DatabaseUser,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.DatabaseUser, global::MurmurRPC.DatabaseUser> __Method_DatabaseUserRegister = new grpc::Method<global::MurmurRPC.DatabaseUser, global::MurmurRPC.DatabaseUser>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DatabaseUserRegister",
        __Marshaller_MurmurRPC_DatabaseUser,
        __Marshaller_MurmurRPC_DatabaseUser);

    static readonly grpc::Method<global::MurmurRPC.DatabaseUser, global::MurmurRPC.Void> __Method_DatabaseUserDeregister = new grpc::Method<global::MurmurRPC.DatabaseUser, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DatabaseUserDeregister",
        __Marshaller_MurmurRPC_DatabaseUser,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.DatabaseUser.Types.Verify, global::MurmurRPC.DatabaseUser> __Method_DatabaseUserVerify = new grpc::Method<global::MurmurRPC.DatabaseUser.Types.Verify, global::MurmurRPC.DatabaseUser>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DatabaseUserVerify",
        __Marshaller_MurmurRPC_DatabaseUser_Verify,
        __Marshaller_MurmurRPC_DatabaseUser);

    static readonly grpc::Method<global::MurmurRPC.RedirectWhisperGroup, global::MurmurRPC.Void> __Method_RedirectWhisperGroupAdd = new grpc::Method<global::MurmurRPC.RedirectWhisperGroup, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RedirectWhisperGroupAdd",
        __Marshaller_MurmurRPC_RedirectWhisperGroup,
        __Marshaller_MurmurRPC_Void);

    static readonly grpc::Method<global::MurmurRPC.RedirectWhisperGroup, global::MurmurRPC.Void> __Method_RedirectWhisperGroupRemove = new grpc::Method<global::MurmurRPC.RedirectWhisperGroup, global::MurmurRPC.Void>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RedirectWhisperGroupRemove",
        __Marshaller_MurmurRPC_RedirectWhisperGroup,
        __Marshaller_MurmurRPC_Void);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for V1</summary>
    public partial class V1Client : grpc::ClientBase<V1Client>
    {
      /// <summary>Creates a new client for V1</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public V1Client(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for V1 that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public V1Client(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected V1Client() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected V1Client(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// GetUptime returns murmur's uptime.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Uptime GetUptime(global::MurmurRPC.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUptime(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetUptime returns murmur's uptime.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Uptime GetUptime(global::MurmurRPC.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetUptime, null, options, request);
      }
      /// <summary>
      /// GetUptime returns murmur's uptime.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Uptime> GetUptimeAsync(global::MurmurRPC.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetUptimeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetUptime returns murmur's uptime.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Uptime> GetUptimeAsync(global::MurmurRPC.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetUptime, null, options, request);
      }
      /// <summary>
      /// GetVersion returns murmur's version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Version GetVersion(global::MurmurRPC.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVersion(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetVersion returns murmur's version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Version GetVersion(global::MurmurRPC.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>
      /// GetVersion returns murmur's version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Version> GetVersionAsync(global::MurmurRPC.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetVersionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetVersion returns murmur's version.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Version> GetVersionAsync(global::MurmurRPC.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetVersion, null, options, request);
      }
      /// <summary>
      /// Events returns a stream of murmur events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::MurmurRPC.Event> Events(global::MurmurRPC.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Events(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// Events returns a stream of murmur events.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::MurmurRPC.Event> Events(global::MurmurRPC.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_Events, null, options, request);
      }
      /// <summary>
      /// ServerCreate creates a new virtual server. The returned server object
      /// contains the newly created server's ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Server ServerCreate(global::MurmurRPC.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerCreate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerCreate creates a new virtual server. The returned server object
      /// contains the newly created server's ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Server ServerCreate(global::MurmurRPC.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerCreate, null, options, request);
      }
      /// <summary>
      /// ServerCreate creates a new virtual server. The returned server object
      /// contains the newly created server's ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Server> ServerCreateAsync(global::MurmurRPC.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerCreateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerCreate creates a new virtual server. The returned server object
      /// contains the newly created server's ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Server> ServerCreateAsync(global::MurmurRPC.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerCreate, null, options, request);
      }
      /// <summary>
      /// ServerQuery returns a list of servers that match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Server.Types.List ServerQuery(global::MurmurRPC.Server.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerQuery returns a list of servers that match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Server.Types.List ServerQuery(global::MurmurRPC.Server.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerQuery, null, options, request);
      }
      /// <summary>
      /// ServerQuery returns a list of servers that match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Server.Types.List> ServerQueryAsync(global::MurmurRPC.Server.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerQuery returns a list of servers that match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Server.Types.List> ServerQueryAsync(global::MurmurRPC.Server.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerQuery, null, options, request);
      }
      /// <summary>
      /// ServerGet returns information about the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Server ServerGet(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerGet returns information about the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Server ServerGet(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerGet, null, options, request);
      }
      /// <summary>
      /// ServerGet returns information about the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Server> ServerGetAsync(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerGet returns information about the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Server> ServerGetAsync(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerGet, null, options, request);
      }
      /// <summary>
      /// ServerStart starts the given stopped server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ServerStart(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStart(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerStart starts the given stopped server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ServerStart(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerStart, null, options, request);
      }
      /// <summary>
      /// ServerStart starts the given stopped server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ServerStartAsync(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStartAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerStart starts the given stopped server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ServerStartAsync(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerStart, null, options, request);
      }
      /// <summary>
      /// ServerStop stops the given virtual server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ServerStop(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStop(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerStop stops the given virtual server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ServerStop(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerStop, null, options, request);
      }
      /// <summary>
      /// ServerStop stops the given virtual server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ServerStopAsync(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerStopAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerStop stops the given virtual server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ServerStopAsync(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerStop, null, options, request);
      }
      /// <summary>
      /// ServerRemove removes the given virtual server and its configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ServerRemove(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerRemove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerRemove removes the given virtual server and its configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ServerRemove(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ServerRemove, null, options, request);
      }
      /// <summary>
      /// ServerRemove removes the given virtual server and its configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ServerRemoveAsync(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerRemoveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerRemove removes the given virtual server and its configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ServerRemoveAsync(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ServerRemove, null, options, request);
      }
      /// <summary>
      /// ServerEvents returns a stream of events that happen on the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::MurmurRPC.Server.Types.Event> ServerEvents(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ServerEvents returns a stream of events that happen on the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::MurmurRPC.Server.Types.Event> ServerEvents(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ServerEvents, null, options, request);
      }
      /// <summary>
      /// ContextActionAdd adds a context action to the given user's client. The
      /// following ContextAction fields must be set:
      ///   context, action, text, and user.
      ///
      /// Added context actions are valid until:
      ///  - The context action is removed with ContextActionRemove, or
      ///  - The user disconnects from the server, or
      ///  - The server stops.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ContextActionAdd(global::MurmurRPC.ContextAction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContextActionAdd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContextActionAdd adds a context action to the given user's client. The
      /// following ContextAction fields must be set:
      ///   context, action, text, and user.
      ///
      /// Added context actions are valid until:
      ///  - The context action is removed with ContextActionRemove, or
      ///  - The user disconnects from the server, or
      ///  - The server stops.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ContextActionAdd(global::MurmurRPC.ContextAction request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ContextActionAdd, null, options, request);
      }
      /// <summary>
      /// ContextActionAdd adds a context action to the given user's client. The
      /// following ContextAction fields must be set:
      ///   context, action, text, and user.
      ///
      /// Added context actions are valid until:
      ///  - The context action is removed with ContextActionRemove, or
      ///  - The user disconnects from the server, or
      ///  - The server stops.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ContextActionAddAsync(global::MurmurRPC.ContextAction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContextActionAddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContextActionAdd adds a context action to the given user's client. The
      /// following ContextAction fields must be set:
      ///   context, action, text, and user.
      ///
      /// Added context actions are valid until:
      ///  - The context action is removed with ContextActionRemove, or
      ///  - The user disconnects from the server, or
      ///  - The server stops.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ContextActionAddAsync(global::MurmurRPC.ContextAction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ContextActionAdd, null, options, request);
      }
      /// <summary>
      /// ContextActionRemove removes a context action from the given user's client.
      /// The following ContextAction must be set:
      ///   action
      /// If no user is given, the context action is removed from all users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ContextActionRemove(global::MurmurRPC.ContextAction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContextActionRemove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContextActionRemove removes a context action from the given user's client.
      /// The following ContextAction must be set:
      ///   action
      /// If no user is given, the context action is removed from all users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ContextActionRemove(global::MurmurRPC.ContextAction request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ContextActionRemove, null, options, request);
      }
      /// <summary>
      /// ContextActionRemove removes a context action from the given user's client.
      /// The following ContextAction must be set:
      ///   action
      /// If no user is given, the context action is removed from all users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ContextActionRemoveAsync(global::MurmurRPC.ContextAction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContextActionRemoveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContextActionRemove removes a context action from the given user's client.
      /// The following ContextAction must be set:
      ///   action
      /// If no user is given, the context action is removed from all users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ContextActionRemoveAsync(global::MurmurRPC.ContextAction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ContextActionRemove, null, options, request);
      }
      /// <summary>
      /// ContextActionEvents returns a stream of context action events that are
      /// triggered by users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::MurmurRPC.ContextAction> ContextActionEvents(global::MurmurRPC.ContextAction request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ContextActionEvents(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ContextActionEvents returns a stream of context action events that are
      /// triggered by users.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncServerStreamingCall<global::MurmurRPC.ContextAction> ContextActionEvents(global::MurmurRPC.ContextAction request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_ContextActionEvents, null, options, request);
      }
      /// <summary>
      /// TextMessageSend sends the given TextMessage to the server.
      ///
      /// If no users, channels, or trees are added to the TextMessage, the message
      /// will be broadcast the entire server. Otherwise, the message will be
      /// targeted to the specified users, channels, and trees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void TextMessageSend(global::MurmurRPC.TextMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TextMessageSend(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TextMessageSend sends the given TextMessage to the server.
      ///
      /// If no users, channels, or trees are added to the TextMessage, the message
      /// will be broadcast the entire server. Otherwise, the message will be
      /// targeted to the specified users, channels, and trees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void TextMessageSend(global::MurmurRPC.TextMessage request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TextMessageSend, null, options, request);
      }
      /// <summary>
      /// TextMessageSend sends the given TextMessage to the server.
      ///
      /// If no users, channels, or trees are added to the TextMessage, the message
      /// will be broadcast the entire server. Otherwise, the message will be
      /// targeted to the specified users, channels, and trees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> TextMessageSendAsync(global::MurmurRPC.TextMessage request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TextMessageSendAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TextMessageSend sends the given TextMessage to the server.
      ///
      /// If no users, channels, or trees are added to the TextMessage, the message
      /// will be broadcast the entire server. Otherwise, the message will be
      /// targeted to the specified users, channels, and trees.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> TextMessageSendAsync(global::MurmurRPC.TextMessage request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TextMessageSend, null, options, request);
      }
      /// <summary>
      /// TextMessageFilter filters text messages for a given server.
      ///
      /// When a filter stream is active, text messages sent from users to the
      /// server are sent over the stream. The RPC client then sends a message back
      /// on the same stream, containing an action: whether the message should be
      /// accepted, rejected, or dropped.
      ///
      /// To activate the filter stream, an initial TextMessage.Filter message must
      /// be sent that contains the server on which the filter will be active.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::MurmurRPC.TextMessage.Types.Filter, global::MurmurRPC.TextMessage.Types.Filter> TextMessageFilter(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TextMessageFilter(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TextMessageFilter filters text messages for a given server.
      ///
      /// When a filter stream is active, text messages sent from users to the
      /// server are sent over the stream. The RPC client then sends a message back
      /// on the same stream, containing an action: whether the message should be
      /// accepted, rejected, or dropped.
      ///
      /// To activate the filter stream, an initial TextMessage.Filter message must
      /// be sent that contains the server on which the filter will be active.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::MurmurRPC.TextMessage.Types.Filter, global::MurmurRPC.TextMessage.Types.Filter> TextMessageFilter(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_TextMessageFilter, null, options);
      }
      /// <summary>
      /// LogQuery returns a list of log entries from the given server.
      ///
      /// To get the total number of log entries, omit min and/or max from the
      /// query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Log.Types.List LogQuery(global::MurmurRPC.Log.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LogQuery returns a list of log entries from the given server.
      ///
      /// To get the total number of log entries, omit min and/or max from the
      /// query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Log.Types.List LogQuery(global::MurmurRPC.Log.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_LogQuery, null, options, request);
      }
      /// <summary>
      /// LogQuery returns a list of log entries from the given server.
      ///
      /// To get the total number of log entries, omit min and/or max from the
      /// query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Log.Types.List> LogQueryAsync(global::MurmurRPC.Log.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return LogQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// LogQuery returns a list of log entries from the given server.
      ///
      /// To get the total number of log entries, omit min and/or max from the
      /// query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Log.Types.List> LogQueryAsync(global::MurmurRPC.Log.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_LogQuery, null, options, request);
      }
      /// <summary>
      /// ConfigGet returns the explicitly set configuration for the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Config ConfigGet(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ConfigGet returns the explicitly set configuration for the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Config ConfigGet(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigGet, null, options, request);
      }
      /// <summary>
      /// ConfigGet returns the explicitly set configuration for the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Config> ConfigGetAsync(global::MurmurRPC.Server request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ConfigGet returns the explicitly set configuration for the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Config> ConfigGetAsync(global::MurmurRPC.Server request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigGet, null, options, request);
      }
      /// <summary>
      /// ConfigGetField returns the configuration value for the given key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Config.Types.Field ConfigGetField(global::MurmurRPC.Config.Types.Field request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigGetField(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ConfigGetField returns the configuration value for the given key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Config.Types.Field ConfigGetField(global::MurmurRPC.Config.Types.Field request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigGetField, null, options, request);
      }
      /// <summary>
      /// ConfigGetField returns the configuration value for the given key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Config.Types.Field> ConfigGetFieldAsync(global::MurmurRPC.Config.Types.Field request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigGetFieldAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ConfigGetField returns the configuration value for the given key.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Config.Types.Field> ConfigGetFieldAsync(global::MurmurRPC.Config.Types.Field request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigGetField, null, options, request);
      }
      /// <summary>
      /// ConfigSetField sets the configuration value to the given value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ConfigSetField(global::MurmurRPC.Config.Types.Field request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigSetField(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ConfigSetField sets the configuration value to the given value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ConfigSetField(global::MurmurRPC.Config.Types.Field request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigSetField, null, options, request);
      }
      /// <summary>
      /// ConfigSetField sets the configuration value to the given value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ConfigSetFieldAsync(global::MurmurRPC.Config.Types.Field request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigSetFieldAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ConfigSetField sets the configuration value to the given value.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ConfigSetFieldAsync(global::MurmurRPC.Config.Types.Field request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigSetField, null, options, request);
      }
      /// <summary>
      /// ConfigGetDefault returns the default server configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Config ConfigGetDefault(global::MurmurRPC.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigGetDefault(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ConfigGetDefault returns the default server configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Config ConfigGetDefault(global::MurmurRPC.Void request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ConfigGetDefault, null, options, request);
      }
      /// <summary>
      /// ConfigGetDefault returns the default server configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Config> ConfigGetDefaultAsync(global::MurmurRPC.Void request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ConfigGetDefaultAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ConfigGetDefault returns the default server configuration.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Config> ConfigGetDefaultAsync(global::MurmurRPC.Void request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ConfigGetDefault, null, options, request);
      }
      /// <summary>
      /// ChannelQuery returns a list of channels that match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Channel.Types.List ChannelQuery(global::MurmurRPC.Channel.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelQuery returns a list of channels that match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Channel.Types.List ChannelQuery(global::MurmurRPC.Channel.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelQuery, null, options, request);
      }
      /// <summary>
      /// ChannelQuery returns a list of channels that match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Channel.Types.List> ChannelQueryAsync(global::MurmurRPC.Channel.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelQuery returns a list of channels that match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Channel.Types.List> ChannelQueryAsync(global::MurmurRPC.Channel.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelQuery, null, options, request);
      }
      /// <summary>
      /// ChannelGet returns the channel with the given ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Channel ChannelGet(global::MurmurRPC.Channel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelGet returns the channel with the given ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Channel ChannelGet(global::MurmurRPC.Channel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelGet, null, options, request);
      }
      /// <summary>
      /// ChannelGet returns the channel with the given ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Channel> ChannelGetAsync(global::MurmurRPC.Channel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelGet returns the channel with the given ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Channel> ChannelGetAsync(global::MurmurRPC.Channel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelGet, null, options, request);
      }
      /// <summary>
      /// ChannelAdd adds the channel to the given server. The parent and name of
      /// the channel must be set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Channel ChannelAdd(global::MurmurRPC.Channel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelAdd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelAdd adds the channel to the given server. The parent and name of
      /// the channel must be set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Channel ChannelAdd(global::MurmurRPC.Channel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelAdd, null, options, request);
      }
      /// <summary>
      /// ChannelAdd adds the channel to the given server. The parent and name of
      /// the channel must be set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Channel> ChannelAddAsync(global::MurmurRPC.Channel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelAddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelAdd adds the channel to the given server. The parent and name of
      /// the channel must be set.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Channel> ChannelAddAsync(global::MurmurRPC.Channel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelAdd, null, options, request);
      }
      /// <summary>
      /// ChannelRemove removes the given channel from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ChannelRemove(global::MurmurRPC.Channel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelRemove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelRemove removes the given channel from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ChannelRemove(global::MurmurRPC.Channel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelRemove, null, options, request);
      }
      /// <summary>
      /// ChannelRemove removes the given channel from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ChannelRemoveAsync(global::MurmurRPC.Channel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelRemoveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelRemove removes the given channel from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ChannelRemoveAsync(global::MurmurRPC.Channel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelRemove, null, options, request);
      }
      /// <summary>
      /// ChannelUpdate updates the given channel's attributes. Only the fields that
      /// are set will be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Channel ChannelUpdate(global::MurmurRPC.Channel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelUpdate updates the given channel's attributes. Only the fields that
      /// are set will be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Channel ChannelUpdate(global::MurmurRPC.Channel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ChannelUpdate, null, options, request);
      }
      /// <summary>
      /// ChannelUpdate updates the given channel's attributes. Only the fields that
      /// are set will be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Channel> ChannelUpdateAsync(global::MurmurRPC.Channel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ChannelUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ChannelUpdate updates the given channel's attributes. Only the fields that
      /// are set will be updated.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Channel> ChannelUpdateAsync(global::MurmurRPC.Channel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ChannelUpdate, null, options, request);
      }
      /// <summary>
      /// UserQuery returns a list of connected users who match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.User.Types.List UserQuery(global::MurmurRPC.User.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserQuery returns a list of connected users who match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.User.Types.List UserQuery(global::MurmurRPC.User.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserQuery, null, options, request);
      }
      /// <summary>
      /// UserQuery returns a list of connected users who match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.User.Types.List> UserQueryAsync(global::MurmurRPC.User.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserQuery returns a list of connected users who match the given query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.User.Types.List> UserQueryAsync(global::MurmurRPC.User.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserQuery, null, options, request);
      }
      /// <summary>
      /// UserGet returns information on the connected user, given by the user's
      /// session or name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.User UserGet(global::MurmurRPC.User request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserGet returns information on the connected user, given by the user's
      /// session or name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.User UserGet(global::MurmurRPC.User request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserGet, null, options, request);
      }
      /// <summary>
      /// UserGet returns information on the connected user, given by the user's
      /// session or name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.User> UserGetAsync(global::MurmurRPC.User request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserGet returns information on the connected user, given by the user's
      /// session or name.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.User> UserGetAsync(global::MurmurRPC.User request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserGet, null, options, request);
      }
      /// <summary>
      /// UserUpdate changes the given user's state. Only the following fields can
      /// be changed:
      ///   name, mute, deaf, suppress, priority_speaker, channel, comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.User UserUpdate(global::MurmurRPC.User request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserUpdate changes the given user's state. Only the following fields can
      /// be changed:
      ///   name, mute, deaf, suppress, priority_speaker, channel, comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.User UserUpdate(global::MurmurRPC.User request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserUpdate, null, options, request);
      }
      /// <summary>
      /// UserUpdate changes the given user's state. Only the following fields can
      /// be changed:
      ///   name, mute, deaf, suppress, priority_speaker, channel, comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.User> UserUpdateAsync(global::MurmurRPC.User request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserUpdate changes the given user's state. Only the following fields can
      /// be changed:
      ///   name, mute, deaf, suppress, priority_speaker, channel, comment.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.User> UserUpdateAsync(global::MurmurRPC.User request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserUpdate, null, options, request);
      }
      /// <summary>
      /// UserKick kicks the user from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void UserKick(global::MurmurRPC.User.Types.Kick request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserKick(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserKick kicks the user from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void UserKick(global::MurmurRPC.User.Types.Kick request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UserKick, null, options, request);
      }
      /// <summary>
      /// UserKick kicks the user from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> UserKickAsync(global::MurmurRPC.User.Types.Kick request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UserKickAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UserKick kicks the user from the server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> UserKickAsync(global::MurmurRPC.User.Types.Kick request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UserKick, null, options, request);
      }
      /// <summary>
      /// TreeQuery returns a representation of the given server's channel/user
      /// tree.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Tree TreeQuery(global::MurmurRPC.Tree.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TreeQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TreeQuery returns a representation of the given server's channel/user
      /// tree.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Tree TreeQuery(global::MurmurRPC.Tree.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_TreeQuery, null, options, request);
      }
      /// <summary>
      /// TreeQuery returns a representation of the given server's channel/user
      /// tree.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Tree> TreeQueryAsync(global::MurmurRPC.Tree.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return TreeQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// TreeQuery returns a representation of the given server's channel/user
      /// tree.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Tree> TreeQueryAsync(global::MurmurRPC.Tree.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_TreeQuery, null, options, request);
      }
      /// <summary>
      /// BansGet returns a list of bans for the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Ban.Types.List BansGet(global::MurmurRPC.Ban.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BansGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BansGet returns a list of bans for the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Ban.Types.List BansGet(global::MurmurRPC.Ban.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BansGet, null, options, request);
      }
      /// <summary>
      /// BansGet returns a list of bans for the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Ban.Types.List> BansGetAsync(global::MurmurRPC.Ban.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BansGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BansGet returns a list of bans for the given server.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Ban.Types.List> BansGetAsync(global::MurmurRPC.Ban.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BansGet, null, options, request);
      }
      /// <summary>
      /// BansSet replaces the server's ban list with the given list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void BansSet(global::MurmurRPC.Ban.Types.List request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BansSet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BansSet replaces the server's ban list with the given list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void BansSet(global::MurmurRPC.Ban.Types.List request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_BansSet, null, options, request);
      }
      /// <summary>
      /// BansSet replaces the server's ban list with the given list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> BansSetAsync(global::MurmurRPC.Ban.Types.List request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return BansSetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// BansSet replaces the server's ban list with the given list.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> BansSetAsync(global::MurmurRPC.Ban.Types.List request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_BansSet, null, options, request);
      }
      /// <summary>
      /// ACLGet returns the ACL for the given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.ACL.Types.List ACLGet(global::MurmurRPC.Channel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ACLGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ACLGet returns the ACL for the given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.ACL.Types.List ACLGet(global::MurmurRPC.Channel request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ACLGet, null, options, request);
      }
      /// <summary>
      /// ACLGet returns the ACL for the given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.ACL.Types.List> ACLGetAsync(global::MurmurRPC.Channel request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ACLGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ACLGet returns the ACL for the given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.ACL.Types.List> ACLGetAsync(global::MurmurRPC.Channel request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ACLGet, null, options, request);
      }
      /// <summary>
      /// ACLSet overrides the ACL of the given channel to what is provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ACLSet(global::MurmurRPC.ACL.Types.List request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ACLSet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ACLSet overrides the ACL of the given channel to what is provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ACLSet(global::MurmurRPC.ACL.Types.List request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ACLSet, null, options, request);
      }
      /// <summary>
      /// ACLSet overrides the ACL of the given channel to what is provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ACLSetAsync(global::MurmurRPC.ACL.Types.List request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ACLSetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ACLSet overrides the ACL of the given channel to what is provided.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ACLSetAsync(global::MurmurRPC.ACL.Types.List request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ACLSet, null, options, request);
      }
      /// <summary>
      /// ACLGetEffectivePermissions returns the effective permissions for the given
      /// user in the given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.ACL ACLGetEffectivePermissions(global::MurmurRPC.ACL.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ACLGetEffectivePermissions(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ACLGetEffectivePermissions returns the effective permissions for the given
      /// user in the given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.ACL ACLGetEffectivePermissions(global::MurmurRPC.ACL.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ACLGetEffectivePermissions, null, options, request);
      }
      /// <summary>
      /// ACLGetEffectivePermissions returns the effective permissions for the given
      /// user in the given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.ACL> ACLGetEffectivePermissionsAsync(global::MurmurRPC.ACL.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ACLGetEffectivePermissionsAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ACLGetEffectivePermissions returns the effective permissions for the given
      /// user in the given channel.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.ACL> ACLGetEffectivePermissionsAsync(global::MurmurRPC.ACL.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ACLGetEffectivePermissions, null, options, request);
      }
      /// <summary>
      /// ACLAddTemporaryGroup adds a user to a temporary group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ACLAddTemporaryGroup(global::MurmurRPC.ACL.Types.TemporaryGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ACLAddTemporaryGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ACLAddTemporaryGroup adds a user to a temporary group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ACLAddTemporaryGroup(global::MurmurRPC.ACL.Types.TemporaryGroup request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ACLAddTemporaryGroup, null, options, request);
      }
      /// <summary>
      /// ACLAddTemporaryGroup adds a user to a temporary group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ACLAddTemporaryGroupAsync(global::MurmurRPC.ACL.Types.TemporaryGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ACLAddTemporaryGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ACLAddTemporaryGroup adds a user to a temporary group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ACLAddTemporaryGroupAsync(global::MurmurRPC.ACL.Types.TemporaryGroup request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ACLAddTemporaryGroup, null, options, request);
      }
      /// <summary>
      /// ACLRemoveTemporaryGroup removes a user from a temporary group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ACLRemoveTemporaryGroup(global::MurmurRPC.ACL.Types.TemporaryGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ACLRemoveTemporaryGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ACLRemoveTemporaryGroup removes a user from a temporary group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void ACLRemoveTemporaryGroup(global::MurmurRPC.ACL.Types.TemporaryGroup request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_ACLRemoveTemporaryGroup, null, options, request);
      }
      /// <summary>
      /// ACLRemoveTemporaryGroup removes a user from a temporary group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ACLRemoveTemporaryGroupAsync(global::MurmurRPC.ACL.Types.TemporaryGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ACLRemoveTemporaryGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// ACLRemoveTemporaryGroup removes a user from a temporary group.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> ACLRemoveTemporaryGroupAsync(global::MurmurRPC.ACL.Types.TemporaryGroup request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_ACLRemoveTemporaryGroup, null, options, request);
      }
      /// <summary>
      /// AuthenticatorStream opens an authentication stream to the server.
      ///
      /// There can only be one RPC client with an open Stream. If a new
      /// authenticator connects, the open connected will be closed.
      /// </summary>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::MurmurRPC.Authenticator.Types.Response, global::MurmurRPC.Authenticator.Types.Request> AuthenticatorStream(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AuthenticatorStream(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AuthenticatorStream opens an authentication stream to the server.
      ///
      /// There can only be one RPC client with an open Stream. If a new
      /// authenticator connects, the open connected will be closed.
      /// </summary>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncDuplexStreamingCall<global::MurmurRPC.Authenticator.Types.Response, global::MurmurRPC.Authenticator.Types.Request> AuthenticatorStream(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_AuthenticatorStream, null, options);
      }
      /// <summary>
      /// DatabaseUserQuery returns a list of registered users who match given
      /// query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.DatabaseUser.Types.List DatabaseUserQuery(global::MurmurRPC.DatabaseUser.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserQuery(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserQuery returns a list of registered users who match given
      /// query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.DatabaseUser.Types.List DatabaseUserQuery(global::MurmurRPC.DatabaseUser.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DatabaseUserQuery, null, options, request);
      }
      /// <summary>
      /// DatabaseUserQuery returns a list of registered users who match given
      /// query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.DatabaseUser.Types.List> DatabaseUserQueryAsync(global::MurmurRPC.DatabaseUser.Types.Query request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserQueryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserQuery returns a list of registered users who match given
      /// query.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.DatabaseUser.Types.List> DatabaseUserQueryAsync(global::MurmurRPC.DatabaseUser.Types.Query request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DatabaseUserQuery, null, options, request);
      }
      /// <summary>
      /// DatabaseUserGet returns the database user with the given ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.DatabaseUser DatabaseUserGet(global::MurmurRPC.DatabaseUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserGet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserGet returns the database user with the given ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.DatabaseUser DatabaseUserGet(global::MurmurRPC.DatabaseUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DatabaseUserGet, null, options, request);
      }
      /// <summary>
      /// DatabaseUserGet returns the database user with the given ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.DatabaseUser> DatabaseUserGetAsync(global::MurmurRPC.DatabaseUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserGetAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserGet returns the database user with the given ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.DatabaseUser> DatabaseUserGetAsync(global::MurmurRPC.DatabaseUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DatabaseUserGet, null, options, request);
      }
      /// <summary>
      /// DatabaseUserUpdate updates the given database user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void DatabaseUserUpdate(global::MurmurRPC.DatabaseUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserUpdate(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserUpdate updates the given database user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void DatabaseUserUpdate(global::MurmurRPC.DatabaseUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DatabaseUserUpdate, null, options, request);
      }
      /// <summary>
      /// DatabaseUserUpdate updates the given database user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> DatabaseUserUpdateAsync(global::MurmurRPC.DatabaseUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserUpdateAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserUpdate updates the given database user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> DatabaseUserUpdateAsync(global::MurmurRPC.DatabaseUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DatabaseUserUpdate, null, options, request);
      }
      /// <summary>
      /// DatabaseUserRegister registers a user with the given information on the
      /// server. The returned DatabaseUser will contain the newly registered user's
      /// ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.DatabaseUser DatabaseUserRegister(global::MurmurRPC.DatabaseUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserRegister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserRegister registers a user with the given information on the
      /// server. The returned DatabaseUser will contain the newly registered user's
      /// ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.DatabaseUser DatabaseUserRegister(global::MurmurRPC.DatabaseUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DatabaseUserRegister, null, options, request);
      }
      /// <summary>
      /// DatabaseUserRegister registers a user with the given information on the
      /// server. The returned DatabaseUser will contain the newly registered user's
      /// ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.DatabaseUser> DatabaseUserRegisterAsync(global::MurmurRPC.DatabaseUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserRegisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserRegister registers a user with the given information on the
      /// server. The returned DatabaseUser will contain the newly registered user's
      /// ID.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.DatabaseUser> DatabaseUserRegisterAsync(global::MurmurRPC.DatabaseUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DatabaseUserRegister, null, options, request);
      }
      /// <summary>
      /// DatabaseUserDeregister deregisters the given user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void DatabaseUserDeregister(global::MurmurRPC.DatabaseUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserDeregister(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserDeregister deregisters the given user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void DatabaseUserDeregister(global::MurmurRPC.DatabaseUser request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DatabaseUserDeregister, null, options, request);
      }
      /// <summary>
      /// DatabaseUserDeregister deregisters the given user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> DatabaseUserDeregisterAsync(global::MurmurRPC.DatabaseUser request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserDeregisterAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserDeregister deregisters the given user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> DatabaseUserDeregisterAsync(global::MurmurRPC.DatabaseUser request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DatabaseUserDeregister, null, options, request);
      }
      /// <summary>
      /// DatabaseUserVerify verifies the that the given user-password pair is
      /// correct.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.DatabaseUser DatabaseUserVerify(global::MurmurRPC.DatabaseUser.Types.Verify request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserVerify(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserVerify verifies the that the given user-password pair is
      /// correct.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.DatabaseUser DatabaseUserVerify(global::MurmurRPC.DatabaseUser.Types.Verify request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DatabaseUserVerify, null, options, request);
      }
      /// <summary>
      /// DatabaseUserVerify verifies the that the given user-password pair is
      /// correct.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.DatabaseUser> DatabaseUserVerifyAsync(global::MurmurRPC.DatabaseUser.Types.Verify request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DatabaseUserVerifyAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DatabaseUserVerify verifies the that the given user-password pair is
      /// correct.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.DatabaseUser> DatabaseUserVerifyAsync(global::MurmurRPC.DatabaseUser.Types.Verify request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DatabaseUserVerify, null, options, request);
      }
      /// <summary>
      /// AddRedirectWhisperGroup add a whisper targets redirection for the given
      /// user. Whenever a user whispers to group "source", the whisper will be
      /// redirected to group "target".
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void RedirectWhisperGroupAdd(global::MurmurRPC.RedirectWhisperGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RedirectWhisperGroupAdd(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AddRedirectWhisperGroup add a whisper targets redirection for the given
      /// user. Whenever a user whispers to group "source", the whisper will be
      /// redirected to group "target".
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void RedirectWhisperGroupAdd(global::MurmurRPC.RedirectWhisperGroup request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RedirectWhisperGroupAdd, null, options, request);
      }
      /// <summary>
      /// AddRedirectWhisperGroup add a whisper targets redirection for the given
      /// user. Whenever a user whispers to group "source", the whisper will be
      /// redirected to group "target".
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> RedirectWhisperGroupAddAsync(global::MurmurRPC.RedirectWhisperGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RedirectWhisperGroupAddAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AddRedirectWhisperGroup add a whisper targets redirection for the given
      /// user. Whenever a user whispers to group "source", the whisper will be
      /// redirected to group "target".
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> RedirectWhisperGroupAddAsync(global::MurmurRPC.RedirectWhisperGroup request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RedirectWhisperGroupAdd, null, options, request);
      }
      /// <summary>
      /// RemoveRedirectWhisperGroup removes a whisper target redirection for
      /// the the given user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void RedirectWhisperGroupRemove(global::MurmurRPC.RedirectWhisperGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RedirectWhisperGroupRemove(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveRedirectWhisperGroup removes a whisper target redirection for
      /// the the given user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::MurmurRPC.Void RedirectWhisperGroupRemove(global::MurmurRPC.RedirectWhisperGroup request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RedirectWhisperGroupRemove, null, options, request);
      }
      /// <summary>
      /// RemoveRedirectWhisperGroup removes a whisper target redirection for
      /// the the given user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> RedirectWhisperGroupRemoveAsync(global::MurmurRPC.RedirectWhisperGroup request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RedirectWhisperGroupRemoveAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// RemoveRedirectWhisperGroup removes a whisper target redirection for
      /// the the given user.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::MurmurRPC.Void> RedirectWhisperGroupRemoveAsync(global::MurmurRPC.RedirectWhisperGroup request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RedirectWhisperGroupRemove, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override V1Client NewInstance(ClientBaseConfiguration configuration)
      {
        return new V1Client(configuration);
      }
    }

  }
}
#endregion
