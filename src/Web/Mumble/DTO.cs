// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Mumble/MurmurRPC.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MurmurRPC {

  /// <summary>Holder for reflection information generated from Mumble/MurmurRPC.proto</summary>
  internal static partial class MurmurRPCReflection {

    #region Descriptor
    /// <summary>File descriptor for Mumble/MurmurRPC.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MurmurRPCReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZNdW1ibGUvTXVybXVyUlBDLnByb3RvEglNdXJtdXJSUEMiBgoEVm9pZCJL",
            "CgdWZXJzaW9uEg8KB3ZlcnNpb24YASABKA0SDwoHcmVsZWFzZRgCIAEoCRIK",
            "CgJvcxgDIAEoCRISCgpvc192ZXJzaW9uGAQgASgJIhYKBlVwdGltZRIMCgRz",
            "ZWNzGAEgASgEIuEDCgZTZXJ2ZXISCgoCaWQYASACKA0SDwoHcnVubmluZxgC",
            "IAEoCBIhCgZ1cHRpbWUYAyABKAsyES5NdXJtdXJSUEMuVXB0aW1lGuECCgVF",
            "dmVudBIhCgZzZXJ2ZXIYASABKAsyES5NdXJtdXJSUEMuU2VydmVyEioKBHR5",
            "cGUYAiABKA4yHC5NdXJtdXJSUEMuU2VydmVyLkV2ZW50LlR5cGUSHQoEdXNl",
            "chgDIAEoCzIPLk11cm11clJQQy5Vc2VyEicKB21lc3NhZ2UYBCABKAsyFi5N",
            "dXJtdXJSUEMuVGV4dE1lc3NhZ2USIwoHY2hhbm5lbBgFIAEoCzISLk11cm11",
            "clJQQy5DaGFubmVsIpsBCgRUeXBlEhEKDVVzZXJDb25uZWN0ZWQQABIUChBV",
            "c2VyRGlzY29ubmVjdGVkEAESFAoQVXNlclN0YXRlQ2hhbmdlZBACEhMKD1Vz",
            "ZXJUZXh0TWVzc2FnZRADEhIKDkNoYW5uZWxDcmVhdGVkEAQSEgoOQ2hhbm5l",
            "bFJlbW92ZWQQBRIXChNDaGFubmVsU3RhdGVDaGFuZ2VkEAYaBwoFUXVlcnka",
            "KgoETGlzdBIiCgdzZXJ2ZXJzGAEgAygLMhEuTXVybXVyUlBDLlNlcnZlciJ9",
            "CgVFdmVudBIhCgZzZXJ2ZXIYASABKAsyES5NdXJtdXJSUEMuU2VydmVyEiMK",
            "BHR5cGUYAiABKA4yFS5NdXJtdXJSUEMuRXZlbnQuVHlwZSIsCgRUeXBlEhEK",
            "DVNlcnZlclN0b3BwZWQQABIRCg1TZXJ2ZXJTdGFydGVkEAEi8wEKDUNvbnRl",
            "eHRBY3Rpb24SIQoGc2VydmVyGAEgASgLMhEuTXVybXVyUlBDLlNlcnZlchIP",
            "Cgdjb250ZXh0GAIgASgNEg4KBmFjdGlvbhgDIAEoCRIMCgR0ZXh0GAQgASgJ",
            "Eh4KBWFjdG9yGAUgASgLMg8uTXVybXVyUlBDLlVzZXISHQoEdXNlchgGIAEo",
            "CzIPLk11cm11clJQQy5Vc2VyEiMKB2NoYW5uZWwYByABKAsyEi5NdXJtdXJS",
            "UEMuQ2hhbm5lbCIsCgdDb250ZXh0EgoKBlNlcnZlchABEgsKB0NoYW5uZWwQ",
            "AhIICgRVc2VyEAQigAMKC1RleHRNZXNzYWdlEiEKBnNlcnZlchgBIAEoCzIR",
            "Lk11cm11clJQQy5TZXJ2ZXISHgoFYWN0b3IYAiABKAsyDy5NdXJtdXJSUEMu",
            "VXNlchIeCgV1c2VycxgDIAMoCzIPLk11cm11clJQQy5Vc2VyEiQKCGNoYW5u",
            "ZWxzGAQgAygLMhIuTXVybXVyUlBDLkNoYW5uZWwSIQoFdHJlZXMYBSADKAsy",
            "Ei5NdXJtdXJSUEMuQ2hhbm5lbBIMCgR0ZXh0GAYgASgJGrYBCgZGaWx0ZXIS",
            "IQoGc2VydmVyGAEgASgLMhEuTXVybXVyUlBDLlNlcnZlchI0CgZhY3Rpb24Y",
            "AiABKA4yJC5NdXJtdXJSUEMuVGV4dE1lc3NhZ2UuRmlsdGVyLkFjdGlvbhIn",
            "CgdtZXNzYWdlGAMgASgLMhYuTXVybXVyUlBDLlRleHRNZXNzYWdlIioKBkFj",
            "dGlvbhIKCgZBY2NlcHQQABIKCgZSZWplY3QQARIICgREcm9wEAIihAIKA0xv",
            "ZxIhCgZzZXJ2ZXIYASABKAsyES5NdXJtdXJSUEMuU2VydmVyEhEKCXRpbWVz",
            "dGFtcBgCIAEoAxIMCgR0ZXh0GAMgASgJGkQKBVF1ZXJ5EiEKBnNlcnZlchgB",
            "IAEoCzIRLk11cm11clJQQy5TZXJ2ZXISCwoDbWluGAIgASgNEgsKA21heBgD",
            "IAEoDRpzCgRMaXN0EiEKBnNlcnZlchgBIAEoCzIRLk11cm11clJQQy5TZXJ2",
            "ZXISDQoFdG90YWwYAiABKA0SCwoDbWluGAMgASgNEgsKA21heBgEIAEoDRIf",
            "CgdlbnRyaWVzGAUgAygLMg4uTXVybXVyUlBDLkxvZyLRAQoGQ29uZmlnEiEK",
            "BnNlcnZlchgBIAEoCzIRLk11cm11clJQQy5TZXJ2ZXISLQoGZmllbGRzGAIg",
            "AygLMh0uTXVybXVyUlBDLkNvbmZpZy5GaWVsZHNFbnRyeRotCgtGaWVsZHNF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGkYKBUZpZWxk",
            "EiEKBnNlcnZlchgBIAEoCzIRLk11cm11clJQQy5TZXJ2ZXISCwoDa2V5GAIg",
            "ASgJEg0KBXZhbHVlGAMgASgJIsQCCgdDaGFubmVsEiEKBnNlcnZlchgBIAEo",
            "CzIRLk11cm11clJQQy5TZXJ2ZXISCgoCaWQYAiABKA0SDAoEbmFtZRgDIAEo",
            "CRIiCgZwYXJlbnQYBCABKAsyEi5NdXJtdXJSUEMuQ2hhbm5lbBIhCgVsaW5r",
            "cxgFIAMoCzISLk11cm11clJQQy5DaGFubmVsEhMKC2Rlc2NyaXB0aW9uGAYg",
            "ASgJEhEKCXRlbXBvcmFyeRgHIAEoCBIQCghwb3NpdGlvbhgIIAEoBRoqCgVR",
            "dWVyeRIhCgZzZXJ2ZXIYASABKAsyES5NdXJtdXJSUEMuU2VydmVyGk8KBExp",
            "c3QSIQoGc2VydmVyGAEgASgLMhEuTXVybXVyUlBDLlNlcnZlchIkCghjaGFu",
            "bmVscxgCIAMoCzISLk11cm11clJQQy5DaGFubmVsIvUFCgRVc2VyEiEKBnNl",
            "cnZlchgBIAEoCzIRLk11cm11clJQQy5TZXJ2ZXISDwoHc2Vzc2lvbhgCIAEo",
            "DRIKCgJpZBgDIAEoDRIMCgRuYW1lGAQgASgJEgwKBG11dGUYBSABKAgSDAoE",
            "ZGVhZhgGIAEoCBIQCghzdXBwcmVzcxgHIAEoCBIYChBwcmlvcml0eV9zcGVh",
            "a2VyGAggASgIEhEKCXNlbGZfbXV0ZRgJIAEoCBIRCglzZWxmX2RlYWYYCiAB",
            "KAgSEQoJcmVjb3JkaW5nGAsgASgIEiMKB2NoYW5uZWwYDCABKAsyEi5NdXJt",
            "dXJSUEMuQ2hhbm5lbBITCgtvbmxpbmVfc2VjcxgNIAEoDRIRCglpZGxlX3Nl",
            "Y3MYDiABKA0SFQoNYnl0ZXNfcGVyX3NlYxgPIAEoDRIjCgd2ZXJzaW9uGBAg",
            "ASgLMhIuTXVybXVyUlBDLlZlcnNpb24SFgoOcGx1Z2luX2NvbnRleHQYESAB",
            "KAwSFwoPcGx1Z2luX2lkZW50aXR5GBIgASgJEg8KB2NvbW1lbnQYEyABKAkS",
            "DwoHdGV4dHVyZRgUIAEoDBIPCgdhZGRyZXNzGBUgASgMEhAKCHRjcF9vbmx5",
            "GBYgASgIEhYKDnVkcF9waW5nX21zZWNzGBcgASgCEhYKDnRjcF9waW5nX21z",
            "ZWNzGBggASgCGioKBVF1ZXJ5EiEKBnNlcnZlchgBIAEoCzIRLk11cm11clJQ",
            "Qy5TZXJ2ZXIaSQoETGlzdBIhCgZzZXJ2ZXIYASABKAsyES5NdXJtdXJSUEMu",
            "U2VydmVyEh4KBXVzZXJzGAIgAygLMg8uTXVybXVyUlBDLlVzZXIaeAoES2lj",
            "axIhCgZzZXJ2ZXIYASABKAsyES5NdXJtdXJSUEMuU2VydmVyEh0KBHVzZXIY",
            "AiABKAsyDy5NdXJtdXJSUEMuVXNlchIeCgVhY3RvchgDIAEoCzIPLk11cm11",
            "clJQQy5Vc2VyEg4KBnJlYXNvbhgEIAEoCSK9AQoEVHJlZRIhCgZzZXJ2ZXIY",
            "ASABKAsyES5NdXJtdXJSUEMuU2VydmVyEiMKB2NoYW5uZWwYAiABKAsyEi5N",
            "dXJtdXJSUEMuQ2hhbm5lbBIhCghjaGlsZHJlbhgDIAMoCzIPLk11cm11clJQ",
            "Qy5UcmVlEh4KBXVzZXJzGAQgAygLMg8uTXVybXVyUlBDLlVzZXIaKgoFUXVl",
            "cnkSIQoGc2VydmVyGAEgASgLMhEuTXVybXVyUlBDLlNlcnZlciKOAgoDQmFu",
            "EiEKBnNlcnZlchgBIAEoCzIRLk11cm11clJQQy5TZXJ2ZXISDwoHYWRkcmVz",
            "cxgCIAEoDBIMCgRiaXRzGAMgASgNEgwKBG5hbWUYBCABKAkSDAoEaGFzaBgF",
            "IAEoCRIOCgZyZWFzb24YBiABKAkSDQoFc3RhcnQYByABKAMSFQoNZHVyYXRp",
            "b25fc2VjcxgIIAEoAxoqCgVRdWVyeRIhCgZzZXJ2ZXIYASABKAsyES5NdXJt",
            "dXJSUEMuU2VydmVyGkcKBExpc3QSIQoGc2VydmVyGAEgASgLMhEuTXVybXVy",
            "UlBDLlNlcnZlchIcCgRiYW5zGAIgAygLMg4uTXVybXVyUlBDLkJhbiKWCAoD",
            "QUNMEhIKCmFwcGx5X2hlcmUYAyABKAgSEgoKYXBwbHlfc3VicxgEIAEoCBIR",
            "Cglpbmhlcml0ZWQYBSABKAgSJQoEdXNlchgGIAEoCzIXLk11cm11clJQQy5E",
            "YXRhYmFzZVVzZXISIwoFZ3JvdXAYByABKAsyFC5NdXJtdXJSUEMuQUNMLkdy",
            "b3VwEg0KBWFsbG93GAggASgNEgwKBGRlbnkYCSABKA0a0QEKBUdyb3VwEgwK",
            "BG5hbWUYASABKAkSEQoJaW5oZXJpdGVkGAIgASgIEg8KB2luaGVyaXQYAyAB",
            "KAgSEwoLaW5oZXJpdGFibGUYBCABKAgSKgoJdXNlcnNfYWRkGAUgAygLMhcu",
            "TXVybXVyUlBDLkRhdGFiYXNlVXNlchItCgx1c2Vyc19yZW1vdmUYBiADKAsy",
            "Fy5NdXJtdXJSUEMuRGF0YWJhc2VVc2VyEiYKBXVzZXJzGAcgAygLMhcuTXVy",
            "bXVyUlBDLkRhdGFiYXNlVXNlchpuCgVRdWVyeRIhCgZzZXJ2ZXIYASABKAsy",
            "ES5NdXJtdXJSUEMuU2VydmVyEh0KBHVzZXIYAiABKAsyDy5NdXJtdXJSUEMu",
            "VXNlchIjCgdjaGFubmVsGAMgASgLMhIuTXVybXVyUlBDLkNoYW5uZWwaowEK",
            "BExpc3QSIQoGc2VydmVyGAEgASgLMhEuTXVybXVyUlBDLlNlcnZlchIjCgdj",
            "aGFubmVsGAIgASgLMhIuTXVybXVyUlBDLkNoYW5uZWwSHAoEYWNscxgDIAMo",
            "CzIOLk11cm11clJQQy5BQ0wSJAoGZ3JvdXBzGAQgAygLMhQuTXVybXVyUlBD",
            "LkFDTC5Hcm91cBIPCgdpbmhlcml0GAUgASgIGoUBCg5UZW1wb3JhcnlHcm91",
            "cBIhCgZzZXJ2ZXIYASABKAsyES5NdXJtdXJSUEMuU2VydmVyEiMKB2NoYW5u",
            "ZWwYAiABKAsyEi5NdXJtdXJSUEMuQ2hhbm5lbBIdCgR1c2VyGAMgASgLMg8u",
            "TXVybXVyUlBDLlVzZXISDAoEbmFtZRgEIAEoCSL4AQoKUGVybWlzc2lvbhII",
            "CgROb25lEAASCQoFV3JpdGUQARIMCghUcmF2ZXJzZRACEgkKBUVudGVyEAQS",
            "CQoFU3BlYWsQCBIMCgdXaGlzcGVyEIACEg4KCk11dGVEZWFmZW4QEBIICgRN",
            "b3ZlECASDwoLTWFrZUNoYW5uZWwQQBIZChRNYWtlVGVtcG9yYXJ5Q2hhbm5l",
            "bBCACBIQCgtMaW5rQ2hhbm5lbBCAARIQCgtUZXh0TWVzc2FnZRCABBIKCgRL",
            "aWNrEICABBIJCgNCYW4QgIAIEg4KCFJlZ2lzdGVyEICAEBISCgxSZWdpc3Rl",
            "clNlbGYQgIAgIvANCg1BdXRoZW50aWNhdG9yGsEFCgdSZXF1ZXN0EkMKDGF1",
            "dGhlbnRpY2F0ZRgBIAEoCzItLk11cm11clJQQy5BdXRoZW50aWNhdG9yLlJl",
            "cXVlc3QuQXV0aGVudGljYXRlEjMKBGZpbmQYAiABKAsyJS5NdXJtdXJSUEMu",
            "QXV0aGVudGljYXRvci5SZXF1ZXN0LkZpbmQSNQoFcXVlcnkYAyABKAsyJi5N",
            "dXJtdXJSUEMuQXV0aGVudGljYXRvci5SZXF1ZXN0LlF1ZXJ5EjsKCHJlZ2lz",
            "dGVyGAQgASgLMikuTXVybXVyUlBDLkF1dGhlbnRpY2F0b3IuUmVxdWVzdC5S",
            "ZWdpc3RlchI/CgpkZXJlZ2lzdGVyGAUgASgLMisuTXVybXVyUlBDLkF1dGhl",
            "bnRpY2F0b3IuUmVxdWVzdC5EZXJlZ2lzdGVyEjcKBnVwZGF0ZRgGIAEoCzIn",
            "Lk11cm11clJQQy5BdXRoZW50aWNhdG9yLlJlcXVlc3QuVXBkYXRlGnoKDEF1",
            "dGhlbnRpY2F0ZRIMCgRuYW1lGAEgASgJEhAKCHBhc3N3b3JkGAIgASgJEhQK",
            "DGNlcnRpZmljYXRlcxgDIAMoDBIYChBjZXJ0aWZpY2F0ZV9oYXNoGAQgASgJ",
            "EhoKEnN0cm9uZ19jZXJ0aWZpY2F0ZRgFIAEoCBogCgRGaW5kEgoKAmlkGAEg",
            "ASgNEgwKBG5hbWUYAiABKAkaFwoFUXVlcnkSDgoGZmlsdGVyGAEgASgJGjEK",
            "CFJlZ2lzdGVyEiUKBHVzZXIYASABKAsyFy5NdXJtdXJSUEMuRGF0YWJhc2VV",
            "c2VyGjMKCkRlcmVnaXN0ZXISJQoEdXNlchgBIAEoCzIXLk11cm11clJQQy5E",
            "YXRhYmFzZVVzZXIaLwoGVXBkYXRlEiUKBHVzZXIYASABKAsyFy5NdXJtdXJS",
            "UEMuRGF0YWJhc2VVc2VyGpoICghSZXNwb25zZRJACgppbml0aWFsaXplGAEg",
            "ASgLMiwuTXVybXVyUlBDLkF1dGhlbnRpY2F0b3IuUmVzcG9uc2UuSW5pdGlh",
            "bGl6ZRJECgxhdXRoZW50aWNhdGUYAiABKAsyLi5NdXJtdXJSUEMuQXV0aGVu",
            "dGljYXRvci5SZXNwb25zZS5BdXRoZW50aWNhdGUSNAoEZmluZBgDIAEoCzIm",
            "Lk11cm11clJQQy5BdXRoZW50aWNhdG9yLlJlc3BvbnNlLkZpbmQSNgoFcXVl",
            "cnkYBCABKAsyJy5NdXJtdXJSUEMuQXV0aGVudGljYXRvci5SZXNwb25zZS5R",
            "dWVyeRI8CghyZWdpc3RlchgFIAEoCzIqLk11cm11clJQQy5BdXRoZW50aWNh",
            "dG9yLlJlc3BvbnNlLlJlZ2lzdGVyEkAKCmRlcmVnaXN0ZXIYBiABKAsyLC5N",
            "dXJtdXJSUEMuQXV0aGVudGljYXRvci5SZXNwb25zZS5EZXJlZ2lzdGVyEjgK",
            "BnVwZGF0ZRgHIAEoCzIoLk11cm11clJQQy5BdXRoZW50aWNhdG9yLlJlc3Bv",
            "bnNlLlVwZGF0ZRovCgpJbml0aWFsaXplEiEKBnNlcnZlchgBIAEoCzIRLk11",
            "cm11clJQQy5TZXJ2ZXIaiAEKDEF1dGhlbnRpY2F0ZRI4CgZzdGF0dXMYASAB",
            "KA4yKC5NdXJtdXJSUEMuQXV0aGVudGljYXRvci5SZXNwb25zZS5TdGF0dXMS",
            "CgoCaWQYAiABKA0SDAoEbmFtZRgDIAEoCRIkCgZncm91cHMYBCADKAsyFC5N",
            "dXJtdXJSUEMuQUNMLkdyb3VwGi0KBEZpbmQSJQoEdXNlchgBIAEoCzIXLk11",
            "cm11clJQQy5EYXRhYmFzZVVzZXIaLwoFUXVlcnkSJgoFdXNlcnMYASADKAsy",
            "Fy5NdXJtdXJSUEMuRGF0YWJhc2VVc2VyGmsKCFJlZ2lzdGVyEjgKBnN0YXR1",
            "cxgBIAEoDjIoLk11cm11clJQQy5BdXRoZW50aWNhdG9yLlJlc3BvbnNlLlN0",
            "YXR1cxIlCgR1c2VyGAIgASgLMhcuTXVybXVyUlBDLkRhdGFiYXNlVXNlchpG",
            "CgpEZXJlZ2lzdGVyEjgKBnN0YXR1cxgBIAEoDjIoLk11cm11clJQQy5BdXRo",
            "ZW50aWNhdG9yLlJlc3BvbnNlLlN0YXR1cxpCCgZVcGRhdGUSOAoGc3RhdHVz",
            "GAEgASgOMiguTXVybXVyUlBDLkF1dGhlbnRpY2F0b3IuUmVzcG9uc2UuU3Rh",
            "dHVzIkkKBlN0YXR1cxIPCgtGYWxsdGhyb3VnaBAAEgsKB1N1Y2Nlc3MQARIL",
            "CgdGYWlsdXJlEAISFAoQVGVtcG9yYXJ5RmFpbHVyZRADIo0DCgxEYXRhYmFz",
            "ZVVzZXISIQoGc2VydmVyGAEgASgLMhEuTXVybXVyUlBDLlNlcnZlchIKCgJp",
            "ZBgCIAEoDRIMCgRuYW1lGAMgASgJEg0KBWVtYWlsGAQgASgJEg8KB2NvbW1l",
            "bnQYBSABKAkSDAoEaGFzaBgGIAEoCRIQCghwYXNzd29yZBgHIAEoCRITCgts",
            "YXN0X2FjdGl2ZRgIIAEoCRIPCgd0ZXh0dXJlGAkgASgMGjoKBVF1ZXJ5EiEK",
            "BnNlcnZlchgBIAEoCzIRLk11cm11clJQQy5TZXJ2ZXISDgoGZmlsdGVyGAIg",
            "ASgJGlEKBExpc3QSIQoGc2VydmVyGAEgASgLMhEuTXVybXVyUlBDLlNlcnZl",
            "chImCgV1c2VycxgCIAMoCzIXLk11cm11clJQQy5EYXRhYmFzZVVzZXIaSwoG",
            "VmVyaWZ5EiEKBnNlcnZlchgBIAEoCzIRLk11cm11clJQQy5TZXJ2ZXISDAoE",
            "bmFtZRgCIAEoCRIQCghwYXNzd29yZBgDIAEoCSKkAQoUUmVkaXJlY3RXaGlz",
            "cGVyR3JvdXASIQoGc2VydmVyGAEgASgLMhEuTXVybXVyUlBDLlNlcnZlchId",
            "CgR1c2VyGAIgASgLMg8uTXVybXVyUlBDLlVzZXISJAoGc291cmNlGAMgASgL",
            "MhQuTXVybXVyUlBDLkFDTC5Hcm91cBIkCgZ0YXJnZXQYBCABKAsyFC5NdXJt",
            "dXJSUEMuQUNMLkdyb3VwMocWCgJWMRIvCglHZXRVcHRpbWUSDy5NdXJtdXJS",
            "UEMuVm9pZBoRLk11cm11clJQQy5VcHRpbWUSMQoKR2V0VmVyc2lvbhIPLk11",
            "cm11clJQQy5Wb2lkGhIuTXVybXVyUlBDLlZlcnNpb24SLQoGRXZlbnRzEg8u",
            "TXVybXVyUlBDLlZvaWQaEC5NdXJtdXJSUEMuRXZlbnQwARIyCgxTZXJ2ZXJD",
            "cmVhdGUSDy5NdXJtdXJSUEMuVm9pZBoRLk11cm11clJQQy5TZXJ2ZXISPgoL",
            "U2VydmVyUXVlcnkSFy5NdXJtdXJSUEMuU2VydmVyLlF1ZXJ5GhYuTXVybXVy",
            "UlBDLlNlcnZlci5MaXN0EjEKCVNlcnZlckdldBIRLk11cm11clJQQy5TZXJ2",
            "ZXIaES5NdXJtdXJSUEMuU2VydmVyEjEKC1NlcnZlclN0YXJ0EhEuTXVybXVy",
            "UlBDLlNlcnZlchoPLk11cm11clJQQy5Wb2lkEjAKClNlcnZlclN0b3ASES5N",
            "dXJtdXJSUEMuU2VydmVyGg8uTXVybXVyUlBDLlZvaWQSMgoMU2VydmVyUmVt",
            "b3ZlEhEuTXVybXVyUlBDLlNlcnZlchoPLk11cm11clJQQy5Wb2lkEjwKDFNl",
            "cnZlckV2ZW50cxIRLk11cm11clJQQy5TZXJ2ZXIaFy5NdXJtdXJSUEMuU2Vy",
            "dmVyLkV2ZW50MAESPQoQQ29udGV4dEFjdGlvbkFkZBIYLk11cm11clJQQy5D",
            "b250ZXh0QWN0aW9uGg8uTXVybXVyUlBDLlZvaWQSQAoTQ29udGV4dEFjdGlv",
            "blJlbW92ZRIYLk11cm11clJQQy5Db250ZXh0QWN0aW9uGg8uTXVybXVyUlBD",
            "LlZvaWQSSwoTQ29udGV4dEFjdGlvbkV2ZW50cxIYLk11cm11clJQQy5Db250",
            "ZXh0QWN0aW9uGhguTXVybXVyUlBDLkNvbnRleHRBY3Rpb24wARI6Cg9UZXh0",
            "TWVzc2FnZVNlbmQSFi5NdXJtdXJSUEMuVGV4dE1lc3NhZ2UaDy5NdXJtdXJS",
            "UEMuVm9pZBJVChFUZXh0TWVzc2FnZUZpbHRlchIdLk11cm11clJQQy5UZXh0",
            "TWVzc2FnZS5GaWx0ZXIaHS5NdXJtdXJSUEMuVGV4dE1lc3NhZ2UuRmlsdGVy",
            "KAEwARI1CghMb2dRdWVyeRIULk11cm11clJQQy5Mb2cuUXVlcnkaEy5NdXJt",
            "dXJSUEMuTG9nLkxpc3QSMQoJQ29uZmlnR2V0EhEuTXVybXVyUlBDLlNlcnZl",
            "choRLk11cm11clJQQy5Db25maWcSQgoOQ29uZmlnR2V0RmllbGQSFy5NdXJt",
            "dXJSUEMuQ29uZmlnLkZpZWxkGhcuTXVybXVyUlBDLkNvbmZpZy5GaWVsZBI6",
            "Cg5Db25maWdTZXRGaWVsZBIXLk11cm11clJQQy5Db25maWcuRmllbGQaDy5N",
            "dXJtdXJSUEMuVm9pZBI2ChBDb25maWdHZXREZWZhdWx0Eg8uTXVybXVyUlBD",
            "LlZvaWQaES5NdXJtdXJSUEMuQ29uZmlnEkEKDENoYW5uZWxRdWVyeRIYLk11",
            "cm11clJQQy5DaGFubmVsLlF1ZXJ5GhcuTXVybXVyUlBDLkNoYW5uZWwuTGlz",
            "dBI0CgpDaGFubmVsR2V0EhIuTXVybXVyUlBDLkNoYW5uZWwaEi5NdXJtdXJS",
            "UEMuQ2hhbm5lbBI0CgpDaGFubmVsQWRkEhIuTXVybXVyUlBDLkNoYW5uZWwa",
            "Ei5NdXJtdXJSUEMuQ2hhbm5lbBI0Cg1DaGFubmVsUmVtb3ZlEhIuTXVybXVy",
            "UlBDLkNoYW5uZWwaDy5NdXJtdXJSUEMuVm9pZBI3Cg1DaGFubmVsVXBkYXRl",
            "EhIuTXVybXVyUlBDLkNoYW5uZWwaEi5NdXJtdXJSUEMuQ2hhbm5lbBI4CglV",
            "c2VyUXVlcnkSFS5NdXJtdXJSUEMuVXNlci5RdWVyeRoULk11cm11clJQQy5V",
            "c2VyLkxpc3QSKwoHVXNlckdldBIPLk11cm11clJQQy5Vc2VyGg8uTXVybXVy",
            "UlBDLlVzZXISLgoKVXNlclVwZGF0ZRIPLk11cm11clJQQy5Vc2VyGg8uTXVy",
            "bXVyUlBDLlVzZXISMQoIVXNlcktpY2sSFC5NdXJtdXJSUEMuVXNlci5LaWNr",
            "Gg8uTXVybXVyUlBDLlZvaWQSMwoJVHJlZVF1ZXJ5EhUuTXVybXVyUlBDLlRy",
            "ZWUuUXVlcnkaDy5NdXJtdXJSUEMuVHJlZRI0CgdCYW5zR2V0EhQuTXVybXVy",
            "UlBDLkJhbi5RdWVyeRoTLk11cm11clJQQy5CYW4uTGlzdBIvCgdCYW5zU2V0",
            "EhMuTXVybXVyUlBDLkJhbi5MaXN0Gg8uTXVybXVyUlBDLlZvaWQSMQoGQUNM",
            "R2V0EhIuTXVybXVyUlBDLkNoYW5uZWwaEy5NdXJtdXJSUEMuQUNMLkxpc3QS",
            "LgoGQUNMU2V0EhMuTXVybXVyUlBDLkFDTC5MaXN0Gg8uTXVybXVyUlBDLlZv",
            "aWQSQgoaQUNMR2V0RWZmZWN0aXZlUGVybWlzc2lvbnMSFC5NdXJtdXJSUEMu",
            "QUNMLlF1ZXJ5Gg4uTXVybXVyUlBDLkFDTBJGChRBQ0xBZGRUZW1wb3JhcnlH",
            "cm91cBIdLk11cm11clJQQy5BQ0wuVGVtcG9yYXJ5R3JvdXAaDy5NdXJtdXJS",
            "UEMuVm9pZBJJChdBQ0xSZW1vdmVUZW1wb3JhcnlHcm91cBIdLk11cm11clJQ",
            "Qy5BQ0wuVGVtcG9yYXJ5R3JvdXAaDy5NdXJtdXJSUEMuVm9pZBJeChNBdXRo",
            "ZW50aWNhdG9yU3RyZWFtEiEuTXVybXVyUlBDLkF1dGhlbnRpY2F0b3IuUmVz",
            "cG9uc2UaIC5NdXJtdXJSUEMuQXV0aGVudGljYXRvci5SZXF1ZXN0KAEwARJQ",
            "ChFEYXRhYmFzZVVzZXJRdWVyeRIdLk11cm11clJQQy5EYXRhYmFzZVVzZXIu",
            "UXVlcnkaHC5NdXJtdXJSUEMuRGF0YWJhc2VVc2VyLkxpc3QSQwoPRGF0YWJh",
            "c2VVc2VyR2V0EhcuTXVybXVyUlBDLkRhdGFiYXNlVXNlchoXLk11cm11clJQ",
            "Qy5EYXRhYmFzZVVzZXISPgoSRGF0YWJhc2VVc2VyVXBkYXRlEhcuTXVybXVy",
            "UlBDLkRhdGFiYXNlVXNlchoPLk11cm11clJQQy5Wb2lkEkgKFERhdGFiYXNl",
            "VXNlclJlZ2lzdGVyEhcuTXVybXVyUlBDLkRhdGFiYXNlVXNlchoXLk11cm11",
            "clJQQy5EYXRhYmFzZVVzZXISQgoWRGF0YWJhc2VVc2VyRGVyZWdpc3RlchIX",
            "Lk11cm11clJQQy5EYXRhYmFzZVVzZXIaDy5NdXJtdXJSUEMuVm9pZBJNChJE",
            "YXRhYmFzZVVzZXJWZXJpZnkSHi5NdXJtdXJSUEMuRGF0YWJhc2VVc2VyLlZl",
            "cmlmeRoXLk11cm11clJQQy5EYXRhYmFzZVVzZXISSwoXUmVkaXJlY3RXaGlz",
            "cGVyR3JvdXBBZGQSHy5NdXJtdXJSUEMuUmVkaXJlY3RXaGlzcGVyR3JvdXAa",
            "Dy5NdXJtdXJSUEMuVm9pZBJOChpSZWRpcmVjdFdoaXNwZXJHcm91cFJlbW92",
            "ZRIfLk11cm11clJQQy5SZWRpcmVjdFdoaXNwZXJHcm91cBoPLk11cm11clJQ",
            "Qy5Wb2lk"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Void), global::MurmurRPC.Void.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Version), global::MurmurRPC.Version.Parser, new[]{ "Version_", "Release", "Os", "OsVersion" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Uptime), global::MurmurRPC.Uptime.Parser, new[]{ "Secs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Server), global::MurmurRPC.Server.Parser, new[]{ "Id", "Running", "Uptime" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Server.Types.Event), global::MurmurRPC.Server.Types.Event.Parser, new[]{ "Server", "Type", "User", "Message", "Channel" }, null, new[]{ typeof(global::MurmurRPC.Server.Types.Event.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Server.Types.Query), global::MurmurRPC.Server.Types.Query.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Server.Types.List), global::MurmurRPC.Server.Types.List.Parser, new[]{ "Servers" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Event), global::MurmurRPC.Event.Parser, new[]{ "Server", "Type" }, null, new[]{ typeof(global::MurmurRPC.Event.Types.Type) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.ContextAction), global::MurmurRPC.ContextAction.Parser, new[]{ "Server", "Context", "Action", "Text", "Actor", "User", "Channel" }, null, new[]{ typeof(global::MurmurRPC.ContextAction.Types.Context) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.TextMessage), global::MurmurRPC.TextMessage.Parser, new[]{ "Server", "Actor", "Users", "Channels", "Trees", "Text" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.TextMessage.Types.Filter), global::MurmurRPC.TextMessage.Types.Filter.Parser, new[]{ "Server", "Action", "Message" }, null, new[]{ typeof(global::MurmurRPC.TextMessage.Types.Filter.Types.Action) }, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Log), global::MurmurRPC.Log.Parser, new[]{ "Server", "Timestamp", "Text" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Log.Types.Query), global::MurmurRPC.Log.Types.Query.Parser, new[]{ "Server", "Min", "Max" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Log.Types.List), global::MurmurRPC.Log.Types.List.Parser, new[]{ "Server", "Total", "Min", "Max", "Entries" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Config), global::MurmurRPC.Config.Parser, new[]{ "Server", "Fields" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Config.Types.Field), global::MurmurRPC.Config.Types.Field.Parser, new[]{ "Server", "Key", "Value" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Channel), global::MurmurRPC.Channel.Parser, new[]{ "Server", "Id", "Name", "Parent", "Links", "Description", "Temporary", "Position" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Channel.Types.Query), global::MurmurRPC.Channel.Types.Query.Parser, new[]{ "Server" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Channel.Types.List), global::MurmurRPC.Channel.Types.List.Parser, new[]{ "Server", "Channels" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.User), global::MurmurRPC.User.Parser, new[]{ "Server", "Session", "Id", "Name", "Mute", "Deaf", "Suppress", "PrioritySpeaker", "SelfMute", "SelfDeaf", "Recording", "Channel", "OnlineSecs", "IdleSecs", "BytesPerSec", "Version", "PluginContext", "PluginIdentity", "Comment", "Texture", "Address", "TcpOnly", "UdpPingMsecs", "TcpPingMsecs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.User.Types.Query), global::MurmurRPC.User.Types.Query.Parser, new[]{ "Server" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.User.Types.List), global::MurmurRPC.User.Types.List.Parser, new[]{ "Server", "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.User.Types.Kick), global::MurmurRPC.User.Types.Kick.Parser, new[]{ "Server", "User", "Actor", "Reason" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Tree), global::MurmurRPC.Tree.Parser, new[]{ "Server", "Channel", "Children", "Users" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Tree.Types.Query), global::MurmurRPC.Tree.Types.Query.Parser, new[]{ "Server" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Ban), global::MurmurRPC.Ban.Parser, new[]{ "Server", "Address", "Bits", "Name", "Hash", "Reason", "Start", "DurationSecs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Ban.Types.Query), global::MurmurRPC.Ban.Types.Query.Parser, new[]{ "Server" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Ban.Types.List), global::MurmurRPC.Ban.Types.List.Parser, new[]{ "Server", "Bans" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.ACL), global::MurmurRPC.ACL.Parser, new[]{ "ApplyHere", "ApplySubs", "Inherited", "User", "Group", "Allow", "Deny" }, null, new[]{ typeof(global::MurmurRPC.ACL.Types.Permission) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.ACL.Types.Group), global::MurmurRPC.ACL.Types.Group.Parser, new[]{ "Name", "Inherited", "Inherit", "Inheritable", "UsersAdd", "UsersRemove", "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.ACL.Types.Query), global::MurmurRPC.ACL.Types.Query.Parser, new[]{ "Server", "User", "Channel" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.ACL.Types.List), global::MurmurRPC.ACL.Types.List.Parser, new[]{ "Server", "Channel", "Acls", "Groups", "Inherit" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.ACL.Types.TemporaryGroup), global::MurmurRPC.ACL.Types.TemporaryGroup.Parser, new[]{ "Server", "Channel", "User", "Name" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator), global::MurmurRPC.Authenticator.Parser, null, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Request), global::MurmurRPC.Authenticator.Types.Request.Parser, new[]{ "Authenticate", "Find", "Query", "Register", "Deregister", "Update" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Request.Types.Authenticate), global::MurmurRPC.Authenticator.Types.Request.Types.Authenticate.Parser, new[]{ "Name", "Password", "Certificates", "CertificateHash", "StrongCertificate" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Request.Types.Find), global::MurmurRPC.Authenticator.Types.Request.Types.Find.Parser, new[]{ "Id", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Request.Types.Query), global::MurmurRPC.Authenticator.Types.Request.Types.Query.Parser, new[]{ "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Request.Types.Register), global::MurmurRPC.Authenticator.Types.Request.Types.Register.Parser, new[]{ "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Request.Types.Deregister), global::MurmurRPC.Authenticator.Types.Request.Types.Deregister.Parser, new[]{ "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Request.Types.Update), global::MurmurRPC.Authenticator.Types.Request.Types.Update.Parser, new[]{ "User" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Response), global::MurmurRPC.Authenticator.Types.Response.Parser, new[]{ "Initialize", "Authenticate", "Find", "Query", "Register", "Deregister", "Update" }, null, new[]{ typeof(global::MurmurRPC.Authenticator.Types.Response.Types.Status) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Response.Types.Initialize), global::MurmurRPC.Authenticator.Types.Response.Types.Initialize.Parser, new[]{ "Server" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Response.Types.Authenticate), global::MurmurRPC.Authenticator.Types.Response.Types.Authenticate.Parser, new[]{ "Status", "Id", "Name", "Groups" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Response.Types.Find), global::MurmurRPC.Authenticator.Types.Response.Types.Find.Parser, new[]{ "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Response.Types.Query), global::MurmurRPC.Authenticator.Types.Response.Types.Query.Parser, new[]{ "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Response.Types.Register), global::MurmurRPC.Authenticator.Types.Response.Types.Register.Parser, new[]{ "Status", "User" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Response.Types.Deregister), global::MurmurRPC.Authenticator.Types.Response.Types.Deregister.Parser, new[]{ "Status" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.Authenticator.Types.Response.Types.Update), global::MurmurRPC.Authenticator.Types.Response.Types.Update.Parser, new[]{ "Status" }, null, null, null, null)})}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.DatabaseUser), global::MurmurRPC.DatabaseUser.Parser, new[]{ "Server", "Id", "Name", "Email", "Comment", "Hash", "Password", "LastActive", "Texture" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.DatabaseUser.Types.Query), global::MurmurRPC.DatabaseUser.Types.Query.Parser, new[]{ "Server", "Filter" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.DatabaseUser.Types.List), global::MurmurRPC.DatabaseUser.Types.List.Parser, new[]{ "Server", "Users" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.DatabaseUser.Types.Verify), global::MurmurRPC.DatabaseUser.Types.Verify.Parser, new[]{ "Server", "Name", "Password" }, null, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::MurmurRPC.RedirectWhisperGroup), global::MurmurRPC.RedirectWhisperGroup.Parser, new[]{ "Server", "User", "Source", "Target" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  internal sealed partial class Void : pb::IMessage<Void>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Void> _parser = new pb::MessageParser<Void>(() => new Void());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Void> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void(Void other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Void Clone() {
      return new Void(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Void);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Void other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Void other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  internal sealed partial class Version : pb::IMessage<Version>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Version> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version(Version other) : this() {
      _hasBits0 = other._hasBits0;
      version_ = other.version_;
      release_ = other.release_;
      os_ = other.os_;
      osVersion_ = other.osVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version Clone() {
      return new Version(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int Version_FieldNumber = 1;
    private readonly static uint Version_DefaultValue = 0;

    private uint version_;
    /// <summary>
    /// 2-byte Major, 1-byte Minor and 1-byte Patch version number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Version_ {
      get { if ((_hasBits0 & 1) != 0) { return version_; } else { return Version_DefaultValue; } }
      set {
        _hasBits0 |= 1;
        version_ = value;
      }
    }
    /// <summary>Gets whether the "version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasVersion_ {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearVersion_() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "release" field.</summary>
    public const int ReleaseFieldNumber = 2;
    private readonly static string ReleaseDefaultValue = "";

    private string release_;
    /// <summary>
    /// Client release name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Release {
      get { return release_ ?? ReleaseDefaultValue; }
      set {
        release_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "release" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRelease {
      get { return release_ != null; }
    }
    /// <summary>Clears the value of the "release" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRelease() {
      release_ = null;
    }

    /// <summary>Field number for the "os" field.</summary>
    public const int OsFieldNumber = 3;
    private readonly static string OsDefaultValue = "";

    private string os_;
    /// <summary>
    /// Client OS name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Os {
      get { return os_ ?? OsDefaultValue; }
      set {
        os_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "os" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOs {
      get { return os_ != null; }
    }
    /// <summary>Clears the value of the "os" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOs() {
      os_ = null;
    }

    /// <summary>Field number for the "os_version" field.</summary>
    public const int OsVersionFieldNumber = 4;
    private readonly static string OsVersionDefaultValue = "";

    private string osVersion_;
    /// <summary>
    /// Client OS version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OsVersion {
      get { return osVersion_ ?? OsVersionDefaultValue; }
      set {
        osVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "os_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOsVersion {
      get { return osVersion_ != null; }
    }
    /// <summary>Clears the value of the "os_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOsVersion() {
      osVersion_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Version);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Version other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version_ != other.Version_) return false;
      if (Release != other.Release) return false;
      if (Os != other.Os) return false;
      if (OsVersion != other.OsVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasVersion_) hash ^= Version_.GetHashCode();
      if (HasRelease) hash ^= Release.GetHashCode();
      if (HasOs) hash ^= Os.GetHashCode();
      if (HasOsVersion) hash ^= OsVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasVersion_) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version_);
      }
      if (HasRelease) {
        output.WriteRawTag(18);
        output.WriteString(Release);
      }
      if (HasOs) {
        output.WriteRawTag(26);
        output.WriteString(Os);
      }
      if (HasOsVersion) {
        output.WriteRawTag(34);
        output.WriteString(OsVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasVersion_) {
        output.WriteRawTag(8);
        output.WriteUInt32(Version_);
      }
      if (HasRelease) {
        output.WriteRawTag(18);
        output.WriteString(Release);
      }
      if (HasOs) {
        output.WriteRawTag(26);
        output.WriteString(Os);
      }
      if (HasOsVersion) {
        output.WriteRawTag(34);
        output.WriteString(OsVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasVersion_) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Version_);
      }
      if (HasRelease) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Release);
      }
      if (HasOs) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Os);
      }
      if (HasOsVersion) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OsVersion);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Version other) {
      if (other == null) {
        return;
      }
      if (other.HasVersion_) {
        Version_ = other.Version_;
      }
      if (other.HasRelease) {
        Release = other.Release;
      }
      if (other.HasOs) {
        Os = other.Os;
      }
      if (other.HasOsVersion) {
        OsVersion = other.OsVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version_ = input.ReadUInt32();
            break;
          }
          case 18: {
            Release = input.ReadString();
            break;
          }
          case 26: {
            Os = input.ReadString();
            break;
          }
          case 34: {
            OsVersion = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Version_ = input.ReadUInt32();
            break;
          }
          case 18: {
            Release = input.ReadString();
            break;
          }
          case 26: {
            Os = input.ReadString();
            break;
          }
          case 34: {
            OsVersion = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class Uptime : pb::IMessage<Uptime>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Uptime> _parser = new pb::MessageParser<Uptime>(() => new Uptime());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Uptime> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uptime() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uptime(Uptime other) : this() {
      _hasBits0 = other._hasBits0;
      secs_ = other.secs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Uptime Clone() {
      return new Uptime(this);
    }

    /// <summary>Field number for the "secs" field.</summary>
    public const int SecsFieldNumber = 1;
    private readonly static ulong SecsDefaultValue = 0UL;

    private ulong secs_;
    /// <summary>
    /// The number of seconds from the starting time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Secs {
      get { if ((_hasBits0 & 1) != 0) { return secs_; } else { return SecsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        secs_ = value;
      }
    }
    /// <summary>Gets whether the "secs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSecs {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "secs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSecs() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Uptime);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Uptime other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Secs != other.Secs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasSecs) hash ^= Secs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasSecs) {
        output.WriteRawTag(8);
        output.WriteUInt64(Secs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasSecs) {
        output.WriteRawTag(8);
        output.WriteUInt64(Secs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasSecs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Secs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Uptime other) {
      if (other == null) {
        return;
      }
      if (other.HasSecs) {
        Secs = other.Secs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Secs = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Secs = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  internal sealed partial class Server : pb::IMessage<Server>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Server> _parser = new pb::MessageParser<Server>(() => new Server());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Server> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server(Server other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      running_ = other.running_;
      uptime_ = other.uptime_ != null ? other.uptime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Server Clone() {
      return new Server(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    /// The unique server ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "running" field.</summary>
    public const int RunningFieldNumber = 2;
    private readonly static bool RunningDefaultValue = false;

    private bool running_;
    /// <summary>
    /// Is the server currently running?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Running {
      get { if ((_hasBits0 & 2) != 0) { return running_; } else { return RunningDefaultValue; } }
      set {
        _hasBits0 |= 2;
        running_ = value;
      }
    }
    /// <summary>Gets whether the "running" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRunning {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "running" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRunning() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "uptime" field.</summary>
    public const int UptimeFieldNumber = 3;
    private global::MurmurRPC.Uptime uptime_;
    /// <summary>
    /// The update of the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Uptime Uptime {
      get { return uptime_; }
      set {
        uptime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Server);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Server other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Running != other.Running) return false;
      if (!object.Equals(Uptime, other.Uptime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasRunning) hash ^= Running.GetHashCode();
      if (uptime_ != null) hash ^= Uptime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasRunning) {
        output.WriteRawTag(16);
        output.WriteBool(Running);
      }
      if (uptime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Uptime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt32(Id);
      }
      if (HasRunning) {
        output.WriteRawTag(16);
        output.WriteBool(Running);
      }
      if (uptime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Uptime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasRunning) {
        size += 1 + 1;
      }
      if (uptime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uptime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Server other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasRunning) {
        Running = other.Running;
      }
      if (other.uptime_ != null) {
        if (uptime_ == null) {
          Uptime = new global::MurmurRPC.Uptime();
        }
        Uptime.MergeFrom(other.Uptime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Running = input.ReadBool();
            break;
          }
          case 26: {
            if (uptime_ == null) {
              Uptime = new global::MurmurRPC.Uptime();
            }
            input.ReadMessage(Uptime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt32();
            break;
          }
          case 16: {
            Running = input.ReadBool();
            break;
          }
          case 26: {
            if (uptime_ == null) {
              Uptime = new global::MurmurRPC.Uptime();
            }
            input.ReadMessage(Uptime);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Server message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Event : pb::IMessage<Event>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Event> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Server.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event(Event other) : this() {
          _hasBits0 = other._hasBits0;
          server_ = other.server_ != null ? other.server_.Clone() : null;
          type_ = other.type_;
          user_ = other.user_ != null ? other.user_.Clone() : null;
          message_ = other.message_ != null ? other.message_.Clone() : null;
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Event Clone() {
          return new Event(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server on which the event happened.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private readonly static global::MurmurRPC.Server.Types.Event.Types.Type TypeDefaultValue = global::MurmurRPC.Server.Types.Event.Types.Type.UserConnected;

        private global::MurmurRPC.Server.Types.Event.Types.Type type_;
        /// <summary>
        /// The type of event that happened.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server.Types.Event.Types.Type Type {
          get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
          set {
            _hasBits0 |= 1;
            type_ = value;
          }
        }
        /// <summary>Gets whether the "type" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasType {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "type" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearType() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 3;
        private global::MurmurRPC.User user_;
        /// <summary>
        /// The user tied to the event (if applicable).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.User User {
          get { return user_; }
          set {
            user_ = value;
          }
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 4;
        private global::MurmurRPC.TextMessage message_;
        /// <summary>
        /// The text message tied to the event (if applicable).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.TextMessage Message {
          get { return message_; }
          set {
            message_ = value;
          }
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 5;
        private global::MurmurRPC.Channel channel_;
        /// <summary>
        /// The channel tied to the event (if applicable).
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Channel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Event);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Event other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (Type != other.Type) return false;
          if (!object.Equals(User, other.User)) return false;
          if (!object.Equals(Message, other.Message)) return false;
          if (!object.Equals(Channel, other.Channel)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (HasType) hash ^= Type.GetHashCode();
          if (user_ != null) hash ^= User.GetHashCode();
          if (message_ != null) hash ^= Message.GetHashCode();
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasType) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (user_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(User);
          }
          if (message_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Message);
          }
          if (channel_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Channel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasType) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (user_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(User);
          }
          if (message_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Message);
          }
          if (channel_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Channel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (HasType) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (user_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
          }
          if (message_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
          }
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Event other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.HasType) {
            Type = other.Type;
          }
          if (other.user_ != null) {
            if (user_ == null) {
              User = new global::MurmurRPC.User();
            }
            User.MergeFrom(other.User);
          }
          if (other.message_ != null) {
            if (message_ == null) {
              Message = new global::MurmurRPC.TextMessage();
            }
            Message.MergeFrom(other.Message);
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::MurmurRPC.Channel();
            }
            Channel.MergeFrom(other.Channel);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 16: {
                Type = (global::MurmurRPC.Server.Types.Event.Types.Type) input.ReadEnum();
                break;
              }
              case 26: {
                if (user_ == null) {
                  User = new global::MurmurRPC.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 34: {
                if (message_ == null) {
                  Message = new global::MurmurRPC.TextMessage();
                }
                input.ReadMessage(Message);
                break;
              }
              case 42: {
                if (channel_ == null) {
                  Channel = new global::MurmurRPC.Channel();
                }
                input.ReadMessage(Channel);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 16: {
                Type = (global::MurmurRPC.Server.Types.Event.Types.Type) input.ReadEnum();
                break;
              }
              case 26: {
                if (user_ == null) {
                  User = new global::MurmurRPC.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 34: {
                if (message_ == null) {
                  Message = new global::MurmurRPC.TextMessage();
                }
                input.ReadMessage(Message);
                break;
              }
              case 42: {
                if (channel_ == null) {
                  Channel = new global::MurmurRPC.Channel();
                }
                input.ReadMessage(Channel);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Event message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal enum Type {
            [pbr::OriginalName("UserConnected")] UserConnected = 0,
            [pbr::OriginalName("UserDisconnected")] UserDisconnected = 1,
            [pbr::OriginalName("UserStateChanged")] UserStateChanged = 2,
            [pbr::OriginalName("UserTextMessage")] UserTextMessage = 3,
            [pbr::OriginalName("ChannelCreated")] ChannelCreated = 4,
            [pbr::OriginalName("ChannelRemoved")] ChannelRemoved = 5,
            [pbr::OriginalName("ChannelStateChanged")] ChannelStateChanged = 6,
          }

        }
        #endregion

      }

      internal sealed partial class Query : pb::IMessage<Query>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Query> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Server.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query(Query other) : this() {
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query Clone() {
          return new Query(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Query);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Query other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Query other) {
          if (other == null) {
            return;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
            }
          }
        }
        #endif

      }

      internal sealed partial class List : pb::IMessage<List>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<List> _parser = new pb::MessageParser<List>(() => new List());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<List> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Server.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List(List other) : this() {
          servers_ = other.servers_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List Clone() {
          return new List(this);
        }

        /// <summary>Field number for the "servers" field.</summary>
        public const int ServersFieldNumber = 1;
        private static readonly pb::FieldCodec<global::MurmurRPC.Server> _repeated_servers_codec
            = pb::FieldCodec.ForMessage(10, global::MurmurRPC.Server.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.Server> servers_ = new pbc::RepeatedField<global::MurmurRPC.Server>();
        /// <summary>
        /// The servers.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.Server> Servers {
          get { return servers_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as List);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(List other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!servers_.Equals(other.servers_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= servers_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          servers_.WriteTo(output, _repeated_servers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          servers_.WriteTo(ref output, _repeated_servers_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += servers_.CalculateSize(_repeated_servers_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(List other) {
          if (other == null) {
            return;
          }
          servers_.Add(other.servers_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                servers_.AddEntriesFrom(input, _repeated_servers_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                servers_.AddEntriesFrom(ref input, _repeated_servers_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  internal sealed partial class Event : pb::IMessage<Event>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Event> _parser = new pb::MessageParser<Event>(() => new Event());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Event> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event(Event other) : this() {
      _hasBits0 = other._hasBits0;
      server_ = other.server_ != null ? other.server_.Clone() : null;
      type_ = other.type_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Event Clone() {
      return new Event(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server for which the event happened.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private readonly static global::MurmurRPC.Event.Types.Type TypeDefaultValue = global::MurmurRPC.Event.Types.Type.ServerStopped;

    private global::MurmurRPC.Event.Types.Type type_;
    /// <summary>
    /// The type of event that happened.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Event.Types.Type Type {
      get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        type_ = value;
      }
    }
    /// <summary>Gets whether the "type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearType() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Event);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Event other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (Type != other.Type) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (HasType) hash ^= Type.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (HasType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Event other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.HasType) {
        Type = other.Type;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Type = (global::MurmurRPC.Event.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Type = (global::MurmurRPC.Event.Types.Type) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Event message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Type {
        [pbr::OriginalName("ServerStopped")] ServerStopped = 0,
        [pbr::OriginalName("ServerStarted")] ServerStarted = 1,
      }

    }
    #endregion

  }

  internal sealed partial class ContextAction : pb::IMessage<ContextAction>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContextAction> _parser = new pb::MessageParser<ContextAction>(() => new ContextAction());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContextAction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextAction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextAction(ContextAction other) : this() {
      _hasBits0 = other._hasBits0;
      server_ = other.server_ != null ? other.server_.Clone() : null;
      context_ = other.context_;
      action_ = other.action_;
      text_ = other.text_;
      actor_ = other.actor_ != null ? other.actor_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      channel_ = other.channel_ != null ? other.channel_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContextAction Clone() {
      return new ContextAction(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server on which the action is.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "context" field.</summary>
    public const int ContextFieldNumber = 2;
    private readonly static uint ContextDefaultValue = 0;

    private uint context_;
    /// <summary>
    /// The context in which the action is.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Context {
      get { if ((_hasBits0 & 1) != 0) { return context_; } else { return ContextDefaultValue; } }
      set {
        _hasBits0 |= 1;
        context_ = value;
      }
    }
    /// <summary>Gets whether the "context" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasContext {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "context" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContext() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "action" field.</summary>
    public const int ActionFieldNumber = 3;
    private readonly static string ActionDefaultValue = "";

    private string action_;
    /// <summary>
    /// The action name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Action {
      get { return action_ ?? ActionDefaultValue; }
      set {
        action_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "action" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAction {
      get { return action_ != null; }
    }
    /// <summary>Clears the value of the "action" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAction() {
      action_ = null;
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 4;
    private readonly static string TextDefaultValue = "";

    private string text_;
    /// <summary>
    /// The user-visible descriptive name of the action.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_ ?? TextDefaultValue; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasText {
      get { return text_ != null; }
    }
    /// <summary>Clears the value of the "text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearText() {
      text_ = null;
    }

    /// <summary>Field number for the "actor" field.</summary>
    public const int ActorFieldNumber = 5;
    private global::MurmurRPC.User actor_;
    /// <summary>
    /// The user that triggered the ContextAction.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.User Actor {
      get { return actor_; }
      set {
        actor_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 6;
    private global::MurmurRPC.User user_;
    /// <summary>
    /// The user on which the ContextAction was triggered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 7;
    private global::MurmurRPC.Channel channel_;
    /// <summary>
    /// The channel on which the ContextAction was triggered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Channel Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContextAction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContextAction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (Context != other.Context) return false;
      if (Action != other.Action) return false;
      if (Text != other.Text) return false;
      if (!object.Equals(Actor, other.Actor)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Channel, other.Channel)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (HasContext) hash ^= Context.GetHashCode();
      if (HasAction) hash ^= Action.GetHashCode();
      if (HasText) hash ^= Text.GetHashCode();
      if (actor_ != null) hash ^= Actor.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (channel_ != null) hash ^= Channel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasContext) {
        output.WriteRawTag(16);
        output.WriteUInt32(Context);
      }
      if (HasAction) {
        output.WriteRawTag(26);
        output.WriteString(Action);
      }
      if (HasText) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      if (actor_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Actor);
      }
      if (user_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(User);
      }
      if (channel_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Channel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasContext) {
        output.WriteRawTag(16);
        output.WriteUInt32(Context);
      }
      if (HasAction) {
        output.WriteRawTag(26);
        output.WriteString(Action);
      }
      if (HasText) {
        output.WriteRawTag(34);
        output.WriteString(Text);
      }
      if (actor_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Actor);
      }
      if (user_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(User);
      }
      if (channel_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Channel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (HasContext) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Context);
      }
      if (HasAction) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Action);
      }
      if (HasText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (actor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Actor);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (channel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContextAction other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.HasContext) {
        Context = other.Context;
      }
      if (other.HasAction) {
        Action = other.Action;
      }
      if (other.HasText) {
        Text = other.Text;
      }
      if (other.actor_ != null) {
        if (actor_ == null) {
          Actor = new global::MurmurRPC.User();
        }
        Actor.MergeFrom(other.Actor);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::MurmurRPC.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.channel_ != null) {
        if (channel_ == null) {
          Channel = new global::MurmurRPC.Channel();
        }
        Channel.MergeFrom(other.Channel);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Context = input.ReadUInt32();
            break;
          }
          case 26: {
            Action = input.ReadString();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
          case 42: {
            if (actor_ == null) {
              Actor = new global::MurmurRPC.User();
            }
            input.ReadMessage(Actor);
            break;
          }
          case 50: {
            if (user_ == null) {
              User = new global::MurmurRPC.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 58: {
            if (channel_ == null) {
              Channel = new global::MurmurRPC.Channel();
            }
            input.ReadMessage(Channel);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Context = input.ReadUInt32();
            break;
          }
          case 26: {
            Action = input.ReadString();
            break;
          }
          case 34: {
            Text = input.ReadString();
            break;
          }
          case 42: {
            if (actor_ == null) {
              Actor = new global::MurmurRPC.User();
            }
            input.ReadMessage(Actor);
            break;
          }
          case 50: {
            if (user_ == null) {
              User = new global::MurmurRPC.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 58: {
            if (channel_ == null) {
              Channel = new global::MurmurRPC.Channel();
            }
            input.ReadMessage(Channel);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ContextAction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Context {
        [pbr::OriginalName("Server")] Server = 1,
        [pbr::OriginalName("Channel")] Channel = 2,
        [pbr::OriginalName("User")] User = 4,
      }

    }
    #endregion

  }

  internal sealed partial class TextMessage : pb::IMessage<TextMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextMessage> _parser = new pb::MessageParser<TextMessage>(() => new TextMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextMessage(TextMessage other) : this() {
      server_ = other.server_ != null ? other.server_.Clone() : null;
      actor_ = other.actor_ != null ? other.actor_.Clone() : null;
      users_ = other.users_.Clone();
      channels_ = other.channels_.Clone();
      trees_ = other.trees_.Clone();
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextMessage Clone() {
      return new TextMessage(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server on which the TextMessage originates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "actor" field.</summary>
    public const int ActorFieldNumber = 2;
    private global::MurmurRPC.User actor_;
    /// <summary>
    /// The user who sent the message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.User Actor {
      get { return actor_; }
      set {
        actor_ = value;
      }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MurmurRPC.User> _repeated_users_codec
        = pb::FieldCodec.ForMessage(26, global::MurmurRPC.User.Parser);
    private readonly pbc::RepeatedField<global::MurmurRPC.User> users_ = new pbc::RepeatedField<global::MurmurRPC.User>();
    /// <summary>
    /// The users to whom the message is sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MurmurRPC.User> Users {
      get { return users_; }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MurmurRPC.Channel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(34, global::MurmurRPC.Channel.Parser);
    private readonly pbc::RepeatedField<global::MurmurRPC.Channel> channels_ = new pbc::RepeatedField<global::MurmurRPC.Channel>();
    /// <summary>
    /// The channels to which the message is sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MurmurRPC.Channel> Channels {
      get { return channels_; }
    }

    /// <summary>Field number for the "trees" field.</summary>
    public const int TreesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::MurmurRPC.Channel> _repeated_trees_codec
        = pb::FieldCodec.ForMessage(42, global::MurmurRPC.Channel.Parser);
    private readonly pbc::RepeatedField<global::MurmurRPC.Channel> trees_ = new pbc::RepeatedField<global::MurmurRPC.Channel>();
    /// <summary>
    /// The channels to which the message is sent, including the channels'
    /// ancestors.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MurmurRPC.Channel> Trees {
      get { return trees_; }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 6;
    private readonly static string TextDefaultValue = "";

    private string text_;
    /// <summary>
    /// The message body that is sent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_ ?? TextDefaultValue; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasText {
      get { return text_ != null; }
    }
    /// <summary>Clears the value of the "text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearText() {
      text_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (!object.Equals(Actor, other.Actor)) return false;
      if(!users_.Equals(other.users_)) return false;
      if(!channels_.Equals(other.channels_)) return false;
      if(!trees_.Equals(other.trees_)) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (actor_ != null) hash ^= Actor.GetHashCode();
      hash ^= users_.GetHashCode();
      hash ^= channels_.GetHashCode();
      hash ^= trees_.GetHashCode();
      if (HasText) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (actor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Actor);
      }
      users_.WriteTo(output, _repeated_users_codec);
      channels_.WriteTo(output, _repeated_channels_codec);
      trees_.WriteTo(output, _repeated_trees_codec);
      if (HasText) {
        output.WriteRawTag(50);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (actor_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Actor);
      }
      users_.WriteTo(ref output, _repeated_users_codec);
      channels_.WriteTo(ref output, _repeated_channels_codec);
      trees_.WriteTo(ref output, _repeated_trees_codec);
      if (HasText) {
        output.WriteRawTag(50);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (actor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Actor);
      }
      size += users_.CalculateSize(_repeated_users_codec);
      size += channels_.CalculateSize(_repeated_channels_codec);
      size += trees_.CalculateSize(_repeated_trees_codec);
      if (HasText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextMessage other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.actor_ != null) {
        if (actor_ == null) {
          Actor = new global::MurmurRPC.User();
        }
        Actor.MergeFrom(other.Actor);
      }
      users_.Add(other.users_);
      channels_.Add(other.channels_);
      trees_.Add(other.trees_);
      if (other.HasText) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 18: {
            if (actor_ == null) {
              Actor = new global::MurmurRPC.User();
            }
            input.ReadMessage(Actor);
            break;
          }
          case 26: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
          case 34: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
          case 42: {
            trees_.AddEntriesFrom(input, _repeated_trees_codec);
            break;
          }
          case 50: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 18: {
            if (actor_ == null) {
              Actor = new global::MurmurRPC.User();
            }
            input.ReadMessage(Actor);
            break;
          }
          case 26: {
            users_.AddEntriesFrom(ref input, _repeated_users_codec);
            break;
          }
          case 34: {
            channels_.AddEntriesFrom(ref input, _repeated_channels_codec);
            break;
          }
          case 42: {
            trees_.AddEntriesFrom(ref input, _repeated_trees_codec);
            break;
          }
          case 50: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the TextMessage message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Filter : pb::IMessage<Filter>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Filter> _parser = new pb::MessageParser<Filter>(() => new Filter());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Filter> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.TextMessage.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter(Filter other) : this() {
          _hasBits0 = other._hasBits0;
          server_ = other.server_ != null ? other.server_.Clone() : null;
          action_ = other.action_;
          message_ = other.message_ != null ? other.message_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Filter Clone() {
          return new Filter(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server on which the message originated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "action" field.</summary>
        public const int ActionFieldNumber = 2;
        private readonly static global::MurmurRPC.TextMessage.Types.Filter.Types.Action ActionDefaultValue = global::MurmurRPC.TextMessage.Types.Filter.Types.Action.Accept;

        private global::MurmurRPC.TextMessage.Types.Filter.Types.Action action_;
        /// <summary>
        /// The action to perform for the message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.TextMessage.Types.Filter.Types.Action Action {
          get { if ((_hasBits0 & 1) != 0) { return action_; } else { return ActionDefaultValue; } }
          set {
            _hasBits0 |= 1;
            action_ = value;
          }
        }
        /// <summary>Gets whether the "action" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasAction {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "action" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearAction() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "message" field.</summary>
        public const int MessageFieldNumber = 3;
        private global::MurmurRPC.TextMessage message_;
        /// <summary>
        /// The text message.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.TextMessage Message {
          get { return message_; }
          set {
            message_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Filter);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Filter other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (Action != other.Action) return false;
          if (!object.Equals(Message, other.Message)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (HasAction) hash ^= Action.GetHashCode();
          if (message_ != null) hash ^= Message.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasAction) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Action);
          }
          if (message_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Message);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasAction) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Action);
          }
          if (message_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Message);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (HasAction) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Action);
          }
          if (message_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Message);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Filter other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.HasAction) {
            Action = other.Action;
          }
          if (other.message_ != null) {
            if (message_ == null) {
              Message = new global::MurmurRPC.TextMessage();
            }
            Message.MergeFrom(other.Message);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 16: {
                Action = (global::MurmurRPC.TextMessage.Types.Filter.Types.Action) input.ReadEnum();
                break;
              }
              case 26: {
                if (message_ == null) {
                  Message = new global::MurmurRPC.TextMessage();
                }
                input.ReadMessage(Message);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 16: {
                Action = (global::MurmurRPC.TextMessage.Types.Filter.Types.Action) input.ReadEnum();
                break;
              }
              case 26: {
                if (message_ == null) {
                  Message = new global::MurmurRPC.TextMessage();
                }
                input.ReadMessage(Message);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Filter message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal enum Action {
            /// <summary>
            /// Accept the message.
            /// </summary>
            [pbr::OriginalName("Accept")] Accept = 0,
            /// <summary>
            /// Reject the message with a permission error.
            /// </summary>
            [pbr::OriginalName("Reject")] Reject = 1,
            /// <summary>
            /// Silently drop the message.
            /// </summary>
            [pbr::OriginalName("Drop")] Drop = 2,
          }

        }
        #endregion

      }

    }
    #endregion

  }

  internal sealed partial class Log : pb::IMessage<Log>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      _hasBits0 = other._hasBits0;
      server_ = other.server_ != null ? other.server_.Clone() : null;
      timestamp_ = other.timestamp_;
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server on which the log message was generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 2;
    private readonly static long TimestampDefaultValue = 0L;

    private long timestamp_;
    /// <summary>
    /// The unix timestamp of when the message was generated.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { if ((_hasBits0 & 1) != 0) { return timestamp_; } else { return TimestampDefaultValue; } }
      set {
        _hasBits0 |= 1;
        timestamp_ = value;
      }
    }
    /// <summary>Gets whether the "timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTimestamp {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 3;
    private readonly static string TextDefaultValue = "";

    private string text_;
    /// <summary>
    /// The log message.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_ ?? TextDefaultValue; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "text" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasText {
      get { return text_ != null; }
    }
    /// <summary>Clears the value of the "text" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearText() {
      text_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (Timestamp != other.Timestamp) return false;
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (HasTimestamp) hash ^= Timestamp.GetHashCode();
      if (HasText) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (HasText) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt64(Timestamp);
      }
      if (HasText) {
        output.WriteRawTag(26);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (HasTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (HasText) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasText) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 26: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Log message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Query : pb::IMessage<Query>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Query> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Log.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query(Query other) : this() {
          _hasBits0 = other._hasBits0;
          server_ = other.server_ != null ? other.server_.Clone() : null;
          min_ = other.min_;
          max_ = other.max_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query Clone() {
          return new Query(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server whose logs will be queried.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 2;
        private readonly static uint MinDefaultValue = 0;

        private uint min_;
        /// <summary>
        /// The minimum log index to receive.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Min {
          get { if ((_hasBits0 & 1) != 0) { return min_; } else { return MinDefaultValue; } }
          set {
            _hasBits0 |= 1;
            min_ = value;
          }
        }
        /// <summary>Gets whether the "min" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMin {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "min" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMin() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 3;
        private readonly static uint MaxDefaultValue = 0;

        private uint max_;
        /// <summary>
        /// The maximum log index to receive.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Max {
          get { if ((_hasBits0 & 2) != 0) { return max_; } else { return MaxDefaultValue; } }
          set {
            _hasBits0 |= 2;
            max_ = value;
          }
        }
        /// <summary>Gets whether the "max" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMax {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "max" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMax() {
          _hasBits0 &= ~2;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Query);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Query other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (Min != other.Min) return false;
          if (Max != other.Max) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (HasMin) hash ^= Min.GetHashCode();
          if (HasMax) hash ^= Max.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasMin) {
            output.WriteRawTag(16);
            output.WriteUInt32(Min);
          }
          if (HasMax) {
            output.WriteRawTag(24);
            output.WriteUInt32(Max);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasMin) {
            output.WriteRawTag(16);
            output.WriteUInt32(Min);
          }
          if (HasMax) {
            output.WriteRawTag(24);
            output.WriteUInt32(Max);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (HasMin) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Min);
          }
          if (HasMax) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Max);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Query other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.HasMin) {
            Min = other.Min;
          }
          if (other.HasMax) {
            Max = other.Max;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 16: {
                Min = input.ReadUInt32();
                break;
              }
              case 24: {
                Max = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 16: {
                Min = input.ReadUInt32();
                break;
              }
              case 24: {
                Max = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

      internal sealed partial class List : pb::IMessage<List>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<List> _parser = new pb::MessageParser<List>(() => new List());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<List> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Log.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List(List other) : this() {
          _hasBits0 = other._hasBits0;
          server_ = other.server_ != null ? other.server_.Clone() : null;
          total_ = other.total_;
          min_ = other.min_;
          max_ = other.max_;
          entries_ = other.entries_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List Clone() {
          return new List(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server where the log entries are from.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "total" field.</summary>
        public const int TotalFieldNumber = 2;
        private readonly static uint TotalDefaultValue = 0;

        private uint total_;
        /// <summary>
        /// The total number of logs entries on the server.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Total {
          get { if ((_hasBits0 & 1) != 0) { return total_; } else { return TotalDefaultValue; } }
          set {
            _hasBits0 |= 1;
            total_ = value;
          }
        }
        /// <summary>Gets whether the "total" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasTotal {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "total" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearTotal() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "min" field.</summary>
        public const int MinFieldNumber = 3;
        private readonly static uint MinDefaultValue = 0;

        private uint min_;
        /// <summary>
        /// The minimum log index that was sent.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Min {
          get { if ((_hasBits0 & 2) != 0) { return min_; } else { return MinDefaultValue; } }
          set {
            _hasBits0 |= 2;
            min_ = value;
          }
        }
        /// <summary>Gets whether the "min" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMin {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "min" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMin() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "max" field.</summary>
        public const int MaxFieldNumber = 4;
        private readonly static uint MaxDefaultValue = 0;

        private uint max_;
        /// <summary>
        /// The maximum log index that was sent.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public uint Max {
          get { if ((_hasBits0 & 4) != 0) { return max_; } else { return MaxDefaultValue; } }
          set {
            _hasBits0 |= 4;
            max_ = value;
          }
        }
        /// <summary>Gets whether the "max" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasMax {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "max" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearMax() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "entries" field.</summary>
        public const int EntriesFieldNumber = 5;
        private static readonly pb::FieldCodec<global::MurmurRPC.Log> _repeated_entries_codec
            = pb::FieldCodec.ForMessage(42, global::MurmurRPC.Log.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.Log> entries_ = new pbc::RepeatedField<global::MurmurRPC.Log>();
        /// <summary>
        /// The log entries.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.Log> Entries {
          get { return entries_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as List);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(List other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (Total != other.Total) return false;
          if (Min != other.Min) return false;
          if (Max != other.Max) return false;
          if(!entries_.Equals(other.entries_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (HasTotal) hash ^= Total.GetHashCode();
          if (HasMin) hash ^= Min.GetHashCode();
          if (HasMax) hash ^= Max.GetHashCode();
          hash ^= entries_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasTotal) {
            output.WriteRawTag(16);
            output.WriteUInt32(Total);
          }
          if (HasMin) {
            output.WriteRawTag(24);
            output.WriteUInt32(Min);
          }
          if (HasMax) {
            output.WriteRawTag(32);
            output.WriteUInt32(Max);
          }
          entries_.WriteTo(output, _repeated_entries_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasTotal) {
            output.WriteRawTag(16);
            output.WriteUInt32(Total);
          }
          if (HasMin) {
            output.WriteRawTag(24);
            output.WriteUInt32(Min);
          }
          if (HasMax) {
            output.WriteRawTag(32);
            output.WriteUInt32(Max);
          }
          entries_.WriteTo(ref output, _repeated_entries_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (HasTotal) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Total);
          }
          if (HasMin) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Min);
          }
          if (HasMax) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Max);
          }
          size += entries_.CalculateSize(_repeated_entries_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(List other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.HasTotal) {
            Total = other.Total;
          }
          if (other.HasMin) {
            Min = other.Min;
          }
          if (other.HasMax) {
            Max = other.Max;
          }
          entries_.Add(other.entries_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 16: {
                Total = input.ReadUInt32();
                break;
              }
              case 24: {
                Min = input.ReadUInt32();
                break;
              }
              case 32: {
                Max = input.ReadUInt32();
                break;
              }
              case 42: {
                entries_.AddEntriesFrom(input, _repeated_entries_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 16: {
                Total = input.ReadUInt32();
                break;
              }
              case 24: {
                Min = input.ReadUInt32();
                break;
              }
              case 32: {
                Max = input.ReadUInt32();
                break;
              }
              case 42: {
                entries_.AddEntriesFrom(ref input, _repeated_entries_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  internal sealed partial class Config : pb::IMessage<Config>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Config> _parser = new pb::MessageParser<Config>(() => new Config());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Config> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config(Config other) : this() {
      server_ = other.server_ != null ? other.server_.Clone() : null;
      fields_ = other.fields_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Config Clone() {
      return new Config(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server for which the configuration is for.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "fields" field.</summary>
    public const int FieldsFieldNumber = 2;
    private static readonly pbc::MapField<string, string>.Codec _map_fields_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForString(18, ""), 18);
    private readonly pbc::MapField<string, string> fields_ = new pbc::MapField<string, string>();
    /// <summary>
    /// The configuration keys and values.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Fields {
      get { return fields_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Config);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Config other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (!Fields.Equals(other.Fields)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      hash ^= Fields.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      fields_.WriteTo(output, _map_fields_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      fields_.WriteTo(ref output, _map_fields_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      size += fields_.CalculateSize(_map_fields_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Config other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      fields_.Add(other.fields_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 18: {
            fields_.AddEntriesFrom(input, _map_fields_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 18: {
            fields_.AddEntriesFrom(ref input, _map_fields_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Config message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Field : pb::IMessage<Field>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Field> _parser = new pb::MessageParser<Field>(() => new Field());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Field> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Config.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Field() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Field(Field other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          key_ = other.key_;
          value_ = other.value_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Field Clone() {
          return new Field(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server for which the configuration field is for.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "key" field.</summary>
        public const int KeyFieldNumber = 2;
        private readonly static string KeyDefaultValue = "";

        private string key_;
        /// <summary>
        /// The field key.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Key {
          get { return key_ ?? KeyDefaultValue; }
          set {
            key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "key" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasKey {
          get { return key_ != null; }
        }
        /// <summary>Clears the value of the "key" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearKey() {
          key_ = null;
        }

        /// <summary>Field number for the "value" field.</summary>
        public const int ValueFieldNumber = 3;
        private readonly static string ValueDefaultValue = "";

        private string value_;
        /// <summary>
        /// The field value.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Value {
          get { return value_ ?? ValueDefaultValue; }
          set {
            value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "value" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasValue {
          get { return value_ != null; }
        }
        /// <summary>Clears the value of the "value" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearValue() {
          value_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Field);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Field other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (Key != other.Key) return false;
          if (Value != other.Value) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (HasKey) hash ^= Key.GetHashCode();
          if (HasValue) hash ^= Value.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasKey) {
            output.WriteRawTag(18);
            output.WriteString(Key);
          }
          if (HasValue) {
            output.WriteRawTag(26);
            output.WriteString(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasKey) {
            output.WriteRawTag(18);
            output.WriteString(Key);
          }
          if (HasValue) {
            output.WriteRawTag(26);
            output.WriteString(Value);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (HasKey) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
          }
          if (HasValue) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Field other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.HasKey) {
            Key = other.Key;
          }
          if (other.HasValue) {
            Value = other.Value;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                Key = input.ReadString();
                break;
              }
              case 26: {
                Value = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                Key = input.ReadString();
                break;
              }
              case 26: {
                Value = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  internal sealed partial class Channel : pb::IMessage<Channel>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Channel> _parser = new pb::MessageParser<Channel>(() => new Channel());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Channel> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel(Channel other) : this() {
      _hasBits0 = other._hasBits0;
      server_ = other.server_ != null ? other.server_.Clone() : null;
      id_ = other.id_;
      name_ = other.name_;
      parent_ = other.parent_ != null ? other.parent_.Clone() : null;
      links_ = other.links_.Clone();
      description_ = other.description_;
      temporary_ = other.temporary_;
      position_ = other.position_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Channel Clone() {
      return new Channel(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server on which the channel exists.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    /// The unique channel identifier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// The channel name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "parent" field.</summary>
    public const int ParentFieldNumber = 4;
    private global::MurmurRPC.Channel parent_;
    /// <summary>
    /// The channel's parent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Channel Parent {
      get { return parent_; }
      set {
        parent_ = value;
      }
    }

    /// <summary>Field number for the "links" field.</summary>
    public const int LinksFieldNumber = 5;
    private static readonly pb::FieldCodec<global::MurmurRPC.Channel> _repeated_links_codec
        = pb::FieldCodec.ForMessage(42, global::MurmurRPC.Channel.Parser);
    private readonly pbc::RepeatedField<global::MurmurRPC.Channel> links_ = new pbc::RepeatedField<global::MurmurRPC.Channel>();
    /// <summary>
    /// Linked channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MurmurRPC.Channel> Links {
      get { return links_; }
    }

    /// <summary>Field number for the "description" field.</summary>
    public const int DescriptionFieldNumber = 6;
    private readonly static string DescriptionDefaultValue = "";

    private string description_;
    /// <summary>
    /// The channel's description.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Description {
      get { return description_ ?? DescriptionDefaultValue; }
      set {
        description_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "description" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDescription {
      get { return description_ != null; }
    }
    /// <summary>Clears the value of the "description" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDescription() {
      description_ = null;
    }

    /// <summary>Field number for the "temporary" field.</summary>
    public const int TemporaryFieldNumber = 7;
    private readonly static bool TemporaryDefaultValue = false;

    private bool temporary_;
    /// <summary>
    /// Is the channel temporary?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Temporary {
      get { if ((_hasBits0 & 2) != 0) { return temporary_; } else { return TemporaryDefaultValue; } }
      set {
        _hasBits0 |= 2;
        temporary_ = value;
      }
    }
    /// <summary>Gets whether the "temporary" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTemporary {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "temporary" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTemporary() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 8;
    private readonly static int PositionDefaultValue = 0;

    private int position_;
    /// <summary>
    /// The position in which the channel should appear in a sorted list.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Position {
      get { if ((_hasBits0 & 4) != 0) { return position_; } else { return PositionDefaultValue; } }
      set {
        _hasBits0 |= 4;
        position_ = value;
      }
    }
    /// <summary>Gets whether the "position" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPosition {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "position" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPosition() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Channel);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Channel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (!object.Equals(Parent, other.Parent)) return false;
      if(!links_.Equals(other.links_)) return false;
      if (Description != other.Description) return false;
      if (Temporary != other.Temporary) return false;
      if (Position != other.Position) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (parent_ != null) hash ^= Parent.GetHashCode();
      hash ^= links_.GetHashCode();
      if (HasDescription) hash ^= Description.GetHashCode();
      if (HasTemporary) hash ^= Temporary.GetHashCode();
      if (HasPosition) hash ^= Position.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (parent_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Parent);
      }
      links_.WriteTo(output, _repeated_links_codec);
      if (HasDescription) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (HasTemporary) {
        output.WriteRawTag(56);
        output.WriteBool(Temporary);
      }
      if (HasPosition) {
        output.WriteRawTag(64);
        output.WriteInt32(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (parent_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Parent);
      }
      links_.WriteTo(ref output, _repeated_links_codec);
      if (HasDescription) {
        output.WriteRawTag(50);
        output.WriteString(Description);
      }
      if (HasTemporary) {
        output.WriteRawTag(56);
        output.WriteBool(Temporary);
      }
      if (HasPosition) {
        output.WriteRawTag(64);
        output.WriteInt32(Position);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (parent_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Parent);
      }
      size += links_.CalculateSize(_repeated_links_codec);
      if (HasDescription) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Description);
      }
      if (HasTemporary) {
        size += 1 + 1;
      }
      if (HasPosition) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Position);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Channel other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.parent_ != null) {
        if (parent_ == null) {
          Parent = new global::MurmurRPC.Channel();
        }
        Parent.MergeFrom(other.Parent);
      }
      links_.Add(other.links_);
      if (other.HasDescription) {
        Description = other.Description;
      }
      if (other.HasTemporary) {
        Temporary = other.Temporary;
      }
      if (other.HasPosition) {
        Position = other.Position;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (parent_ == null) {
              Parent = new global::MurmurRPC.Channel();
            }
            input.ReadMessage(Parent);
            break;
          }
          case 42: {
            links_.AddEntriesFrom(input, _repeated_links_codec);
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 56: {
            Temporary = input.ReadBool();
            break;
          }
          case 64: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            if (parent_ == null) {
              Parent = new global::MurmurRPC.Channel();
            }
            input.ReadMessage(Parent);
            break;
          }
          case 42: {
            links_.AddEntriesFrom(ref input, _repeated_links_codec);
            break;
          }
          case 50: {
            Description = input.ReadString();
            break;
          }
          case 56: {
            Temporary = input.ReadBool();
            break;
          }
          case 64: {
            Position = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Channel message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Query : pb::IMessage<Query>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Query> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Channel.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query(Query other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query Clone() {
          return new Query(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server on which the channels are.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Query);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Query other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Query other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
            }
          }
        }
        #endif

      }

      internal sealed partial class List : pb::IMessage<List>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<List> _parser = new pb::MessageParser<List>(() => new List());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<List> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Channel.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List(List other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          channels_ = other.channels_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List Clone() {
          return new List(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server on which the channels are.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "channels" field.</summary>
        public const int ChannelsFieldNumber = 2;
        private static readonly pb::FieldCodec<global::MurmurRPC.Channel> _repeated_channels_codec
            = pb::FieldCodec.ForMessage(18, global::MurmurRPC.Channel.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.Channel> channels_ = new pbc::RepeatedField<global::MurmurRPC.Channel>();
        /// <summary>
        /// The channels.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.Channel> Channels {
          get { return channels_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as List);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(List other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if(!channels_.Equals(other.channels_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          hash ^= channels_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          channels_.WriteTo(output, _repeated_channels_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          channels_.WriteTo(ref output, _repeated_channels_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          size += channels_.CalculateSize(_repeated_channels_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(List other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          channels_.Add(other.channels_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                channels_.AddEntriesFrom(input, _repeated_channels_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                channels_.AddEntriesFrom(ref input, _repeated_channels_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  internal sealed partial class User : pb::IMessage<User>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User(User other) : this() {
      _hasBits0 = other._hasBits0;
      server_ = other.server_ != null ? other.server_.Clone() : null;
      session_ = other.session_;
      id_ = other.id_;
      name_ = other.name_;
      mute_ = other.mute_;
      deaf_ = other.deaf_;
      suppress_ = other.suppress_;
      prioritySpeaker_ = other.prioritySpeaker_;
      selfMute_ = other.selfMute_;
      selfDeaf_ = other.selfDeaf_;
      recording_ = other.recording_;
      channel_ = other.channel_ != null ? other.channel_.Clone() : null;
      onlineSecs_ = other.onlineSecs_;
      idleSecs_ = other.idleSecs_;
      bytesPerSec_ = other.bytesPerSec_;
      version_ = other.version_ != null ? other.version_.Clone() : null;
      pluginContext_ = other.pluginContext_;
      pluginIdentity_ = other.pluginIdentity_;
      comment_ = other.comment_;
      texture_ = other.texture_;
      address_ = other.address_;
      tcpOnly_ = other.tcpOnly_;
      udpPingMsecs_ = other.udpPingMsecs_;
      tcpPingMsecs_ = other.tcpPingMsecs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server to which the user is connected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "session" field.</summary>
    public const int SessionFieldNumber = 2;
    private readonly static uint SessionDefaultValue = 0;

    private uint session_;
    /// <summary>
    /// The user's session ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Session {
      get { if ((_hasBits0 & 1) != 0) { return session_; } else { return SessionDefaultValue; } }
      set {
        _hasBits0 |= 1;
        session_ = value;
      }
    }
    /// <summary>Gets whether the "session" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSession {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "session" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSession() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 3;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    /// The user's registered ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 2) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// The user's name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "mute" field.</summary>
    public const int MuteFieldNumber = 5;
    private readonly static bool MuteDefaultValue = false;

    private bool mute_;
    /// <summary>
    /// Is the user muted?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mute {
      get { if ((_hasBits0 & 4) != 0) { return mute_; } else { return MuteDefaultValue; } }
      set {
        _hasBits0 |= 4;
        mute_ = value;
      }
    }
    /// <summary>Gets whether the "mute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasMute {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "mute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMute() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "deaf" field.</summary>
    public const int DeafFieldNumber = 6;
    private readonly static bool DeafDefaultValue = false;

    private bool deaf_;
    /// <summary>
    /// Is the user deafened?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Deaf {
      get { if ((_hasBits0 & 8) != 0) { return deaf_; } else { return DeafDefaultValue; } }
      set {
        _hasBits0 |= 8;
        deaf_ = value;
      }
    }
    /// <summary>Gets whether the "deaf" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeaf {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "deaf" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeaf() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "suppress" field.</summary>
    public const int SuppressFieldNumber = 7;
    private readonly static bool SuppressDefaultValue = false;

    private bool suppress_;
    /// <summary>
    /// Is the user suppressed?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Suppress {
      get { if ((_hasBits0 & 16) != 0) { return suppress_; } else { return SuppressDefaultValue; } }
      set {
        _hasBits0 |= 16;
        suppress_ = value;
      }
    }
    /// <summary>Gets whether the "suppress" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSuppress {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "suppress" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSuppress() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "priority_speaker" field.</summary>
    public const int PrioritySpeakerFieldNumber = 8;
    private readonly static bool PrioritySpeakerDefaultValue = false;

    private bool prioritySpeaker_;
    /// <summary>
    /// Is the user a priority speaker?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool PrioritySpeaker {
      get { if ((_hasBits0 & 32) != 0) { return prioritySpeaker_; } else { return PrioritySpeakerDefaultValue; } }
      set {
        _hasBits0 |= 32;
        prioritySpeaker_ = value;
      }
    }
    /// <summary>Gets whether the "priority_speaker" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPrioritySpeaker {
      get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "priority_speaker" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPrioritySpeaker() {
      _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "self_mute" field.</summary>
    public const int SelfMuteFieldNumber = 9;
    private readonly static bool SelfMuteDefaultValue = false;

    private bool selfMute_;
    /// <summary>
    /// Has the user muted him/herself?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SelfMute {
      get { if ((_hasBits0 & 64) != 0) { return selfMute_; } else { return SelfMuteDefaultValue; } }
      set {
        _hasBits0 |= 64;
        selfMute_ = value;
      }
    }
    /// <summary>Gets whether the "self_mute" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSelfMute {
      get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "self_mute" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSelfMute() {
      _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "self_deaf" field.</summary>
    public const int SelfDeafFieldNumber = 10;
    private readonly static bool SelfDeafDefaultValue = false;

    private bool selfDeaf_;
    /// <summary>
    /// Has the user muted him/herself?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SelfDeaf {
      get { if ((_hasBits0 & 128) != 0) { return selfDeaf_; } else { return SelfDeafDefaultValue; } }
      set {
        _hasBits0 |= 128;
        selfDeaf_ = value;
      }
    }
    /// <summary>Gets whether the "self_deaf" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasSelfDeaf {
      get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "self_deaf" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearSelfDeaf() {
      _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "recording" field.</summary>
    public const int RecordingFieldNumber = 11;
    private readonly static bool RecordingDefaultValue = false;

    private bool recording_;
    /// <summary>
    /// Is the user recording?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Recording {
      get { if ((_hasBits0 & 256) != 0) { return recording_; } else { return RecordingDefaultValue; } }
      set {
        _hasBits0 |= 256;
        recording_ = value;
      }
    }
    /// <summary>Gets whether the "recording" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasRecording {
      get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "recording" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearRecording() {
      _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 12;
    private global::MurmurRPC.Channel channel_;
    /// <summary>
    /// The channel the user is in.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Channel Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "online_secs" field.</summary>
    public const int OnlineSecsFieldNumber = 13;
    private readonly static uint OnlineSecsDefaultValue = 0;

    private uint onlineSecs_;
    /// <summary>
    /// How long the user has been connected to the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OnlineSecs {
      get { if ((_hasBits0 & 512) != 0) { return onlineSecs_; } else { return OnlineSecsDefaultValue; } }
      set {
        _hasBits0 |= 512;
        onlineSecs_ = value;
      }
    }
    /// <summary>Gets whether the "online_secs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasOnlineSecs {
      get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "online_secs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOnlineSecs() {
      _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "idle_secs" field.</summary>
    public const int IdleSecsFieldNumber = 14;
    private readonly static uint IdleSecsDefaultValue = 0;

    private uint idleSecs_;
    /// <summary>
    /// How long the user has been idle on the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint IdleSecs {
      get { if ((_hasBits0 & 1024) != 0) { return idleSecs_; } else { return IdleSecsDefaultValue; } }
      set {
        _hasBits0 |= 1024;
        idleSecs_ = value;
      }
    }
    /// <summary>Gets whether the "idle_secs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasIdleSecs {
      get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "idle_secs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearIdleSecs() {
      _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "bytes_per_sec" field.</summary>
    public const int BytesPerSecFieldNumber = 15;
    private readonly static uint BytesPerSecDefaultValue = 0;

    private uint bytesPerSec_;
    /// <summary>
    /// How many bytes per second is the user transmitting to the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BytesPerSec {
      get { if ((_hasBits0 & 2048) != 0) { return bytesPerSec_; } else { return BytesPerSecDefaultValue; } }
      set {
        _hasBits0 |= 2048;
        bytesPerSec_ = value;
      }
    }
    /// <summary>Gets whether the "bytes_per_sec" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBytesPerSec {
      get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "bytes_per_sec" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBytesPerSec() {
      _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 16;
    private global::MurmurRPC.Version version_;
    /// <summary>
    /// The user's client version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Version Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "plugin_context" field.</summary>
    public const int PluginContextFieldNumber = 17;
    private readonly static pb::ByteString PluginContextDefaultValue = pb::ByteString.Empty;

    private pb::ByteString pluginContext_;
    /// <summary>
    /// The user's  plugin context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString PluginContext {
      get { return pluginContext_ ?? PluginContextDefaultValue; }
      set {
        pluginContext_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "plugin_context" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPluginContext {
      get { return pluginContext_ != null; }
    }
    /// <summary>Clears the value of the "plugin_context" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPluginContext() {
      pluginContext_ = null;
    }

    /// <summary>Field number for the "plugin_identity" field.</summary>
    public const int PluginIdentityFieldNumber = 18;
    private readonly static string PluginIdentityDefaultValue = "";

    private string pluginIdentity_;
    /// <summary>
    /// The user's plugin identity.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PluginIdentity {
      get { return pluginIdentity_ ?? PluginIdentityDefaultValue; }
      set {
        pluginIdentity_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "plugin_identity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPluginIdentity {
      get { return pluginIdentity_ != null; }
    }
    /// <summary>Clears the value of the "plugin_identity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPluginIdentity() {
      pluginIdentity_ = null;
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 19;
    private readonly static string CommentDefaultValue = "";

    private string comment_;
    /// <summary>
    /// The user's comment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_ ?? CommentDefaultValue; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "comment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComment {
      get { return comment_ != null; }
    }
    /// <summary>Clears the value of the "comment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComment() {
      comment_ = null;
    }

    /// <summary>Field number for the "texture" field.</summary>
    public const int TextureFieldNumber = 20;
    private readonly static pb::ByteString TextureDefaultValue = pb::ByteString.Empty;

    private pb::ByteString texture_;
    /// <summary>
    /// The user's texture.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Texture {
      get { return texture_ ?? TextureDefaultValue; }
      set {
        texture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "texture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTexture {
      get { return texture_ != null; }
    }
    /// <summary>Clears the value of the "texture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTexture() {
      texture_ = null;
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 21;
    private readonly static pb::ByteString AddressDefaultValue = pb::ByteString.Empty;

    private pb::ByteString address_;
    /// <summary>
    /// The user's IP address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_ ?? AddressDefaultValue; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "address" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddress {
      get { return address_ != null; }
    }
    /// <summary>Clears the value of the "address" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddress() {
      address_ = null;
    }

    /// <summary>Field number for the "tcp_only" field.</summary>
    public const int TcpOnlyFieldNumber = 22;
    private readonly static bool TcpOnlyDefaultValue = false;

    private bool tcpOnly_;
    /// <summary>
    /// Is the user in TCP-only mode?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TcpOnly {
      get { if ((_hasBits0 & 4096) != 0) { return tcpOnly_; } else { return TcpOnlyDefaultValue; } }
      set {
        _hasBits0 |= 4096;
        tcpOnly_ = value;
      }
    }
    /// <summary>Gets whether the "tcp_only" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTcpOnly {
      get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "tcp_only" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTcpOnly() {
      _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "udp_ping_msecs" field.</summary>
    public const int UdpPingMsecsFieldNumber = 23;
    private readonly static float UdpPingMsecsDefaultValue = 0F;

    private float udpPingMsecs_;
    /// <summary>
    /// The user's UDP ping in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UdpPingMsecs {
      get { if ((_hasBits0 & 8192) != 0) { return udpPingMsecs_; } else { return UdpPingMsecsDefaultValue; } }
      set {
        _hasBits0 |= 8192;
        udpPingMsecs_ = value;
      }
    }
    /// <summary>Gets whether the "udp_ping_msecs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasUdpPingMsecs {
      get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "udp_ping_msecs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUdpPingMsecs() {
      _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "tcp_ping_msecs" field.</summary>
    public const int TcpPingMsecsFieldNumber = 24;
    private readonly static float TcpPingMsecsDefaultValue = 0F;

    private float tcpPingMsecs_;
    /// <summary>
    /// The user's TCP ping in milliseconds.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float TcpPingMsecs {
      get { if ((_hasBits0 & 16384) != 0) { return tcpPingMsecs_; } else { return TcpPingMsecsDefaultValue; } }
      set {
        _hasBits0 |= 16384;
        tcpPingMsecs_ = value;
      }
    }
    /// <summary>Gets whether the "tcp_ping_msecs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTcpPingMsecs {
      get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "tcp_ping_msecs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTcpPingMsecs() {
      _hasBits0 &= ~16384;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as User);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (Session != other.Session) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Mute != other.Mute) return false;
      if (Deaf != other.Deaf) return false;
      if (Suppress != other.Suppress) return false;
      if (PrioritySpeaker != other.PrioritySpeaker) return false;
      if (SelfMute != other.SelfMute) return false;
      if (SelfDeaf != other.SelfDeaf) return false;
      if (Recording != other.Recording) return false;
      if (!object.Equals(Channel, other.Channel)) return false;
      if (OnlineSecs != other.OnlineSecs) return false;
      if (IdleSecs != other.IdleSecs) return false;
      if (BytesPerSec != other.BytesPerSec) return false;
      if (!object.Equals(Version, other.Version)) return false;
      if (PluginContext != other.PluginContext) return false;
      if (PluginIdentity != other.PluginIdentity) return false;
      if (Comment != other.Comment) return false;
      if (Texture != other.Texture) return false;
      if (Address != other.Address) return false;
      if (TcpOnly != other.TcpOnly) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UdpPingMsecs, other.UdpPingMsecs)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TcpPingMsecs, other.TcpPingMsecs)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (HasSession) hash ^= Session.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasMute) hash ^= Mute.GetHashCode();
      if (HasDeaf) hash ^= Deaf.GetHashCode();
      if (HasSuppress) hash ^= Suppress.GetHashCode();
      if (HasPrioritySpeaker) hash ^= PrioritySpeaker.GetHashCode();
      if (HasSelfMute) hash ^= SelfMute.GetHashCode();
      if (HasSelfDeaf) hash ^= SelfDeaf.GetHashCode();
      if (HasRecording) hash ^= Recording.GetHashCode();
      if (channel_ != null) hash ^= Channel.GetHashCode();
      if (HasOnlineSecs) hash ^= OnlineSecs.GetHashCode();
      if (HasIdleSecs) hash ^= IdleSecs.GetHashCode();
      if (HasBytesPerSec) hash ^= BytesPerSec.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (HasPluginContext) hash ^= PluginContext.GetHashCode();
      if (HasPluginIdentity) hash ^= PluginIdentity.GetHashCode();
      if (HasComment) hash ^= Comment.GetHashCode();
      if (HasTexture) hash ^= Texture.GetHashCode();
      if (HasAddress) hash ^= Address.GetHashCode();
      if (HasTcpOnly) hash ^= TcpOnly.GetHashCode();
      if (HasUdpPingMsecs) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UdpPingMsecs);
      if (HasTcpPingMsecs) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TcpPingMsecs);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasSession) {
        output.WriteRawTag(16);
        output.WriteUInt32(Session);
      }
      if (HasId) {
        output.WriteRawTag(24);
        output.WriteUInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasMute) {
        output.WriteRawTag(40);
        output.WriteBool(Mute);
      }
      if (HasDeaf) {
        output.WriteRawTag(48);
        output.WriteBool(Deaf);
      }
      if (HasSuppress) {
        output.WriteRawTag(56);
        output.WriteBool(Suppress);
      }
      if (HasPrioritySpeaker) {
        output.WriteRawTag(64);
        output.WriteBool(PrioritySpeaker);
      }
      if (HasSelfMute) {
        output.WriteRawTag(72);
        output.WriteBool(SelfMute);
      }
      if (HasSelfDeaf) {
        output.WriteRawTag(80);
        output.WriteBool(SelfDeaf);
      }
      if (HasRecording) {
        output.WriteRawTag(88);
        output.WriteBool(Recording);
      }
      if (channel_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Channel);
      }
      if (HasOnlineSecs) {
        output.WriteRawTag(104);
        output.WriteUInt32(OnlineSecs);
      }
      if (HasIdleSecs) {
        output.WriteRawTag(112);
        output.WriteUInt32(IdleSecs);
      }
      if (HasBytesPerSec) {
        output.WriteRawTag(120);
        output.WriteUInt32(BytesPerSec);
      }
      if (version_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Version);
      }
      if (HasPluginContext) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(PluginContext);
      }
      if (HasPluginIdentity) {
        output.WriteRawTag(146, 1);
        output.WriteString(PluginIdentity);
      }
      if (HasComment) {
        output.WriteRawTag(154, 1);
        output.WriteString(Comment);
      }
      if (HasTexture) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(Texture);
      }
      if (HasAddress) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(Address);
      }
      if (HasTcpOnly) {
        output.WriteRawTag(176, 1);
        output.WriteBool(TcpOnly);
      }
      if (HasUdpPingMsecs) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(UdpPingMsecs);
      }
      if (HasTcpPingMsecs) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(TcpPingMsecs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasSession) {
        output.WriteRawTag(16);
        output.WriteUInt32(Session);
      }
      if (HasId) {
        output.WriteRawTag(24);
        output.WriteUInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasMute) {
        output.WriteRawTag(40);
        output.WriteBool(Mute);
      }
      if (HasDeaf) {
        output.WriteRawTag(48);
        output.WriteBool(Deaf);
      }
      if (HasSuppress) {
        output.WriteRawTag(56);
        output.WriteBool(Suppress);
      }
      if (HasPrioritySpeaker) {
        output.WriteRawTag(64);
        output.WriteBool(PrioritySpeaker);
      }
      if (HasSelfMute) {
        output.WriteRawTag(72);
        output.WriteBool(SelfMute);
      }
      if (HasSelfDeaf) {
        output.WriteRawTag(80);
        output.WriteBool(SelfDeaf);
      }
      if (HasRecording) {
        output.WriteRawTag(88);
        output.WriteBool(Recording);
      }
      if (channel_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(Channel);
      }
      if (HasOnlineSecs) {
        output.WriteRawTag(104);
        output.WriteUInt32(OnlineSecs);
      }
      if (HasIdleSecs) {
        output.WriteRawTag(112);
        output.WriteUInt32(IdleSecs);
      }
      if (HasBytesPerSec) {
        output.WriteRawTag(120);
        output.WriteUInt32(BytesPerSec);
      }
      if (version_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(Version);
      }
      if (HasPluginContext) {
        output.WriteRawTag(138, 1);
        output.WriteBytes(PluginContext);
      }
      if (HasPluginIdentity) {
        output.WriteRawTag(146, 1);
        output.WriteString(PluginIdentity);
      }
      if (HasComment) {
        output.WriteRawTag(154, 1);
        output.WriteString(Comment);
      }
      if (HasTexture) {
        output.WriteRawTag(162, 1);
        output.WriteBytes(Texture);
      }
      if (HasAddress) {
        output.WriteRawTag(170, 1);
        output.WriteBytes(Address);
      }
      if (HasTcpOnly) {
        output.WriteRawTag(176, 1);
        output.WriteBool(TcpOnly);
      }
      if (HasUdpPingMsecs) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(UdpPingMsecs);
      }
      if (HasTcpPingMsecs) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(TcpPingMsecs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (HasSession) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Session);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasMute) {
        size += 1 + 1;
      }
      if (HasDeaf) {
        size += 1 + 1;
      }
      if (HasSuppress) {
        size += 1 + 1;
      }
      if (HasPrioritySpeaker) {
        size += 1 + 1;
      }
      if (HasSelfMute) {
        size += 1 + 1;
      }
      if (HasSelfDeaf) {
        size += 1 + 1;
      }
      if (HasRecording) {
        size += 1 + 1;
      }
      if (channel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
      }
      if (HasOnlineSecs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OnlineSecs);
      }
      if (HasIdleSecs) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IdleSecs);
      }
      if (HasBytesPerSec) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BytesPerSec);
      }
      if (version_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (HasPluginContext) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(PluginContext);
      }
      if (HasPluginIdentity) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PluginIdentity);
      }
      if (HasComment) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (HasTexture) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Texture);
      }
      if (HasAddress) {
        size += 2 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (HasTcpOnly) {
        size += 2 + 1;
      }
      if (HasUdpPingMsecs) {
        size += 2 + 4;
      }
      if (HasTcpPingMsecs) {
        size += 2 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.HasSession) {
        Session = other.Session;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasMute) {
        Mute = other.Mute;
      }
      if (other.HasDeaf) {
        Deaf = other.Deaf;
      }
      if (other.HasSuppress) {
        Suppress = other.Suppress;
      }
      if (other.HasPrioritySpeaker) {
        PrioritySpeaker = other.PrioritySpeaker;
      }
      if (other.HasSelfMute) {
        SelfMute = other.SelfMute;
      }
      if (other.HasSelfDeaf) {
        SelfDeaf = other.SelfDeaf;
      }
      if (other.HasRecording) {
        Recording = other.Recording;
      }
      if (other.channel_ != null) {
        if (channel_ == null) {
          Channel = new global::MurmurRPC.Channel();
        }
        Channel.MergeFrom(other.Channel);
      }
      if (other.HasOnlineSecs) {
        OnlineSecs = other.OnlineSecs;
      }
      if (other.HasIdleSecs) {
        IdleSecs = other.IdleSecs;
      }
      if (other.HasBytesPerSec) {
        BytesPerSec = other.BytesPerSec;
      }
      if (other.version_ != null) {
        if (version_ == null) {
          Version = new global::MurmurRPC.Version();
        }
        Version.MergeFrom(other.Version);
      }
      if (other.HasPluginContext) {
        PluginContext = other.PluginContext;
      }
      if (other.HasPluginIdentity) {
        PluginIdentity = other.PluginIdentity;
      }
      if (other.HasComment) {
        Comment = other.Comment;
      }
      if (other.HasTexture) {
        Texture = other.Texture;
      }
      if (other.HasAddress) {
        Address = other.Address;
      }
      if (other.HasTcpOnly) {
        TcpOnly = other.TcpOnly;
      }
      if (other.HasUdpPingMsecs) {
        UdpPingMsecs = other.UdpPingMsecs;
      }
      if (other.HasTcpPingMsecs) {
        TcpPingMsecs = other.TcpPingMsecs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Session = input.ReadUInt32();
            break;
          }
          case 24: {
            Id = input.ReadUInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Mute = input.ReadBool();
            break;
          }
          case 48: {
            Deaf = input.ReadBool();
            break;
          }
          case 56: {
            Suppress = input.ReadBool();
            break;
          }
          case 64: {
            PrioritySpeaker = input.ReadBool();
            break;
          }
          case 72: {
            SelfMute = input.ReadBool();
            break;
          }
          case 80: {
            SelfDeaf = input.ReadBool();
            break;
          }
          case 88: {
            Recording = input.ReadBool();
            break;
          }
          case 98: {
            if (channel_ == null) {
              Channel = new global::MurmurRPC.Channel();
            }
            input.ReadMessage(Channel);
            break;
          }
          case 104: {
            OnlineSecs = input.ReadUInt32();
            break;
          }
          case 112: {
            IdleSecs = input.ReadUInt32();
            break;
          }
          case 120: {
            BytesPerSec = input.ReadUInt32();
            break;
          }
          case 130: {
            if (version_ == null) {
              Version = new global::MurmurRPC.Version();
            }
            input.ReadMessage(Version);
            break;
          }
          case 138: {
            PluginContext = input.ReadBytes();
            break;
          }
          case 146: {
            PluginIdentity = input.ReadString();
            break;
          }
          case 154: {
            Comment = input.ReadString();
            break;
          }
          case 162: {
            Texture = input.ReadBytes();
            break;
          }
          case 170: {
            Address = input.ReadBytes();
            break;
          }
          case 176: {
            TcpOnly = input.ReadBool();
            break;
          }
          case 189: {
            UdpPingMsecs = input.ReadFloat();
            break;
          }
          case 197: {
            TcpPingMsecs = input.ReadFloat();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Session = input.ReadUInt32();
            break;
          }
          case 24: {
            Id = input.ReadUInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            Mute = input.ReadBool();
            break;
          }
          case 48: {
            Deaf = input.ReadBool();
            break;
          }
          case 56: {
            Suppress = input.ReadBool();
            break;
          }
          case 64: {
            PrioritySpeaker = input.ReadBool();
            break;
          }
          case 72: {
            SelfMute = input.ReadBool();
            break;
          }
          case 80: {
            SelfDeaf = input.ReadBool();
            break;
          }
          case 88: {
            Recording = input.ReadBool();
            break;
          }
          case 98: {
            if (channel_ == null) {
              Channel = new global::MurmurRPC.Channel();
            }
            input.ReadMessage(Channel);
            break;
          }
          case 104: {
            OnlineSecs = input.ReadUInt32();
            break;
          }
          case 112: {
            IdleSecs = input.ReadUInt32();
            break;
          }
          case 120: {
            BytesPerSec = input.ReadUInt32();
            break;
          }
          case 130: {
            if (version_ == null) {
              Version = new global::MurmurRPC.Version();
            }
            input.ReadMessage(Version);
            break;
          }
          case 138: {
            PluginContext = input.ReadBytes();
            break;
          }
          case 146: {
            PluginIdentity = input.ReadString();
            break;
          }
          case 154: {
            Comment = input.ReadString();
            break;
          }
          case 162: {
            Texture = input.ReadBytes();
            break;
          }
          case 170: {
            Address = input.ReadBytes();
            break;
          }
          case 176: {
            TcpOnly = input.ReadBool();
            break;
          }
          case 189: {
            UdpPingMsecs = input.ReadFloat();
            break;
          }
          case 197: {
            TcpPingMsecs = input.ReadFloat();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the User message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Query : pb::IMessage<Query>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Query> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.User.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query(Query other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query Clone() {
          return new Query(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server whose users will be queried.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Query);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Query other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Query other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
            }
          }
        }
        #endif

      }

      internal sealed partial class List : pb::IMessage<List>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<List> _parser = new pb::MessageParser<List>(() => new List());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<List> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.User.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List(List other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          users_ = other.users_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List Clone() {
          return new List(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server to which the users are connected.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "users" field.</summary>
        public const int UsersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::MurmurRPC.User> _repeated_users_codec
            = pb::FieldCodec.ForMessage(18, global::MurmurRPC.User.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.User> users_ = new pbc::RepeatedField<global::MurmurRPC.User>();
        /// <summary>
        /// The users.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.User> Users {
          get { return users_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as List);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(List other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if(!users_.Equals(other.users_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          hash ^= users_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          users_.WriteTo(output, _repeated_users_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          users_.WriteTo(ref output, _repeated_users_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          size += users_.CalculateSize(_repeated_users_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(List other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          users_.Add(other.users_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                users_.AddEntriesFrom(input, _repeated_users_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                users_.AddEntriesFrom(ref input, _repeated_users_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      internal sealed partial class Kick : pb::IMessage<Kick>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Kick> _parser = new pb::MessageParser<Kick>(() => new Kick());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Kick> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.User.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Kick() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Kick(Kick other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          user_ = other.user_ != null ? other.user_.Clone() : null;
          actor_ = other.actor_ != null ? other.actor_.Clone() : null;
          reason_ = other.reason_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Kick Clone() {
          return new Kick(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server to which the user is connected.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 2;
        private global::MurmurRPC.User user_;
        /// <summary>
        /// The user to kick.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.User User {
          get { return user_; }
          set {
            user_ = value;
          }
        }

        /// <summary>Field number for the "actor" field.</summary>
        public const int ActorFieldNumber = 3;
        private global::MurmurRPC.User actor_;
        /// <summary>
        /// The user who performed the kick.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.User Actor {
          get { return actor_; }
          set {
            actor_ = value;
          }
        }

        /// <summary>Field number for the "reason" field.</summary>
        public const int ReasonFieldNumber = 4;
        private readonly static string ReasonDefaultValue = "";

        private string reason_;
        /// <summary>
        /// The reason for why the user is being kicked.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Reason {
          get { return reason_ ?? ReasonDefaultValue; }
          set {
            reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "reason" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasReason {
          get { return reason_ != null; }
        }
        /// <summary>Clears the value of the "reason" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearReason() {
          reason_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Kick);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Kick other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (!object.Equals(User, other.User)) return false;
          if (!object.Equals(Actor, other.Actor)) return false;
          if (Reason != other.Reason) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (user_ != null) hash ^= User.GetHashCode();
          if (actor_ != null) hash ^= Actor.GetHashCode();
          if (HasReason) hash ^= Reason.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (user_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(User);
          }
          if (actor_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Actor);
          }
          if (HasReason) {
            output.WriteRawTag(34);
            output.WriteString(Reason);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (user_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(User);
          }
          if (actor_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Actor);
          }
          if (HasReason) {
            output.WriteRawTag(34);
            output.WriteString(Reason);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (user_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
          }
          if (actor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Actor);
          }
          if (HasReason) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Kick other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.user_ != null) {
            if (user_ == null) {
              User = new global::MurmurRPC.User();
            }
            User.MergeFrom(other.User);
          }
          if (other.actor_ != null) {
            if (actor_ == null) {
              Actor = new global::MurmurRPC.User();
            }
            Actor.MergeFrom(other.Actor);
          }
          if (other.HasReason) {
            Reason = other.Reason;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                if (user_ == null) {
                  User = new global::MurmurRPC.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 26: {
                if (actor_ == null) {
                  Actor = new global::MurmurRPC.User();
                }
                input.ReadMessage(Actor);
                break;
              }
              case 34: {
                Reason = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                if (user_ == null) {
                  User = new global::MurmurRPC.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 26: {
                if (actor_ == null) {
                  Actor = new global::MurmurRPC.User();
                }
                input.ReadMessage(Actor);
                break;
              }
              case 34: {
                Reason = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  internal sealed partial class Tree : pb::IMessage<Tree>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Tree> _parser = new pb::MessageParser<Tree>(() => new Tree());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Tree> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree(Tree other) : this() {
      server_ = other.server_ != null ? other.server_.Clone() : null;
      channel_ = other.channel_ != null ? other.channel_.Clone() : null;
      children_ = other.children_.Clone();
      users_ = other.users_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Tree Clone() {
      return new Tree(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server which the tree represents.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "channel" field.</summary>
    public const int ChannelFieldNumber = 2;
    private global::MurmurRPC.Channel channel_;
    /// <summary>
    /// The current channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Channel Channel {
      get { return channel_; }
      set {
        channel_ = value;
      }
    }

    /// <summary>Field number for the "children" field.</summary>
    public const int ChildrenFieldNumber = 3;
    private static readonly pb::FieldCodec<global::MurmurRPC.Tree> _repeated_children_codec
        = pb::FieldCodec.ForMessage(26, global::MurmurRPC.Tree.Parser);
    private readonly pbc::RepeatedField<global::MurmurRPC.Tree> children_ = new pbc::RepeatedField<global::MurmurRPC.Tree>();
    /// <summary>
    /// Channels below the current channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MurmurRPC.Tree> Children {
      get { return children_; }
    }

    /// <summary>Field number for the "users" field.</summary>
    public const int UsersFieldNumber = 4;
    private static readonly pb::FieldCodec<global::MurmurRPC.User> _repeated_users_codec
        = pb::FieldCodec.ForMessage(34, global::MurmurRPC.User.Parser);
    private readonly pbc::RepeatedField<global::MurmurRPC.User> users_ = new pbc::RepeatedField<global::MurmurRPC.User>();
    /// <summary>
    /// The users in the current channel.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::MurmurRPC.User> Users {
      get { return users_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Tree);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Tree other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (!object.Equals(Channel, other.Channel)) return false;
      if(!children_.Equals(other.children_)) return false;
      if(!users_.Equals(other.users_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (channel_ != null) hash ^= Channel.GetHashCode();
      hash ^= children_.GetHashCode();
      hash ^= users_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (channel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Channel);
      }
      children_.WriteTo(output, _repeated_children_codec);
      users_.WriteTo(output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (channel_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Channel);
      }
      children_.WriteTo(ref output, _repeated_children_codec);
      users_.WriteTo(ref output, _repeated_users_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (channel_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
      }
      size += children_.CalculateSize(_repeated_children_codec);
      size += users_.CalculateSize(_repeated_users_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Tree other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.channel_ != null) {
        if (channel_ == null) {
          Channel = new global::MurmurRPC.Channel();
        }
        Channel.MergeFrom(other.Channel);
      }
      children_.Add(other.children_);
      users_.Add(other.users_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 18: {
            if (channel_ == null) {
              Channel = new global::MurmurRPC.Channel();
            }
            input.ReadMessage(Channel);
            break;
          }
          case 26: {
            children_.AddEntriesFrom(input, _repeated_children_codec);
            break;
          }
          case 34: {
            users_.AddEntriesFrom(input, _repeated_users_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 18: {
            if (channel_ == null) {
              Channel = new global::MurmurRPC.Channel();
            }
            input.ReadMessage(Channel);
            break;
          }
          case 26: {
            children_.AddEntriesFrom(ref input, _repeated_children_codec);
            break;
          }
          case 34: {
            users_.AddEntriesFrom(ref input, _repeated_users_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Tree message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Query : pb::IMessage<Query>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Query> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Tree.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query(Query other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query Clone() {
          return new Query(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server to query.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Query);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Query other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Query other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  internal sealed partial class Ban : pb::IMessage<Ban>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Ban> _parser = new pb::MessageParser<Ban>(() => new Ban());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Ban> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ban() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ban(Ban other) : this() {
      _hasBits0 = other._hasBits0;
      server_ = other.server_ != null ? other.server_.Clone() : null;
      address_ = other.address_;
      bits_ = other.bits_;
      name_ = other.name_;
      hash_ = other.hash_;
      reason_ = other.reason_;
      start_ = other.start_;
      durationSecs_ = other.durationSecs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Ban Clone() {
      return new Ban(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server on which the ban is applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "address" field.</summary>
    public const int AddressFieldNumber = 2;
    private readonly static pb::ByteString AddressDefaultValue = pb::ByteString.Empty;

    private pb::ByteString address_;
    /// <summary>
    /// The banned IP address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Address {
      get { return address_ ?? AddressDefaultValue; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "address" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAddress {
      get { return address_ != null; }
    }
    /// <summary>Clears the value of the "address" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddress() {
      address_ = null;
    }

    /// <summary>Field number for the "bits" field.</summary>
    public const int BitsFieldNumber = 3;
    private readonly static uint BitsDefaultValue = 0;

    private uint bits_;
    /// <summary>
    /// The number of leading bits in the address to which the ban applies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Bits {
      get { if ((_hasBits0 & 1) != 0) { return bits_; } else { return BitsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        bits_ = value;
      }
    }
    /// <summary>Gets whether the "bits" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasBits {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "bits" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearBits() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// The name of the banned user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 5;
    private readonly static string HashDefaultValue = "";

    private string hash_;
    /// <summary>
    /// The certificate hash of the banned user.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_ ?? HashDefaultValue; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "hash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHash {
      get { return hash_ != null; }
    }
    /// <summary>Clears the value of the "hash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHash() {
      hash_ = null;
    }

    /// <summary>Field number for the "reason" field.</summary>
    public const int ReasonFieldNumber = 6;
    private readonly static string ReasonDefaultValue = "";

    private string reason_;
    /// <summary>
    /// The reason for the ban.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_ ?? ReasonDefaultValue; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "reason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasReason {
      get { return reason_ != null; }
    }
    /// <summary>Clears the value of the "reason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearReason() {
      reason_ = null;
    }

    /// <summary>Field number for the "start" field.</summary>
    public const int StartFieldNumber = 7;
    private readonly static long StartDefaultValue = 0L;

    private long start_;
    /// <summary>
    /// The ban start time (in epoch form).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Start {
      get { if ((_hasBits0 & 2) != 0) { return start_; } else { return StartDefaultValue; } }
      set {
        _hasBits0 |= 2;
        start_ = value;
      }
    }
    /// <summary>Gets whether the "start" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasStart {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "start" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearStart() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "duration_secs" field.</summary>
    public const int DurationSecsFieldNumber = 8;
    private readonly static long DurationSecsDefaultValue = 0L;

    private long durationSecs_;
    /// <summary>
    /// The ban duration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long DurationSecs {
      get { if ((_hasBits0 & 4) != 0) { return durationSecs_; } else { return DurationSecsDefaultValue; } }
      set {
        _hasBits0 |= 4;
        durationSecs_ = value;
      }
    }
    /// <summary>Gets whether the "duration_secs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDurationSecs {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "duration_secs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDurationSecs() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Ban);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Ban other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (Address != other.Address) return false;
      if (Bits != other.Bits) return false;
      if (Name != other.Name) return false;
      if (Hash != other.Hash) return false;
      if (Reason != other.Reason) return false;
      if (Start != other.Start) return false;
      if (DurationSecs != other.DurationSecs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (HasAddress) hash ^= Address.GetHashCode();
      if (HasBits) hash ^= Bits.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasHash) hash ^= Hash.GetHashCode();
      if (HasReason) hash ^= Reason.GetHashCode();
      if (HasStart) hash ^= Start.GetHashCode();
      if (HasDurationSecs) hash ^= DurationSecs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasAddress) {
        output.WriteRawTag(18);
        output.WriteBytes(Address);
      }
      if (HasBits) {
        output.WriteRawTag(24);
        output.WriteUInt32(Bits);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasHash) {
        output.WriteRawTag(42);
        output.WriteString(Hash);
      }
      if (HasReason) {
        output.WriteRawTag(50);
        output.WriteString(Reason);
      }
      if (HasStart) {
        output.WriteRawTag(56);
        output.WriteInt64(Start);
      }
      if (HasDurationSecs) {
        output.WriteRawTag(64);
        output.WriteInt64(DurationSecs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasAddress) {
        output.WriteRawTag(18);
        output.WriteBytes(Address);
      }
      if (HasBits) {
        output.WriteRawTag(24);
        output.WriteUInt32(Bits);
      }
      if (HasName) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (HasHash) {
        output.WriteRawTag(42);
        output.WriteString(Hash);
      }
      if (HasReason) {
        output.WriteRawTag(50);
        output.WriteString(Reason);
      }
      if (HasStart) {
        output.WriteRawTag(56);
        output.WriteInt64(Start);
      }
      if (HasDurationSecs) {
        output.WriteRawTag(64);
        output.WriteInt64(DurationSecs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (HasAddress) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Address);
      }
      if (HasBits) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Bits);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasHash) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (HasReason) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (HasStart) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Start);
      }
      if (HasDurationSecs) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DurationSecs);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Ban other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.HasAddress) {
        Address = other.Address;
      }
      if (other.HasBits) {
        Bits = other.Bits;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasHash) {
        Hash = other.Hash;
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasStart) {
        Start = other.Start;
      }
      if (other.HasDurationSecs) {
        DurationSecs = other.DurationSecs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 18: {
            Address = input.ReadBytes();
            break;
          }
          case 24: {
            Bits = input.ReadUInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Hash = input.ReadString();
            break;
          }
          case 50: {
            Reason = input.ReadString();
            break;
          }
          case 56: {
            Start = input.ReadInt64();
            break;
          }
          case 64: {
            DurationSecs = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 18: {
            Address = input.ReadBytes();
            break;
          }
          case 24: {
            Bits = input.ReadUInt32();
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 42: {
            Hash = input.ReadString();
            break;
          }
          case 50: {
            Reason = input.ReadString();
            break;
          }
          case 56: {
            Start = input.ReadInt64();
            break;
          }
          case 64: {
            DurationSecs = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Ban message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Query : pb::IMessage<Query>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Query> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Ban.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query(Query other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query Clone() {
          return new Query(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server whose bans to query.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Query);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Query other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Query other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
            }
          }
        }
        #endif

      }

      internal sealed partial class List : pb::IMessage<List>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<List> _parser = new pb::MessageParser<List>(() => new List());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<List> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Ban.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List(List other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          bans_ = other.bans_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List Clone() {
          return new List(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server for which the bans apply.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "bans" field.</summary>
        public const int BansFieldNumber = 2;
        private static readonly pb::FieldCodec<global::MurmurRPC.Ban> _repeated_bans_codec
            = pb::FieldCodec.ForMessage(18, global::MurmurRPC.Ban.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.Ban> bans_ = new pbc::RepeatedField<global::MurmurRPC.Ban>();
        /// <summary>
        /// The bans.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.Ban> Bans {
          get { return bans_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as List);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(List other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if(!bans_.Equals(other.bans_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          hash ^= bans_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          bans_.WriteTo(output, _repeated_bans_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          bans_.WriteTo(ref output, _repeated_bans_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          size += bans_.CalculateSize(_repeated_bans_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(List other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          bans_.Add(other.bans_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                bans_.AddEntriesFrom(input, _repeated_bans_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                bans_.AddEntriesFrom(ref input, _repeated_bans_codec);
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  internal sealed partial class ACL : pb::IMessage<ACL>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ACL> _parser = new pb::MessageParser<ACL>(() => new ACL());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ACL> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ACL() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ACL(ACL other) : this() {
      _hasBits0 = other._hasBits0;
      applyHere_ = other.applyHere_;
      applySubs_ = other.applySubs_;
      inherited_ = other.inherited_;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      group_ = other.group_ != null ? other.group_.Clone() : null;
      allow_ = other.allow_;
      deny_ = other.deny_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ACL Clone() {
      return new ACL(this);
    }

    /// <summary>Field number for the "apply_here" field.</summary>
    public const int ApplyHereFieldNumber = 3;
    private readonly static bool ApplyHereDefaultValue = false;

    private bool applyHere_;
    /// <summary>
    /// Does the ACL apply to the current channel?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ApplyHere {
      get { if ((_hasBits0 & 1) != 0) { return applyHere_; } else { return ApplyHereDefaultValue; } }
      set {
        _hasBits0 |= 1;
        applyHere_ = value;
      }
    }
    /// <summary>Gets whether the "apply_here" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasApplyHere {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "apply_here" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearApplyHere() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "apply_subs" field.</summary>
    public const int ApplySubsFieldNumber = 4;
    private readonly static bool ApplySubsDefaultValue = false;

    private bool applySubs_;
    /// <summary>
    /// Does the ACL apply to the current channel's sub-channels?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ApplySubs {
      get { if ((_hasBits0 & 2) != 0) { return applySubs_; } else { return ApplySubsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        applySubs_ = value;
      }
    }
    /// <summary>Gets whether the "apply_subs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasApplySubs {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "apply_subs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearApplySubs() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "inherited" field.</summary>
    public const int InheritedFieldNumber = 5;
    private readonly static bool InheritedDefaultValue = false;

    private bool inherited_;
    /// <summary>
    /// Was the ACL inherited?
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Inherited {
      get { if ((_hasBits0 & 4) != 0) { return inherited_; } else { return InheritedDefaultValue; } }
      set {
        _hasBits0 |= 4;
        inherited_ = value;
      }
    }
    /// <summary>Gets whether the "inherited" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasInherited {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "inherited" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearInherited() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 6;
    private global::MurmurRPC.DatabaseUser user_;
    /// <summary>
    /// The user to whom the ACL applies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.DatabaseUser User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 7;
    private global::MurmurRPC.ACL.Types.Group group_;
    /// <summary>
    /// The group to whom the ACL applies.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.ACL.Types.Group Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "allow" field.</summary>
    public const int AllowFieldNumber = 8;
    private readonly static uint AllowDefaultValue = 0;

    private uint allow_;
    /// <summary>
    /// The permissions granted by the ACL (bitmask of ACL.Permission).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Allow {
      get { if ((_hasBits0 & 8) != 0) { return allow_; } else { return AllowDefaultValue; } }
      set {
        _hasBits0 |= 8;
        allow_ = value;
      }
    }
    /// <summary>Gets whether the "allow" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasAllow {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "allow" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAllow() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "deny" field.</summary>
    public const int DenyFieldNumber = 9;
    private readonly static uint DenyDefaultValue = 0;

    private uint deny_;
    /// <summary>
    /// The permissions denied by the ACL (bitmask of ACL.Permission).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Deny {
      get { if ((_hasBits0 & 16) != 0) { return deny_; } else { return DenyDefaultValue; } }
      set {
        _hasBits0 |= 16;
        deny_ = value;
      }
    }
    /// <summary>Gets whether the "deny" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasDeny {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "deny" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearDeny() {
      _hasBits0 &= ~16;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ACL);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ACL other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ApplyHere != other.ApplyHere) return false;
      if (ApplySubs != other.ApplySubs) return false;
      if (Inherited != other.Inherited) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Group, other.Group)) return false;
      if (Allow != other.Allow) return false;
      if (Deny != other.Deny) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (HasApplyHere) hash ^= ApplyHere.GetHashCode();
      if (HasApplySubs) hash ^= ApplySubs.GetHashCode();
      if (HasInherited) hash ^= Inherited.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (group_ != null) hash ^= Group.GetHashCode();
      if (HasAllow) hash ^= Allow.GetHashCode();
      if (HasDeny) hash ^= Deny.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (HasApplyHere) {
        output.WriteRawTag(24);
        output.WriteBool(ApplyHere);
      }
      if (HasApplySubs) {
        output.WriteRawTag(32);
        output.WriteBool(ApplySubs);
      }
      if (HasInherited) {
        output.WriteRawTag(40);
        output.WriteBool(Inherited);
      }
      if (user_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(User);
      }
      if (group_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Group);
      }
      if (HasAllow) {
        output.WriteRawTag(64);
        output.WriteUInt32(Allow);
      }
      if (HasDeny) {
        output.WriteRawTag(72);
        output.WriteUInt32(Deny);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasApplyHere) {
        output.WriteRawTag(24);
        output.WriteBool(ApplyHere);
      }
      if (HasApplySubs) {
        output.WriteRawTag(32);
        output.WriteBool(ApplySubs);
      }
      if (HasInherited) {
        output.WriteRawTag(40);
        output.WriteBool(Inherited);
      }
      if (user_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(User);
      }
      if (group_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Group);
      }
      if (HasAllow) {
        output.WriteRawTag(64);
        output.WriteUInt32(Allow);
      }
      if (HasDeny) {
        output.WriteRawTag(72);
        output.WriteUInt32(Deny);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (HasApplyHere) {
        size += 1 + 1;
      }
      if (HasApplySubs) {
        size += 1 + 1;
      }
      if (HasInherited) {
        size += 1 + 1;
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (group_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Group);
      }
      if (HasAllow) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Allow);
      }
      if (HasDeny) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Deny);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ACL other) {
      if (other == null) {
        return;
      }
      if (other.HasApplyHere) {
        ApplyHere = other.ApplyHere;
      }
      if (other.HasApplySubs) {
        ApplySubs = other.ApplySubs;
      }
      if (other.HasInherited) {
        Inherited = other.Inherited;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::MurmurRPC.DatabaseUser();
        }
        User.MergeFrom(other.User);
      }
      if (other.group_ != null) {
        if (group_ == null) {
          Group = new global::MurmurRPC.ACL.Types.Group();
        }
        Group.MergeFrom(other.Group);
      }
      if (other.HasAllow) {
        Allow = other.Allow;
      }
      if (other.HasDeny) {
        Deny = other.Deny;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 24: {
            ApplyHere = input.ReadBool();
            break;
          }
          case 32: {
            ApplySubs = input.ReadBool();
            break;
          }
          case 40: {
            Inherited = input.ReadBool();
            break;
          }
          case 50: {
            if (user_ == null) {
              User = new global::MurmurRPC.DatabaseUser();
            }
            input.ReadMessage(User);
            break;
          }
          case 58: {
            if (group_ == null) {
              Group = new global::MurmurRPC.ACL.Types.Group();
            }
            input.ReadMessage(Group);
            break;
          }
          case 64: {
            Allow = input.ReadUInt32();
            break;
          }
          case 72: {
            Deny = input.ReadUInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 24: {
            ApplyHere = input.ReadBool();
            break;
          }
          case 32: {
            ApplySubs = input.ReadBool();
            break;
          }
          case 40: {
            Inherited = input.ReadBool();
            break;
          }
          case 50: {
            if (user_ == null) {
              User = new global::MurmurRPC.DatabaseUser();
            }
            input.ReadMessage(User);
            break;
          }
          case 58: {
            if (group_ == null) {
              Group = new global::MurmurRPC.ACL.Types.Group();
            }
            input.ReadMessage(Group);
            break;
          }
          case 64: {
            Allow = input.ReadUInt32();
            break;
          }
          case 72: {
            Deny = input.ReadUInt32();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the ACL message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal enum Permission {
        [pbr::OriginalName("None")] None = 0,
        [pbr::OriginalName("Write")] Write = 1,
        [pbr::OriginalName("Traverse")] Traverse = 2,
        [pbr::OriginalName("Enter")] Enter = 4,
        [pbr::OriginalName("Speak")] Speak = 8,
        [pbr::OriginalName("Whisper")] Whisper = 256,
        [pbr::OriginalName("MuteDeafen")] MuteDeafen = 16,
        [pbr::OriginalName("Move")] Move = 32,
        [pbr::OriginalName("MakeChannel")] MakeChannel = 64,
        [pbr::OriginalName("MakeTemporaryChannel")] MakeTemporaryChannel = 1024,
        [pbr::OriginalName("LinkChannel")] LinkChannel = 128,
        [pbr::OriginalName("TextMessage")] TextMessage = 512,
        [pbr::OriginalName("Kick")] Kick = 65536,
        [pbr::OriginalName("Ban")] Ban = 131072,
        [pbr::OriginalName("Register")] Register = 262144,
        [pbr::OriginalName("RegisterSelf")] RegisterSelf = 524288,
      }

      internal sealed partial class Group : pb::IMessage<Group>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Group> _parser = new pb::MessageParser<Group>(() => new Group());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Group> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.ACL.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group(Group other) : this() {
          _hasBits0 = other._hasBits0;
          name_ = other.name_;
          inherited_ = other.inherited_;
          inherit_ = other.inherit_;
          inheritable_ = other.inheritable_;
          usersAdd_ = other.usersAdd_.Clone();
          usersRemove_ = other.usersRemove_.Clone();
          users_ = other.users_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Group Clone() {
          return new Group(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private readonly static string NameDefaultValue = "";

        private string name_;
        /// <summary>
        /// The ACL group name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "inherited" field.</summary>
        public const int InheritedFieldNumber = 2;
        private readonly static bool InheritedDefaultValue = false;

        private bool inherited_;
        /// <summary>
        /// Is the group inherited?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Inherited {
          get { if ((_hasBits0 & 1) != 0) { return inherited_; } else { return InheritedDefaultValue; } }
          set {
            _hasBits0 |= 1;
            inherited_ = value;
          }
        }
        /// <summary>Gets whether the "inherited" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasInherited {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "inherited" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearInherited() {
          _hasBits0 &= ~1;
        }

        /// <summary>Field number for the "inherit" field.</summary>
        public const int InheritFieldNumber = 3;
        private readonly static bool InheritDefaultValue = false;

        private bool inherit_;
        /// <summary>
        /// Does the group inherit members?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Inherit {
          get { if ((_hasBits0 & 2) != 0) { return inherit_; } else { return InheritDefaultValue; } }
          set {
            _hasBits0 |= 2;
            inherit_ = value;
          }
        }
        /// <summary>Gets whether the "inherit" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasInherit {
          get { return (_hasBits0 & 2) != 0; }
        }
        /// <summary>Clears the value of the "inherit" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearInherit() {
          _hasBits0 &= ~2;
        }

        /// <summary>Field number for the "inheritable" field.</summary>
        public const int InheritableFieldNumber = 4;
        private readonly static bool InheritableDefaultValue = false;

        private bool inheritable_;
        /// <summary>
        /// Can this group be inherited by its children?
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Inheritable {
          get { if ((_hasBits0 & 4) != 0) { return inheritable_; } else { return InheritableDefaultValue; } }
          set {
            _hasBits0 |= 4;
            inheritable_ = value;
          }
        }
        /// <summary>Gets whether the "inheritable" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasInheritable {
          get { return (_hasBits0 & 4) != 0; }
        }
        /// <summary>Clears the value of the "inheritable" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearInheritable() {
          _hasBits0 &= ~4;
        }

        /// <summary>Field number for the "users_add" field.</summary>
        public const int UsersAddFieldNumber = 5;
        private static readonly pb::FieldCodec<global::MurmurRPC.DatabaseUser> _repeated_usersAdd_codec
            = pb::FieldCodec.ForMessage(42, global::MurmurRPC.DatabaseUser.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.DatabaseUser> usersAdd_ = new pbc::RepeatedField<global::MurmurRPC.DatabaseUser>();
        /// <summary>
        /// The users explicitly added by this group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.DatabaseUser> UsersAdd {
          get { return usersAdd_; }
        }

        /// <summary>Field number for the "users_remove" field.</summary>
        public const int UsersRemoveFieldNumber = 6;
        private static readonly pb::FieldCodec<global::MurmurRPC.DatabaseUser> _repeated_usersRemove_codec
            = pb::FieldCodec.ForMessage(50, global::MurmurRPC.DatabaseUser.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.DatabaseUser> usersRemove_ = new pbc::RepeatedField<global::MurmurRPC.DatabaseUser>();
        /// <summary>
        /// The users explicitly removed by this group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.DatabaseUser> UsersRemove {
          get { return usersRemove_; }
        }

        /// <summary>Field number for the "users" field.</summary>
        public const int UsersFieldNumber = 7;
        private static readonly pb::FieldCodec<global::MurmurRPC.DatabaseUser> _repeated_users_codec
            = pb::FieldCodec.ForMessage(58, global::MurmurRPC.DatabaseUser.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.DatabaseUser> users_ = new pbc::RepeatedField<global::MurmurRPC.DatabaseUser>();
        /// <summary>
        /// All of the users who are part of this group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.DatabaseUser> Users {
          get { return users_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Group);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Group other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Inherited != other.Inherited) return false;
          if (Inherit != other.Inherit) return false;
          if (Inheritable != other.Inheritable) return false;
          if(!usersAdd_.Equals(other.usersAdd_)) return false;
          if(!usersRemove_.Equals(other.usersRemove_)) return false;
          if(!users_.Equals(other.users_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (HasName) hash ^= Name.GetHashCode();
          if (HasInherited) hash ^= Inherited.GetHashCode();
          if (HasInherit) hash ^= Inherit.GetHashCode();
          if (HasInheritable) hash ^= Inheritable.GetHashCode();
          hash ^= usersAdd_.GetHashCode();
          hash ^= usersRemove_.GetHashCode();
          hash ^= users_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasInherited) {
            output.WriteRawTag(16);
            output.WriteBool(Inherited);
          }
          if (HasInherit) {
            output.WriteRawTag(24);
            output.WriteBool(Inherit);
          }
          if (HasInheritable) {
            output.WriteRawTag(32);
            output.WriteBool(Inheritable);
          }
          usersAdd_.WriteTo(output, _repeated_usersAdd_codec);
          usersRemove_.WriteTo(output, _repeated_usersRemove_codec);
          users_.WriteTo(output, _repeated_users_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (HasName) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (HasInherited) {
            output.WriteRawTag(16);
            output.WriteBool(Inherited);
          }
          if (HasInherit) {
            output.WriteRawTag(24);
            output.WriteBool(Inherit);
          }
          if (HasInheritable) {
            output.WriteRawTag(32);
            output.WriteBool(Inheritable);
          }
          usersAdd_.WriteTo(ref output, _repeated_usersAdd_codec);
          usersRemove_.WriteTo(ref output, _repeated_usersRemove_codec);
          users_.WriteTo(ref output, _repeated_users_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasInherited) {
            size += 1 + 1;
          }
          if (HasInherit) {
            size += 1 + 1;
          }
          if (HasInheritable) {
            size += 1 + 1;
          }
          size += usersAdd_.CalculateSize(_repeated_usersAdd_codec);
          size += usersRemove_.CalculateSize(_repeated_usersRemove_codec);
          size += users_.CalculateSize(_repeated_users_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Group other) {
          if (other == null) {
            return;
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasInherited) {
            Inherited = other.Inherited;
          }
          if (other.HasInherit) {
            Inherit = other.Inherit;
          }
          if (other.HasInheritable) {
            Inheritable = other.Inheritable;
          }
          usersAdd_.Add(other.usersAdd_);
          usersRemove_.Add(other.usersRemove_);
          users_.Add(other.users_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                Inherited = input.ReadBool();
                break;
              }
              case 24: {
                Inherit = input.ReadBool();
                break;
              }
              case 32: {
                Inheritable = input.ReadBool();
                break;
              }
              case 42: {
                usersAdd_.AddEntriesFrom(input, _repeated_usersAdd_codec);
                break;
              }
              case 50: {
                usersRemove_.AddEntriesFrom(input, _repeated_usersRemove_codec);
                break;
              }
              case 58: {
                users_.AddEntriesFrom(input, _repeated_users_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                Inherited = input.ReadBool();
                break;
              }
              case 24: {
                Inherit = input.ReadBool();
                break;
              }
              case 32: {
                Inheritable = input.ReadBool();
                break;
              }
              case 42: {
                usersAdd_.AddEntriesFrom(ref input, _repeated_usersAdd_codec);
                break;
              }
              case 50: {
                usersRemove_.AddEntriesFrom(ref input, _repeated_usersRemove_codec);
                break;
              }
              case 58: {
                users_.AddEntriesFrom(ref input, _repeated_users_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      internal sealed partial class Query : pb::IMessage<Query>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Query> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.ACL.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query(Query other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          user_ = other.user_ != null ? other.user_.Clone() : null;
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query Clone() {
          return new Query(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server where the user and channel exist.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 2;
        private global::MurmurRPC.User user_;
        /// <summary>
        /// The user to query.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.User User {
          get { return user_; }
          set {
            user_ = value;
          }
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 3;
        private global::MurmurRPC.Channel channel_;
        /// <summary>
        /// The channel to query.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Channel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Query);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Query other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (!object.Equals(User, other.User)) return false;
          if (!object.Equals(Channel, other.Channel)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (user_ != null) hash ^= User.GetHashCode();
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (user_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(User);
          }
          if (channel_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Channel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (user_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(User);
          }
          if (channel_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Channel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (user_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
          }
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Query other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.user_ != null) {
            if (user_ == null) {
              User = new global::MurmurRPC.User();
            }
            User.MergeFrom(other.User);
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::MurmurRPC.Channel();
            }
            Channel.MergeFrom(other.Channel);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                if (user_ == null) {
                  User = new global::MurmurRPC.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 26: {
                if (channel_ == null) {
                  Channel = new global::MurmurRPC.Channel();
                }
                input.ReadMessage(Channel);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                if (user_ == null) {
                  User = new global::MurmurRPC.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 26: {
                if (channel_ == null) {
                  Channel = new global::MurmurRPC.Channel();
                }
                input.ReadMessage(Channel);
                break;
              }
            }
          }
        }
        #endif

      }

      internal sealed partial class List : pb::IMessage<List>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<List> _parser = new pb::MessageParser<List>(() => new List());
        private pb::UnknownFieldSet _unknownFields;
        private int _hasBits0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<List> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.ACL.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List(List other) : this() {
          _hasBits0 = other._hasBits0;
          server_ = other.server_ != null ? other.server_.Clone() : null;
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          acls_ = other.acls_.Clone();
          groups_ = other.groups_.Clone();
          inherit_ = other.inherit_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List Clone() {
          return new List(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server on which the ACLs exist.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 2;
        private global::MurmurRPC.Channel channel_;
        /// <summary>
        /// The channel to which the ACL refers.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Channel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "acls" field.</summary>
        public const int AclsFieldNumber = 3;
        private static readonly pb::FieldCodec<global::MurmurRPC.ACL> _repeated_acls_codec
            = pb::FieldCodec.ForMessage(26, global::MurmurRPC.ACL.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.ACL> acls_ = new pbc::RepeatedField<global::MurmurRPC.ACL>();
        /// <summary>
        /// The ACLs part of the given channel.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.ACL> Acls {
          get { return acls_; }
        }

        /// <summary>Field number for the "groups" field.</summary>
        public const int GroupsFieldNumber = 4;
        private static readonly pb::FieldCodec<global::MurmurRPC.ACL.Types.Group> _repeated_groups_codec
            = pb::FieldCodec.ForMessage(34, global::MurmurRPC.ACL.Types.Group.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.ACL.Types.Group> groups_ = new pbc::RepeatedField<global::MurmurRPC.ACL.Types.Group>();
        /// <summary>
        /// The groups part of the given channel.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.ACL.Types.Group> Groups {
          get { return groups_; }
        }

        /// <summary>Field number for the "inherit" field.</summary>
        public const int InheritFieldNumber = 5;
        private readonly static bool InheritDefaultValue = false;

        private bool inherit_;
        /// <summary>
        /// Should ACLs be inherited from the parent channel.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Inherit {
          get { if ((_hasBits0 & 1) != 0) { return inherit_; } else { return InheritDefaultValue; } }
          set {
            _hasBits0 |= 1;
            inherit_ = value;
          }
        }
        /// <summary>Gets whether the "inherit" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasInherit {
          get { return (_hasBits0 & 1) != 0; }
        }
        /// <summary>Clears the value of the "inherit" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearInherit() {
          _hasBits0 &= ~1;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as List);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(List other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (!object.Equals(Channel, other.Channel)) return false;
          if(!acls_.Equals(other.acls_)) return false;
          if(!groups_.Equals(other.groups_)) return false;
          if (Inherit != other.Inherit) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (channel_ != null) hash ^= Channel.GetHashCode();
          hash ^= acls_.GetHashCode();
          hash ^= groups_.GetHashCode();
          if (HasInherit) hash ^= Inherit.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (channel_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Channel);
          }
          acls_.WriteTo(output, _repeated_acls_codec);
          groups_.WriteTo(output, _repeated_groups_codec);
          if (HasInherit) {
            output.WriteRawTag(40);
            output.WriteBool(Inherit);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (channel_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Channel);
          }
          acls_.WriteTo(ref output, _repeated_acls_codec);
          groups_.WriteTo(ref output, _repeated_groups_codec);
          if (HasInherit) {
            output.WriteRawTag(40);
            output.WriteBool(Inherit);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          size += acls_.CalculateSize(_repeated_acls_codec);
          size += groups_.CalculateSize(_repeated_groups_codec);
          if (HasInherit) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(List other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::MurmurRPC.Channel();
            }
            Channel.MergeFrom(other.Channel);
          }
          acls_.Add(other.acls_);
          groups_.Add(other.groups_);
          if (other.HasInherit) {
            Inherit = other.Inherit;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                if (channel_ == null) {
                  Channel = new global::MurmurRPC.Channel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 26: {
                acls_.AddEntriesFrom(input, _repeated_acls_codec);
                break;
              }
              case 34: {
                groups_.AddEntriesFrom(input, _repeated_groups_codec);
                break;
              }
              case 40: {
                Inherit = input.ReadBool();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                if (channel_ == null) {
                  Channel = new global::MurmurRPC.Channel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 26: {
                acls_.AddEntriesFrom(ref input, _repeated_acls_codec);
                break;
              }
              case 34: {
                groups_.AddEntriesFrom(ref input, _repeated_groups_codec);
                break;
              }
              case 40: {
                Inherit = input.ReadBool();
                break;
              }
            }
          }
        }
        #endif

      }

      internal sealed partial class TemporaryGroup : pb::IMessage<TemporaryGroup>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<TemporaryGroup> _parser = new pb::MessageParser<TemporaryGroup>(() => new TemporaryGroup());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TemporaryGroup> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.ACL.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryGroup() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryGroup(TemporaryGroup other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          channel_ = other.channel_ != null ? other.channel_.Clone() : null;
          user_ = other.user_ != null ? other.user_.Clone() : null;
          name_ = other.name_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TemporaryGroup Clone() {
          return new TemporaryGroup(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server where the temporary group exists.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "channel" field.</summary>
        public const int ChannelFieldNumber = 2;
        private global::MurmurRPC.Channel channel_;
        /// <summary>
        /// The channel to which the temporary user group is added.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Channel Channel {
          get { return channel_; }
          set {
            channel_ = value;
          }
        }

        /// <summary>Field number for the "user" field.</summary>
        public const int UserFieldNumber = 3;
        private global::MurmurRPC.User user_;
        /// <summary>
        /// The user who is added to the group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.User User {
          get { return user_; }
          set {
            user_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 4;
        private readonly static string NameDefaultValue = "";

        private string name_;
        /// <summary>
        /// The name of the temporary group.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TemporaryGroup);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TemporaryGroup other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (!object.Equals(Channel, other.Channel)) return false;
          if (!object.Equals(User, other.User)) return false;
          if (Name != other.Name) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (channel_ != null) hash ^= Channel.GetHashCode();
          if (user_ != null) hash ^= User.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (channel_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Channel);
          }
          if (user_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(User);
          }
          if (HasName) {
            output.WriteRawTag(34);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (channel_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Channel);
          }
          if (user_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(User);
          }
          if (HasName) {
            output.WriteRawTag(34);
            output.WriteString(Name);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (channel_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Channel);
          }
          if (user_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TemporaryGroup other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.channel_ != null) {
            if (channel_ == null) {
              Channel = new global::MurmurRPC.Channel();
            }
            Channel.MergeFrom(other.Channel);
          }
          if (other.user_ != null) {
            if (user_ == null) {
              User = new global::MurmurRPC.User();
            }
            User.MergeFrom(other.User);
          }
          if (other.HasName) {
            Name = other.Name;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                if (channel_ == null) {
                  Channel = new global::MurmurRPC.Channel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 26: {
                if (user_ == null) {
                  User = new global::MurmurRPC.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 34: {
                Name = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                if (channel_ == null) {
                  Channel = new global::MurmurRPC.Channel();
                }
                input.ReadMessage(Channel);
                break;
              }
              case 26: {
                if (user_ == null) {
                  User = new global::MurmurRPC.User();
                }
                input.ReadMessage(User);
                break;
              }
              case 34: {
                Name = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  internal sealed partial class Authenticator : pb::IMessage<Authenticator>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Authenticator> _parser = new pb::MessageParser<Authenticator>(() => new Authenticator());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Authenticator> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Authenticator() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Authenticator(Authenticator other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Authenticator Clone() {
      return new Authenticator(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Authenticator);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Authenticator other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Authenticator other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Authenticator message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Request : pb::IMessage<Request>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Request> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Authenticator.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request(Request other) : this() {
          authenticate_ = other.authenticate_ != null ? other.authenticate_.Clone() : null;
          find_ = other.find_ != null ? other.find_.Clone() : null;
          query_ = other.query_ != null ? other.query_.Clone() : null;
          register_ = other.register_ != null ? other.register_.Clone() : null;
          deregister_ = other.deregister_ != null ? other.deregister_.Clone() : null;
          update_ = other.update_ != null ? other.update_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Request Clone() {
          return new Request(this);
        }

        /// <summary>Field number for the "authenticate" field.</summary>
        public const int AuthenticateFieldNumber = 1;
        private global::MurmurRPC.Authenticator.Types.Request.Types.Authenticate authenticate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Request.Types.Authenticate Authenticate {
          get { return authenticate_; }
          set {
            authenticate_ = value;
          }
        }

        /// <summary>Field number for the "find" field.</summary>
        public const int FindFieldNumber = 2;
        private global::MurmurRPC.Authenticator.Types.Request.Types.Find find_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Request.Types.Find Find {
          get { return find_; }
          set {
            find_ = value;
          }
        }

        /// <summary>Field number for the "query" field.</summary>
        public const int QueryFieldNumber = 3;
        private global::MurmurRPC.Authenticator.Types.Request.Types.Query query_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Request.Types.Query Query {
          get { return query_; }
          set {
            query_ = value;
          }
        }

        /// <summary>Field number for the "register" field.</summary>
        public const int RegisterFieldNumber = 4;
        private global::MurmurRPC.Authenticator.Types.Request.Types.Register register_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Request.Types.Register Register {
          get { return register_; }
          set {
            register_ = value;
          }
        }

        /// <summary>Field number for the "deregister" field.</summary>
        public const int DeregisterFieldNumber = 5;
        private global::MurmurRPC.Authenticator.Types.Request.Types.Deregister deregister_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Request.Types.Deregister Deregister {
          get { return deregister_; }
          set {
            deregister_ = value;
          }
        }

        /// <summary>Field number for the "update" field.</summary>
        public const int UpdateFieldNumber = 6;
        private global::MurmurRPC.Authenticator.Types.Request.Types.Update update_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Request.Types.Update Update {
          get { return update_; }
          set {
            update_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Request);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Request other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Authenticate, other.Authenticate)) return false;
          if (!object.Equals(Find, other.Find)) return false;
          if (!object.Equals(Query, other.Query)) return false;
          if (!object.Equals(Register, other.Register)) return false;
          if (!object.Equals(Deregister, other.Deregister)) return false;
          if (!object.Equals(Update, other.Update)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (authenticate_ != null) hash ^= Authenticate.GetHashCode();
          if (find_ != null) hash ^= Find.GetHashCode();
          if (query_ != null) hash ^= Query.GetHashCode();
          if (register_ != null) hash ^= Register.GetHashCode();
          if (deregister_ != null) hash ^= Deregister.GetHashCode();
          if (update_ != null) hash ^= Update.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (authenticate_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Authenticate);
          }
          if (find_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Find);
          }
          if (query_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Query);
          }
          if (register_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Register);
          }
          if (deregister_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Deregister);
          }
          if (update_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Update);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (authenticate_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Authenticate);
          }
          if (find_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Find);
          }
          if (query_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Query);
          }
          if (register_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Register);
          }
          if (deregister_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Deregister);
          }
          if (update_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Update);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (authenticate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Authenticate);
          }
          if (find_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Find);
          }
          if (query_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
          }
          if (register_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Register);
          }
          if (deregister_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deregister);
          }
          if (update_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Request other) {
          if (other == null) {
            return;
          }
          if (other.authenticate_ != null) {
            if (authenticate_ == null) {
              Authenticate = new global::MurmurRPC.Authenticator.Types.Request.Types.Authenticate();
            }
            Authenticate.MergeFrom(other.Authenticate);
          }
          if (other.find_ != null) {
            if (find_ == null) {
              Find = new global::MurmurRPC.Authenticator.Types.Request.Types.Find();
            }
            Find.MergeFrom(other.Find);
          }
          if (other.query_ != null) {
            if (query_ == null) {
              Query = new global::MurmurRPC.Authenticator.Types.Request.Types.Query();
            }
            Query.MergeFrom(other.Query);
          }
          if (other.register_ != null) {
            if (register_ == null) {
              Register = new global::MurmurRPC.Authenticator.Types.Request.Types.Register();
            }
            Register.MergeFrom(other.Register);
          }
          if (other.deregister_ != null) {
            if (deregister_ == null) {
              Deregister = new global::MurmurRPC.Authenticator.Types.Request.Types.Deregister();
            }
            Deregister.MergeFrom(other.Deregister);
          }
          if (other.update_ != null) {
            if (update_ == null) {
              Update = new global::MurmurRPC.Authenticator.Types.Request.Types.Update();
            }
            Update.MergeFrom(other.Update);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (authenticate_ == null) {
                  Authenticate = new global::MurmurRPC.Authenticator.Types.Request.Types.Authenticate();
                }
                input.ReadMessage(Authenticate);
                break;
              }
              case 18: {
                if (find_ == null) {
                  Find = new global::MurmurRPC.Authenticator.Types.Request.Types.Find();
                }
                input.ReadMessage(Find);
                break;
              }
              case 26: {
                if (query_ == null) {
                  Query = new global::MurmurRPC.Authenticator.Types.Request.Types.Query();
                }
                input.ReadMessage(Query);
                break;
              }
              case 34: {
                if (register_ == null) {
                  Register = new global::MurmurRPC.Authenticator.Types.Request.Types.Register();
                }
                input.ReadMessage(Register);
                break;
              }
              case 42: {
                if (deregister_ == null) {
                  Deregister = new global::MurmurRPC.Authenticator.Types.Request.Types.Deregister();
                }
                input.ReadMessage(Deregister);
                break;
              }
              case 50: {
                if (update_ == null) {
                  Update = new global::MurmurRPC.Authenticator.Types.Request.Types.Update();
                }
                input.ReadMessage(Update);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (authenticate_ == null) {
                  Authenticate = new global::MurmurRPC.Authenticator.Types.Request.Types.Authenticate();
                }
                input.ReadMessage(Authenticate);
                break;
              }
              case 18: {
                if (find_ == null) {
                  Find = new global::MurmurRPC.Authenticator.Types.Request.Types.Find();
                }
                input.ReadMessage(Find);
                break;
              }
              case 26: {
                if (query_ == null) {
                  Query = new global::MurmurRPC.Authenticator.Types.Request.Types.Query();
                }
                input.ReadMessage(Query);
                break;
              }
              case 34: {
                if (register_ == null) {
                  Register = new global::MurmurRPC.Authenticator.Types.Request.Types.Register();
                }
                input.ReadMessage(Register);
                break;
              }
              case 42: {
                if (deregister_ == null) {
                  Deregister = new global::MurmurRPC.Authenticator.Types.Request.Types.Deregister();
                }
                input.ReadMessage(Deregister);
                break;
              }
              case 50: {
                if (update_ == null) {
                  Update = new global::MurmurRPC.Authenticator.Types.Request.Types.Update();
                }
                input.ReadMessage(Update);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Request message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          /// <summary>
          /// An authentication request for a connecting user.
          /// </summary>
          internal sealed partial class Authenticate : pb::IMessage<Authenticate>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Authenticate> _parser = new pb::MessageParser<Authenticate>(() => new Authenticate());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Authenticate> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Request.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Authenticate() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Authenticate(Authenticate other) : this() {
              _hasBits0 = other._hasBits0;
              name_ = other.name_;
              password_ = other.password_;
              certificates_ = other.certificates_.Clone();
              certificateHash_ = other.certificateHash_;
              strongCertificate_ = other.strongCertificate_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Authenticate Clone() {
              return new Authenticate(this);
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 1;
            private readonly static string NameDefaultValue = "";

            private string name_;
            /// <summary>
            /// The user's name.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_ ?? NameDefaultValue; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "name" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasName {
              get { return name_ != null; }
            }
            /// <summary>Clears the value of the "name" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearName() {
              name_ = null;
            }

            /// <summary>Field number for the "password" field.</summary>
            public const int PasswordFieldNumber = 2;
            private readonly static string PasswordDefaultValue = "";

            private string password_;
            /// <summary>
            /// The user's password.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Password {
              get { return password_ ?? PasswordDefaultValue; }
              set {
                password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "password" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasPassword {
              get { return password_ != null; }
            }
            /// <summary>Clears the value of the "password" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearPassword() {
              password_ = null;
            }

            /// <summary>Field number for the "certificates" field.</summary>
            public const int CertificatesFieldNumber = 3;
            private static readonly pb::FieldCodec<pb::ByteString> _repeated_certificates_codec
                = pb::FieldCodec.ForBytes(26);
            private readonly pbc::RepeatedField<pb::ByteString> certificates_ = new pbc::RepeatedField<pb::ByteString>();
            /// <summary>
            /// The user's certificate chain in DER format.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<pb::ByteString> Certificates {
              get { return certificates_; }
            }

            /// <summary>Field number for the "certificate_hash" field.</summary>
            public const int CertificateHashFieldNumber = 4;
            private readonly static string CertificateHashDefaultValue = "";

            private string certificateHash_;
            /// <summary>
            /// The hexadecimal hash of the user's certificate.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string CertificateHash {
              get { return certificateHash_ ?? CertificateHashDefaultValue; }
              set {
                certificateHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "certificate_hash" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasCertificateHash {
              get { return certificateHash_ != null; }
            }
            /// <summary>Clears the value of the "certificate_hash" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearCertificateHash() {
              certificateHash_ = null;
            }

            /// <summary>Field number for the "strong_certificate" field.</summary>
            public const int StrongCertificateFieldNumber = 5;
            private readonly static bool StrongCertificateDefaultValue = false;

            private bool strongCertificate_;
            /// <summary>
            /// If the user is connecting with a strong certificate.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool StrongCertificate {
              get { if ((_hasBits0 & 1) != 0) { return strongCertificate_; } else { return StrongCertificateDefaultValue; } }
              set {
                _hasBits0 |= 1;
                strongCertificate_ = value;
              }
            }
            /// <summary>Gets whether the "strong_certificate" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasStrongCertificate {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "strong_certificate" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStrongCertificate() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Authenticate);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Authenticate other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Name != other.Name) return false;
              if (Password != other.Password) return false;
              if(!certificates_.Equals(other.certificates_)) return false;
              if (CertificateHash != other.CertificateHash) return false;
              if (StrongCertificate != other.StrongCertificate) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasName) hash ^= Name.GetHashCode();
              if (HasPassword) hash ^= Password.GetHashCode();
              hash ^= certificates_.GetHashCode();
              if (HasCertificateHash) hash ^= CertificateHash.GetHashCode();
              if (HasStrongCertificate) hash ^= StrongCertificate.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasName) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              if (HasPassword) {
                output.WriteRawTag(18);
                output.WriteString(Password);
              }
              certificates_.WriteTo(output, _repeated_certificates_codec);
              if (HasCertificateHash) {
                output.WriteRawTag(34);
                output.WriteString(CertificateHash);
              }
              if (HasStrongCertificate) {
                output.WriteRawTag(40);
                output.WriteBool(StrongCertificate);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasName) {
                output.WriteRawTag(10);
                output.WriteString(Name);
              }
              if (HasPassword) {
                output.WriteRawTag(18);
                output.WriteString(Password);
              }
              certificates_.WriteTo(ref output, _repeated_certificates_codec);
              if (HasCertificateHash) {
                output.WriteRawTag(34);
                output.WriteString(CertificateHash);
              }
              if (HasStrongCertificate) {
                output.WriteRawTag(40);
                output.WriteBool(StrongCertificate);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (HasPassword) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
              }
              size += certificates_.CalculateSize(_repeated_certificates_codec);
              if (HasCertificateHash) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(CertificateHash);
              }
              if (HasStrongCertificate) {
                size += 1 + 1;
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Authenticate other) {
              if (other == null) {
                return;
              }
              if (other.HasName) {
                Name = other.Name;
              }
              if (other.HasPassword) {
                Password = other.Password;
              }
              certificates_.Add(other.certificates_);
              if (other.HasCertificateHash) {
                CertificateHash = other.CertificateHash;
              }
              if (other.HasStrongCertificate) {
                StrongCertificate = other.StrongCertificate;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 18: {
                    Password = input.ReadString();
                    break;
                  }
                  case 26: {
                    certificates_.AddEntriesFrom(input, _repeated_certificates_codec);
                    break;
                  }
                  case 34: {
                    CertificateHash = input.ReadString();
                    break;
                  }
                  case 40: {
                    StrongCertificate = input.ReadBool();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    Name = input.ReadString();
                    break;
                  }
                  case 18: {
                    Password = input.ReadString();
                    break;
                  }
                  case 26: {
                    certificates_.AddEntriesFrom(ref input, _repeated_certificates_codec);
                    break;
                  }
                  case 34: {
                    CertificateHash = input.ReadString();
                    break;
                  }
                  case 40: {
                    StrongCertificate = input.ReadBool();
                    break;
                  }
                }
              }
            }
            #endif

          }

          /// <summary>
          /// A request for information about a user, given by either the user's ID
          /// or name.
          /// </summary>
          internal sealed partial class Find : pb::IMessage<Find>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Find> _parser = new pb::MessageParser<Find>(() => new Find());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Find> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Request.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Find() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Find(Find other) : this() {
              _hasBits0 = other._hasBits0;
              id_ = other.id_;
              name_ = other.name_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Find Clone() {
              return new Find(this);
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 1;
            private readonly static uint IdDefaultValue = 0;

            private uint id_;
            /// <summary>
            /// The user's ID used for lookup.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Id {
              get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
              set {
                _hasBits0 |= 1;
                id_ = value;
              }
            }
            /// <summary>Gets whether the "id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasId {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearId() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 2;
            private readonly static string NameDefaultValue = "";

            private string name_;
            /// <summary>
            /// The user's name used for lookup.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_ ?? NameDefaultValue; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "name" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasName {
              get { return name_ != null; }
            }
            /// <summary>Clears the value of the "name" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearName() {
              name_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Find);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Find other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Id != other.Id) return false;
              if (Name != other.Name) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasId) hash ^= Id.GetHashCode();
              if (HasName) hash ^= Name.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasId) {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
              }
              if (HasName) {
                output.WriteRawTag(18);
                output.WriteString(Name);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasId) {
                output.WriteRawTag(8);
                output.WriteUInt32(Id);
              }
              if (HasName) {
                output.WriteRawTag(18);
                output.WriteString(Name);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
              }
              if (HasName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Find other) {
              if (other == null) {
                return;
              }
              if (other.HasId) {
                Id = other.Id;
              }
              if (other.HasName) {
                Name = other.Name;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Id = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    Name = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Id = input.ReadUInt32();
                    break;
                  }
                  case 18: {
                    Name = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

          /// <summary>
          /// A query of all the registered users, optionally filtered by the given
          /// filter string.
          /// </summary>
          internal sealed partial class Query : pb::IMessage<Query>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Query> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Request.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Query() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Query(Query other) : this() {
              filter_ = other.filter_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Query Clone() {
              return new Query(this);
            }

            /// <summary>Field number for the "filter" field.</summary>
            public const int FilterFieldNumber = 1;
            private readonly static string FilterDefaultValue = "";

            private string filter_;
            /// <summary>
            /// A user name filter (% is often used as a wildcard)
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Filter {
              get { return filter_ ?? FilterDefaultValue; }
              set {
                filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "filter" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasFilter {
              get { return filter_ != null; }
            }
            /// <summary>Clears the value of the "filter" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearFilter() {
              filter_ = null;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Query);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Query other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Filter != other.Filter) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasFilter) hash ^= Filter.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasFilter) {
                output.WriteRawTag(10);
                output.WriteString(Filter);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasFilter) {
                output.WriteRawTag(10);
                output.WriteString(Filter);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasFilter) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Query other) {
              if (other == null) {
                return;
              }
              if (other.HasFilter) {
                Filter = other.Filter;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    Filter = input.ReadString();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    Filter = input.ReadString();
                    break;
                  }
                }
              }
            }
            #endif

          }

          /// <summary>
          /// A request for a new user registration.
          /// </summary>
          internal sealed partial class Register : pb::IMessage<Register>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Register> _parser = new pb::MessageParser<Register>(() => new Register());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Register> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Request.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Register() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Register(Register other) : this() {
              user_ = other.user_ != null ? other.user_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Register Clone() {
              return new Register(this);
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 1;
            private global::MurmurRPC.DatabaseUser user_;
            /// <summary>
            /// The database user to register.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::MurmurRPC.DatabaseUser User {
              get { return user_; }
              set {
                user_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Register);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Register other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(User, other.User)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (user_ != null) hash ^= User.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (user_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(User);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (user_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(User);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (user_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Register other) {
              if (other == null) {
                return;
              }
              if (other.user_ != null) {
                if (user_ == null) {
                  User = new global::MurmurRPC.DatabaseUser();
                }
                User.MergeFrom(other.User);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (user_ == null) {
                      User = new global::MurmurRPC.DatabaseUser();
                    }
                    input.ReadMessage(User);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (user_ == null) {
                      User = new global::MurmurRPC.DatabaseUser();
                    }
                    input.ReadMessage(User);
                    break;
                  }
                }
              }
            }
            #endif

          }

          /// <summary>
          /// A request for deregistering a registered user.
          /// </summary>
          internal sealed partial class Deregister : pb::IMessage<Deregister>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Deregister> _parser = new pb::MessageParser<Deregister>(() => new Deregister());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Deregister> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Request.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Deregister() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Deregister(Deregister other) : this() {
              user_ = other.user_ != null ? other.user_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Deregister Clone() {
              return new Deregister(this);
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 1;
            private global::MurmurRPC.DatabaseUser user_;
            /// <summary>
            /// The database user to deregister.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::MurmurRPC.DatabaseUser User {
              get { return user_; }
              set {
                user_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Deregister);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Deregister other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(User, other.User)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (user_ != null) hash ^= User.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (user_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(User);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (user_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(User);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (user_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Deregister other) {
              if (other == null) {
                return;
              }
              if (other.user_ != null) {
                if (user_ == null) {
                  User = new global::MurmurRPC.DatabaseUser();
                }
                User.MergeFrom(other.User);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (user_ == null) {
                      User = new global::MurmurRPC.DatabaseUser();
                    }
                    input.ReadMessage(User);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (user_ == null) {
                      User = new global::MurmurRPC.DatabaseUser();
                    }
                    input.ReadMessage(User);
                    break;
                  }
                }
              }
            }
            #endif

          }

          /// <summary>
          /// A request to update a registered user's information. The information
          /// provided should be merged with existing data.
          /// </summary>
          internal sealed partial class Update : pb::IMessage<Update>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Update> _parser = new pb::MessageParser<Update>(() => new Update());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Update> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Request.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Update() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Update(Update other) : this() {
              user_ = other.user_ != null ? other.user_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Update Clone() {
              return new Update(this);
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 1;
            private global::MurmurRPC.DatabaseUser user_;
            /// <summary>
            /// The database user to update.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::MurmurRPC.DatabaseUser User {
              get { return user_; }
              set {
                user_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Update);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Update other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(User, other.User)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (user_ != null) hash ^= User.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (user_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(User);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (user_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(User);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (user_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Update other) {
              if (other == null) {
                return;
              }
              if (other.user_ != null) {
                if (user_ == null) {
                  User = new global::MurmurRPC.DatabaseUser();
                }
                User.MergeFrom(other.User);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (user_ == null) {
                      User = new global::MurmurRPC.DatabaseUser();
                    }
                    input.ReadMessage(User);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (user_ == null) {
                      User = new global::MurmurRPC.DatabaseUser();
                    }
                    input.ReadMessage(User);
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

      internal sealed partial class Response : pb::IMessage<Response>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Response> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.Authenticator.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response(Response other) : this() {
          initialize_ = other.initialize_ != null ? other.initialize_.Clone() : null;
          authenticate_ = other.authenticate_ != null ? other.authenticate_.Clone() : null;
          find_ = other.find_ != null ? other.find_.Clone() : null;
          query_ = other.query_ != null ? other.query_.Clone() : null;
          register_ = other.register_ != null ? other.register_.Clone() : null;
          deregister_ = other.deregister_ != null ? other.deregister_.Clone() : null;
          update_ = other.update_ != null ? other.update_.Clone() : null;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Response Clone() {
          return new Response(this);
        }

        /// <summary>Field number for the "initialize" field.</summary>
        public const int InitializeFieldNumber = 1;
        private global::MurmurRPC.Authenticator.Types.Response.Types.Initialize initialize_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Response.Types.Initialize Initialize {
          get { return initialize_; }
          set {
            initialize_ = value;
          }
        }

        /// <summary>Field number for the "authenticate" field.</summary>
        public const int AuthenticateFieldNumber = 2;
        private global::MurmurRPC.Authenticator.Types.Response.Types.Authenticate authenticate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Response.Types.Authenticate Authenticate {
          get { return authenticate_; }
          set {
            authenticate_ = value;
          }
        }

        /// <summary>Field number for the "find" field.</summary>
        public const int FindFieldNumber = 3;
        private global::MurmurRPC.Authenticator.Types.Response.Types.Find find_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Response.Types.Find Find {
          get { return find_; }
          set {
            find_ = value;
          }
        }

        /// <summary>Field number for the "query" field.</summary>
        public const int QueryFieldNumber = 4;
        private global::MurmurRPC.Authenticator.Types.Response.Types.Query query_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Response.Types.Query Query {
          get { return query_; }
          set {
            query_ = value;
          }
        }

        /// <summary>Field number for the "register" field.</summary>
        public const int RegisterFieldNumber = 5;
        private global::MurmurRPC.Authenticator.Types.Response.Types.Register register_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Response.Types.Register Register {
          get { return register_; }
          set {
            register_ = value;
          }
        }

        /// <summary>Field number for the "deregister" field.</summary>
        public const int DeregisterFieldNumber = 6;
        private global::MurmurRPC.Authenticator.Types.Response.Types.Deregister deregister_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Response.Types.Deregister Deregister {
          get { return deregister_; }
          set {
            deregister_ = value;
          }
        }

        /// <summary>Field number for the "update" field.</summary>
        public const int UpdateFieldNumber = 7;
        private global::MurmurRPC.Authenticator.Types.Response.Types.Update update_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Authenticator.Types.Response.Types.Update Update {
          get { return update_; }
          set {
            update_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Response);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Response other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Initialize, other.Initialize)) return false;
          if (!object.Equals(Authenticate, other.Authenticate)) return false;
          if (!object.Equals(Find, other.Find)) return false;
          if (!object.Equals(Query, other.Query)) return false;
          if (!object.Equals(Register, other.Register)) return false;
          if (!object.Equals(Deregister, other.Deregister)) return false;
          if (!object.Equals(Update, other.Update)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (initialize_ != null) hash ^= Initialize.GetHashCode();
          if (authenticate_ != null) hash ^= Authenticate.GetHashCode();
          if (find_ != null) hash ^= Find.GetHashCode();
          if (query_ != null) hash ^= Query.GetHashCode();
          if (register_ != null) hash ^= Register.GetHashCode();
          if (deregister_ != null) hash ^= Deregister.GetHashCode();
          if (update_ != null) hash ^= Update.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (initialize_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Initialize);
          }
          if (authenticate_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Authenticate);
          }
          if (find_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Find);
          }
          if (query_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Query);
          }
          if (register_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Register);
          }
          if (deregister_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Deregister);
          }
          if (update_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Update);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (initialize_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Initialize);
          }
          if (authenticate_ != null) {
            output.WriteRawTag(18);
            output.WriteMessage(Authenticate);
          }
          if (find_ != null) {
            output.WriteRawTag(26);
            output.WriteMessage(Find);
          }
          if (query_ != null) {
            output.WriteRawTag(34);
            output.WriteMessage(Query);
          }
          if (register_ != null) {
            output.WriteRawTag(42);
            output.WriteMessage(Register);
          }
          if (deregister_ != null) {
            output.WriteRawTag(50);
            output.WriteMessage(Deregister);
          }
          if (update_ != null) {
            output.WriteRawTag(58);
            output.WriteMessage(Update);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (initialize_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Initialize);
          }
          if (authenticate_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Authenticate);
          }
          if (find_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Find);
          }
          if (query_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Query);
          }
          if (register_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Register);
          }
          if (deregister_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Deregister);
          }
          if (update_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Update);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Response other) {
          if (other == null) {
            return;
          }
          if (other.initialize_ != null) {
            if (initialize_ == null) {
              Initialize = new global::MurmurRPC.Authenticator.Types.Response.Types.Initialize();
            }
            Initialize.MergeFrom(other.Initialize);
          }
          if (other.authenticate_ != null) {
            if (authenticate_ == null) {
              Authenticate = new global::MurmurRPC.Authenticator.Types.Response.Types.Authenticate();
            }
            Authenticate.MergeFrom(other.Authenticate);
          }
          if (other.find_ != null) {
            if (find_ == null) {
              Find = new global::MurmurRPC.Authenticator.Types.Response.Types.Find();
            }
            Find.MergeFrom(other.Find);
          }
          if (other.query_ != null) {
            if (query_ == null) {
              Query = new global::MurmurRPC.Authenticator.Types.Response.Types.Query();
            }
            Query.MergeFrom(other.Query);
          }
          if (other.register_ != null) {
            if (register_ == null) {
              Register = new global::MurmurRPC.Authenticator.Types.Response.Types.Register();
            }
            Register.MergeFrom(other.Register);
          }
          if (other.deregister_ != null) {
            if (deregister_ == null) {
              Deregister = new global::MurmurRPC.Authenticator.Types.Response.Types.Deregister();
            }
            Deregister.MergeFrom(other.Deregister);
          }
          if (other.update_ != null) {
            if (update_ == null) {
              Update = new global::MurmurRPC.Authenticator.Types.Response.Types.Update();
            }
            Update.MergeFrom(other.Update);
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (initialize_ == null) {
                  Initialize = new global::MurmurRPC.Authenticator.Types.Response.Types.Initialize();
                }
                input.ReadMessage(Initialize);
                break;
              }
              case 18: {
                if (authenticate_ == null) {
                  Authenticate = new global::MurmurRPC.Authenticator.Types.Response.Types.Authenticate();
                }
                input.ReadMessage(Authenticate);
                break;
              }
              case 26: {
                if (find_ == null) {
                  Find = new global::MurmurRPC.Authenticator.Types.Response.Types.Find();
                }
                input.ReadMessage(Find);
                break;
              }
              case 34: {
                if (query_ == null) {
                  Query = new global::MurmurRPC.Authenticator.Types.Response.Types.Query();
                }
                input.ReadMessage(Query);
                break;
              }
              case 42: {
                if (register_ == null) {
                  Register = new global::MurmurRPC.Authenticator.Types.Response.Types.Register();
                }
                input.ReadMessage(Register);
                break;
              }
              case 50: {
                if (deregister_ == null) {
                  Deregister = new global::MurmurRPC.Authenticator.Types.Response.Types.Deregister();
                }
                input.ReadMessage(Deregister);
                break;
              }
              case 58: {
                if (update_ == null) {
                  Update = new global::MurmurRPC.Authenticator.Types.Response.Types.Update();
                }
                input.ReadMessage(Update);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (initialize_ == null) {
                  Initialize = new global::MurmurRPC.Authenticator.Types.Response.Types.Initialize();
                }
                input.ReadMessage(Initialize);
                break;
              }
              case 18: {
                if (authenticate_ == null) {
                  Authenticate = new global::MurmurRPC.Authenticator.Types.Response.Types.Authenticate();
                }
                input.ReadMessage(Authenticate);
                break;
              }
              case 26: {
                if (find_ == null) {
                  Find = new global::MurmurRPC.Authenticator.Types.Response.Types.Find();
                }
                input.ReadMessage(Find);
                break;
              }
              case 34: {
                if (query_ == null) {
                  Query = new global::MurmurRPC.Authenticator.Types.Response.Types.Query();
                }
                input.ReadMessage(Query);
                break;
              }
              case 42: {
                if (register_ == null) {
                  Register = new global::MurmurRPC.Authenticator.Types.Response.Types.Register();
                }
                input.ReadMessage(Register);
                break;
              }
              case 50: {
                if (deregister_ == null) {
                  Deregister = new global::MurmurRPC.Authenticator.Types.Response.Types.Deregister();
                }
                input.ReadMessage(Deregister);
                break;
              }
              case 58: {
                if (update_ == null) {
                  Update = new global::MurmurRPC.Authenticator.Types.Response.Types.Update();
                }
                input.ReadMessage(Update);
                break;
              }
            }
          }
        }
        #endif

        #region Nested types
        /// <summary>Container for nested types declared in the Response message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static partial class Types {
          internal enum Status {
            /// <summary>
            /// The request should fallthrough to murmur's default action.
            /// </summary>
            [pbr::OriginalName("Fallthrough")] Fallthrough = 0,
            /// <summary>
            /// The request was successful.
            /// </summary>
            [pbr::OriginalName("Success")] Success = 1,
            /// <summary>
            /// The request failed; there was some error.
            /// </summary>
            [pbr::OriginalName("Failure")] Failure = 2,
            /// <summary>
            /// A temporary failure prevented the request from succeeding (e.g. a
            /// database was unavailable).
            /// </summary>
            [pbr::OriginalName("TemporaryFailure")] TemporaryFailure = 3,
          }

          /// <summary>
          /// The initialization for the authenticator stream. This message must be
          /// sent before authentication requests will start streaming.
          /// </summary>
          internal sealed partial class Initialize : pb::IMessage<Initialize>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Initialize> _parser = new pb::MessageParser<Initialize>(() => new Initialize());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Initialize> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Response.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Initialize() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Initialize(Initialize other) : this() {
              server_ = other.server_ != null ? other.server_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Initialize Clone() {
              return new Initialize(this);
            }

            /// <summary>Field number for the "server" field.</summary>
            public const int ServerFieldNumber = 1;
            private global::MurmurRPC.Server server_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::MurmurRPC.Server Server {
              get { return server_; }
              set {
                server_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Initialize);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Initialize other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(Server, other.Server)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (server_ != null) hash ^= Server.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (server_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Server);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (server_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(Server);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (server_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Initialize other) {
              if (other == null) {
                return;
              }
              if (other.server_ != null) {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                Server.MergeFrom(other.Server);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (server_ == null) {
                      Server = new global::MurmurRPC.Server();
                    }
                    input.ReadMessage(Server);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (server_ == null) {
                      Server = new global::MurmurRPC.Server();
                    }
                    input.ReadMessage(Server);
                    break;
                  }
                }
              }
            }
            #endif

          }

          internal sealed partial class Authenticate : pb::IMessage<Authenticate>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Authenticate> _parser = new pb::MessageParser<Authenticate>(() => new Authenticate());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Authenticate> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Response.Descriptor.NestedTypes[1]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Authenticate() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Authenticate(Authenticate other) : this() {
              _hasBits0 = other._hasBits0;
              status_ = other.status_;
              id_ = other.id_;
              name_ = other.name_;
              groups_ = other.groups_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Authenticate Clone() {
              return new Authenticate(this);
            }

            /// <summary>Field number for the "status" field.</summary>
            public const int StatusFieldNumber = 1;
            private readonly static global::MurmurRPC.Authenticator.Types.Response.Types.Status StatusDefaultValue = global::MurmurRPC.Authenticator.Types.Response.Types.Status.Fallthrough;

            private global::MurmurRPC.Authenticator.Types.Response.Types.Status status_;
            /// <summary>
            /// The status of the request.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::MurmurRPC.Authenticator.Types.Response.Types.Status Status {
              get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
              set {
                _hasBits0 |= 1;
                status_ = value;
              }
            }
            /// <summary>Gets whether the "status" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasStatus {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "status" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStatus() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "id" field.</summary>
            public const int IdFieldNumber = 2;
            private readonly static uint IdDefaultValue = 0;

            private uint id_;
            /// <summary>
            /// The user's registered ID.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public uint Id {
              get { if ((_hasBits0 & 2) != 0) { return id_; } else { return IdDefaultValue; } }
              set {
                _hasBits0 |= 2;
                id_ = value;
              }
            }
            /// <summary>Gets whether the "id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasId {
              get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearId() {
              _hasBits0 &= ~2;
            }

            /// <summary>Field number for the "name" field.</summary>
            public const int NameFieldNumber = 3;
            private readonly static string NameDefaultValue = "";

            private string name_;
            /// <summary>
            /// The corrected user's name;
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public string Name {
              get { return name_ ?? NameDefaultValue; }
              set {
                name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
              }
            }
            /// <summary>Gets whether the "name" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasName {
              get { return name_ != null; }
            }
            /// <summary>Clears the value of the "name" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearName() {
              name_ = null;
            }

            /// <summary>Field number for the "groups" field.</summary>
            public const int GroupsFieldNumber = 4;
            private static readonly pb::FieldCodec<global::MurmurRPC.ACL.Types.Group> _repeated_groups_codec
                = pb::FieldCodec.ForMessage(34, global::MurmurRPC.ACL.Types.Group.Parser);
            private readonly pbc::RepeatedField<global::MurmurRPC.ACL.Types.Group> groups_ = new pbc::RepeatedField<global::MurmurRPC.ACL.Types.Group>();
            /// <summary>
            /// Additional ACL groups that the user belongs too.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::MurmurRPC.ACL.Types.Group> Groups {
              get { return groups_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Authenticate);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Authenticate other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Status != other.Status) return false;
              if (Id != other.Id) return false;
              if (Name != other.Name) return false;
              if(!groups_.Equals(other.groups_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasStatus) hash ^= Status.GetHashCode();
              if (HasId) hash ^= Id.GetHashCode();
              if (HasName) hash ^= Name.GetHashCode();
              hash ^= groups_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasStatus) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Status);
              }
              if (HasId) {
                output.WriteRawTag(16);
                output.WriteUInt32(Id);
              }
              if (HasName) {
                output.WriteRawTag(26);
                output.WriteString(Name);
              }
              groups_.WriteTo(output, _repeated_groups_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasStatus) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Status);
              }
              if (HasId) {
                output.WriteRawTag(16);
                output.WriteUInt32(Id);
              }
              if (HasName) {
                output.WriteRawTag(26);
                output.WriteString(Name);
              }
              groups_.WriteTo(ref output, _repeated_groups_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasStatus) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
              }
              if (HasId) {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
              }
              if (HasName) {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
              }
              size += groups_.CalculateSize(_repeated_groups_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Authenticate other) {
              if (other == null) {
                return;
              }
              if (other.HasStatus) {
                Status = other.Status;
              }
              if (other.HasId) {
                Id = other.Id;
              }
              if (other.HasName) {
                Name = other.Name;
              }
              groups_.Add(other.groups_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Status = (global::MurmurRPC.Authenticator.Types.Response.Types.Status) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    Id = input.ReadUInt32();
                    break;
                  }
                  case 26: {
                    Name = input.ReadString();
                    break;
                  }
                  case 34: {
                    groups_.AddEntriesFrom(input, _repeated_groups_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Status = (global::MurmurRPC.Authenticator.Types.Response.Types.Status) input.ReadEnum();
                    break;
                  }
                  case 16: {
                    Id = input.ReadUInt32();
                    break;
                  }
                  case 26: {
                    Name = input.ReadString();
                    break;
                  }
                  case 34: {
                    groups_.AddEntriesFrom(ref input, _repeated_groups_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

          internal sealed partial class Find : pb::IMessage<Find>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Find> _parser = new pb::MessageParser<Find>(() => new Find());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Find> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Response.Descriptor.NestedTypes[2]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Find() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Find(Find other) : this() {
              user_ = other.user_ != null ? other.user_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Find Clone() {
              return new Find(this);
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 1;
            private global::MurmurRPC.DatabaseUser user_;
            /// <summary>
            /// The database user (if found).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::MurmurRPC.DatabaseUser User {
              get { return user_; }
              set {
                user_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Find);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Find other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (!object.Equals(User, other.User)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (user_ != null) hash ^= User.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (user_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(User);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (user_ != null) {
                output.WriteRawTag(10);
                output.WriteMessage(User);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (user_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Find other) {
              if (other == null) {
                return;
              }
              if (other.user_ != null) {
                if (user_ == null) {
                  User = new global::MurmurRPC.DatabaseUser();
                }
                User.MergeFrom(other.User);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    if (user_ == null) {
                      User = new global::MurmurRPC.DatabaseUser();
                    }
                    input.ReadMessage(User);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    if (user_ == null) {
                      User = new global::MurmurRPC.DatabaseUser();
                    }
                    input.ReadMessage(User);
                    break;
                  }
                }
              }
            }
            #endif

          }

          internal sealed partial class Query : pb::IMessage<Query>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
            private pb::UnknownFieldSet _unknownFields;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Query> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Response.Descriptor.NestedTypes[3]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Query() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Query(Query other) : this() {
              users_ = other.users_.Clone();
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Query Clone() {
              return new Query(this);
            }

            /// <summary>Field number for the "users" field.</summary>
            public const int UsersFieldNumber = 1;
            private static readonly pb::FieldCodec<global::MurmurRPC.DatabaseUser> _repeated_users_codec
                = pb::FieldCodec.ForMessage(10, global::MurmurRPC.DatabaseUser.Parser);
            private readonly pbc::RepeatedField<global::MurmurRPC.DatabaseUser> users_ = new pbc::RepeatedField<global::MurmurRPC.DatabaseUser>();
            /// <summary>
            /// The matched database users.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public pbc::RepeatedField<global::MurmurRPC.DatabaseUser> Users {
              get { return users_; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Query);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Query other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if(!users_.Equals(other.users_)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              hash ^= users_.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              users_.WriteTo(output, _repeated_users_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              users_.WriteTo(ref output, _repeated_users_codec);
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              size += users_.CalculateSize(_repeated_users_codec);
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Query other) {
              if (other == null) {
                return;
              }
              users_.Add(other.users_);
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 10: {
                    users_.AddEntriesFrom(input, _repeated_users_codec);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 10: {
                    users_.AddEntriesFrom(ref input, _repeated_users_codec);
                    break;
                  }
                }
              }
            }
            #endif

          }

          internal sealed partial class Register : pb::IMessage<Register>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Register> _parser = new pb::MessageParser<Register>(() => new Register());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Register> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Response.Descriptor.NestedTypes[4]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Register() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Register(Register other) : this() {
              _hasBits0 = other._hasBits0;
              status_ = other.status_;
              user_ = other.user_ != null ? other.user_.Clone() : null;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Register Clone() {
              return new Register(this);
            }

            /// <summary>Field number for the "status" field.</summary>
            public const int StatusFieldNumber = 1;
            private readonly static global::MurmurRPC.Authenticator.Types.Response.Types.Status StatusDefaultValue = global::MurmurRPC.Authenticator.Types.Response.Types.Status.Fallthrough;

            private global::MurmurRPC.Authenticator.Types.Response.Types.Status status_;
            /// <summary>
            /// The status of the request.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::MurmurRPC.Authenticator.Types.Response.Types.Status Status {
              get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
              set {
                _hasBits0 |= 1;
                status_ = value;
              }
            }
            /// <summary>Gets whether the "status" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasStatus {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "status" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStatus() {
              _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "user" field.</summary>
            public const int UserFieldNumber = 2;
            private global::MurmurRPC.DatabaseUser user_;
            /// <summary>
            /// The registered database user (must contain the registered user's ID).
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::MurmurRPC.DatabaseUser User {
              get { return user_; }
              set {
                user_ = value;
              }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Register);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Register other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Status != other.Status) return false;
              if (!object.Equals(User, other.User)) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasStatus) hash ^= Status.GetHashCode();
              if (user_ != null) hash ^= User.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasStatus) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Status);
              }
              if (user_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(User);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasStatus) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Status);
              }
              if (user_ != null) {
                output.WriteRawTag(18);
                output.WriteMessage(User);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasStatus) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
              }
              if (user_ != null) {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Register other) {
              if (other == null) {
                return;
              }
              if (other.HasStatus) {
                Status = other.Status;
              }
              if (other.user_ != null) {
                if (user_ == null) {
                  User = new global::MurmurRPC.DatabaseUser();
                }
                User.MergeFrom(other.User);
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Status = (global::MurmurRPC.Authenticator.Types.Response.Types.Status) input.ReadEnum();
                    break;
                  }
                  case 18: {
                    if (user_ == null) {
                      User = new global::MurmurRPC.DatabaseUser();
                    }
                    input.ReadMessage(User);
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Status = (global::MurmurRPC.Authenticator.Types.Response.Types.Status) input.ReadEnum();
                    break;
                  }
                  case 18: {
                    if (user_ == null) {
                      User = new global::MurmurRPC.DatabaseUser();
                    }
                    input.ReadMessage(User);
                    break;
                  }
                }
              }
            }
            #endif

          }

          internal sealed partial class Deregister : pb::IMessage<Deregister>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Deregister> _parser = new pb::MessageParser<Deregister>(() => new Deregister());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Deregister> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Response.Descriptor.NestedTypes[5]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Deregister() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Deregister(Deregister other) : this() {
              _hasBits0 = other._hasBits0;
              status_ = other.status_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Deregister Clone() {
              return new Deregister(this);
            }

            /// <summary>Field number for the "status" field.</summary>
            public const int StatusFieldNumber = 1;
            private readonly static global::MurmurRPC.Authenticator.Types.Response.Types.Status StatusDefaultValue = global::MurmurRPC.Authenticator.Types.Response.Types.Status.Fallthrough;

            private global::MurmurRPC.Authenticator.Types.Response.Types.Status status_;
            /// <summary>
            /// The status of the request.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::MurmurRPC.Authenticator.Types.Response.Types.Status Status {
              get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
              set {
                _hasBits0 |= 1;
                status_ = value;
              }
            }
            /// <summary>Gets whether the "status" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasStatus {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "status" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStatus() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Deregister);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Deregister other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Status != other.Status) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasStatus) hash ^= Status.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasStatus) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Status);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasStatus) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Status);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasStatus) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Deregister other) {
              if (other == null) {
                return;
              }
              if (other.HasStatus) {
                Status = other.Status;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Status = (global::MurmurRPC.Authenticator.Types.Response.Types.Status) input.ReadEnum();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Status = (global::MurmurRPC.Authenticator.Types.Response.Types.Status) input.ReadEnum();
                    break;
                  }
                }
              }
            }
            #endif

          }

          internal sealed partial class Update : pb::IMessage<Update>
          #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              , pb::IBufferMessage
          #endif
          {
            private static readonly pb::MessageParser<Update> _parser = new pb::MessageParser<Update>(() => new Update());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pb::MessageParser<Update> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public static pbr::MessageDescriptor Descriptor {
              get { return global::MurmurRPC.Authenticator.Types.Response.Descriptor.NestedTypes[6]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            pbr::MessageDescriptor pb::IMessage.Descriptor {
              get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Update() {
              OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Update(Update other) : this() {
              _hasBits0 = other._hasBits0;
              status_ = other.status_;
              _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public Update Clone() {
              return new Update(this);
            }

            /// <summary>Field number for the "status" field.</summary>
            public const int StatusFieldNumber = 1;
            private readonly static global::MurmurRPC.Authenticator.Types.Response.Types.Status StatusDefaultValue = global::MurmurRPC.Authenticator.Types.Response.Types.Status.Fallthrough;

            private global::MurmurRPC.Authenticator.Types.Response.Types.Status status_;
            /// <summary>
            /// The status of the request.
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public global::MurmurRPC.Authenticator.Types.Response.Types.Status Status {
              get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
              set {
                _hasBits0 |= 1;
                status_ = value;
              }
            }
            /// <summary>Gets whether the "status" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool HasStatus {
              get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "status" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void ClearStatus() {
              _hasBits0 &= ~1;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override bool Equals(object other) {
              return Equals(other as Update);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public bool Equals(Update other) {
              if (ReferenceEquals(other, null)) {
                return false;
              }
              if (ReferenceEquals(other, this)) {
                return true;
              }
              if (Status != other.Status) return false;
              return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override int GetHashCode() {
              int hash = 1;
              if (HasStatus) hash ^= Status.GetHashCode();
              if (_unknownFields != null) {
                hash ^= _unknownFields.GetHashCode();
              }
              return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public override string ToString() {
              return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void WriteTo(pb::CodedOutputStream output) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              output.WriteRawMessage(this);
            #else
              if (HasStatus) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Status);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(output);
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
              if (HasStatus) {
                output.WriteRawTag(8);
                output.WriteEnum((int) Status);
              }
              if (_unknownFields != null) {
                _unknownFields.WriteTo(ref output);
              }
            }
            #endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public int CalculateSize() {
              int size = 0;
              if (HasStatus) {
                size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
              }
              if (_unknownFields != null) {
                size += _unknownFields.CalculateSize();
              }
              return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(Update other) {
              if (other == null) {
                return;
              }
              if (other.HasStatus) {
                Status = other.Status;
              }
              _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            public void MergeFrom(pb::CodedInputStream input) {
            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
              input.ReadRawMessage(this);
            #else
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                    break;
                  case 8: {
                    Status = (global::MurmurRPC.Authenticator.Types.Response.Types.Status) input.ReadEnum();
                    break;
                  }
                }
              }
            #endif
            }

            #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
              uint tag;
              while ((tag = input.ReadTag()) != 0) {
                switch(tag) {
                  default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                  case 8: {
                    Status = (global::MurmurRPC.Authenticator.Types.Response.Types.Status) input.ReadEnum();
                    break;
                  }
                }
              }
            }
            #endif

          }

        }
        #endregion

      }

    }
    #endregion

  }

  internal sealed partial class DatabaseUser : pb::IMessage<DatabaseUser>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<DatabaseUser> _parser = new pb::MessageParser<DatabaseUser>(() => new DatabaseUser());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DatabaseUser> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseUser() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseUser(DatabaseUser other) : this() {
      _hasBits0 = other._hasBits0;
      server_ = other.server_ != null ? other.server_.Clone() : null;
      id_ = other.id_;
      name_ = other.name_;
      email_ = other.email_;
      comment_ = other.comment_;
      hash_ = other.hash_;
      password_ = other.password_;
      lastActive_ = other.lastActive_;
      texture_ = other.texture_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DatabaseUser Clone() {
      return new DatabaseUser(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server on which the user is registered.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 2;
    private readonly static uint IdDefaultValue = 0;

    private uint id_;
    /// <summary>
    /// The unique user ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private readonly static string NameDefaultValue = "";

    private string name_;
    /// <summary>
    /// The user's name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_ ?? NameDefaultValue; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasName {
      get { return name_ != null; }
    }
    /// <summary>Clears the value of the "name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearName() {
      name_ = null;
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private readonly static string EmailDefaultValue = "";

    private string email_;
    /// <summary>
    /// The user's email address.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_ ?? EmailDefaultValue; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "email" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasEmail {
      get { return email_ != null; }
    }
    /// <summary>Clears the value of the "email" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearEmail() {
      email_ = null;
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 5;
    private readonly static string CommentDefaultValue = "";

    private string comment_;
    /// <summary>
    /// The user's comment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_ ?? CommentDefaultValue; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "comment" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasComment {
      get { return comment_ != null; }
    }
    /// <summary>Clears the value of the "comment" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearComment() {
      comment_ = null;
    }

    /// <summary>Field number for the "hash" field.</summary>
    public const int HashFieldNumber = 6;
    private readonly static string HashDefaultValue = "";

    private string hash_;
    /// <summary>
    /// The user's certificate hash.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Hash {
      get { return hash_ ?? HashDefaultValue; }
      set {
        hash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "hash" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasHash {
      get { return hash_ != null; }
    }
    /// <summary>Clears the value of the "hash" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearHash() {
      hash_ = null;
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 7;
    private readonly static string PasswordDefaultValue = "";

    private string password_;
    /// <summary>
    /// The user's password (never sent; used only when updating).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_ ?? PasswordDefaultValue; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "password" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasPassword {
      get { return password_ != null; }
    }
    /// <summary>Clears the value of the "password" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearPassword() {
      password_ = null;
    }

    /// <summary>Field number for the "last_active" field.</summary>
    public const int LastActiveFieldNumber = 8;
    private readonly static string LastActiveDefaultValue = "";

    private string lastActive_;
    /// <summary>
    /// When the user was last on the server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastActive {
      get { return lastActive_ ?? LastActiveDefaultValue; }
      set {
        lastActive_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "last_active" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasLastActive {
      get { return lastActive_ != null; }
    }
    /// <summary>Clears the value of the "last_active" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearLastActive() {
      lastActive_ = null;
    }

    /// <summary>Field number for the "texture" field.</summary>
    public const int TextureFieldNumber = 9;
    private readonly static pb::ByteString TextureDefaultValue = pb::ByteString.Empty;

    private pb::ByteString texture_;
    /// <summary>
    /// The user's texture.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Texture {
      get { return texture_ ?? TextureDefaultValue; }
      set {
        texture_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "texture" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool HasTexture {
      get { return texture_ != null; }
    }
    /// <summary>Clears the value of the "texture" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTexture() {
      texture_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DatabaseUser);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DatabaseUser other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Email != other.Email) return false;
      if (Comment != other.Comment) return false;
      if (Hash != other.Hash) return false;
      if (Password != other.Password) return false;
      if (LastActive != other.LastActive) return false;
      if (Texture != other.Texture) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (HasId) hash ^= Id.GetHashCode();
      if (HasName) hash ^= Name.GetHashCode();
      if (HasEmail) hash ^= Email.GetHashCode();
      if (HasComment) hash ^= Comment.GetHashCode();
      if (HasHash) hash ^= Hash.GetHashCode();
      if (HasPassword) hash ^= Password.GetHashCode();
      if (HasLastActive) hash ^= LastActive.GetHashCode();
      if (HasTexture) hash ^= Texture.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasEmail) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (HasComment) {
        output.WriteRawTag(42);
        output.WriteString(Comment);
      }
      if (HasHash) {
        output.WriteRawTag(50);
        output.WriteString(Hash);
      }
      if (HasPassword) {
        output.WriteRawTag(58);
        output.WriteString(Password);
      }
      if (HasLastActive) {
        output.WriteRawTag(66);
        output.WriteString(LastActive);
      }
      if (HasTexture) {
        output.WriteRawTag(74);
        output.WriteBytes(Texture);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (HasId) {
        output.WriteRawTag(16);
        output.WriteUInt32(Id);
      }
      if (HasName) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (HasEmail) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (HasComment) {
        output.WriteRawTag(42);
        output.WriteString(Comment);
      }
      if (HasHash) {
        output.WriteRawTag(50);
        output.WriteString(Hash);
      }
      if (HasPassword) {
        output.WriteRawTag(58);
        output.WriteString(Password);
      }
      if (HasLastActive) {
        output.WriteRawTag(66);
        output.WriteString(LastActive);
      }
      if (HasTexture) {
        output.WriteRawTag(74);
        output.WriteBytes(Texture);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
      }
      if (HasName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (HasEmail) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (HasComment) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (HasHash) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Hash);
      }
      if (HasPassword) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (HasLastActive) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastActive);
      }
      if (HasTexture) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Texture);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DatabaseUser other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasEmail) {
        Email = other.Email;
      }
      if (other.HasComment) {
        Comment = other.Comment;
      }
      if (other.HasHash) {
        Hash = other.Hash;
      }
      if (other.HasPassword) {
        Password = other.Password;
      }
      if (other.HasLastActive) {
        LastActive = other.LastActive;
      }
      if (other.HasTexture) {
        Texture = other.Texture;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42: {
            Comment = input.ReadString();
            break;
          }
          case 50: {
            Hash = input.ReadString();
            break;
          }
          case 58: {
            Password = input.ReadString();
            break;
          }
          case 66: {
            LastActive = input.ReadString();
            break;
          }
          case 74: {
            Texture = input.ReadBytes();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 16: {
            Id = input.ReadUInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42: {
            Comment = input.ReadString();
            break;
          }
          case 50: {
            Hash = input.ReadString();
            break;
          }
          case 58: {
            Password = input.ReadString();
            break;
          }
          case 66: {
            LastActive = input.ReadString();
            break;
          }
          case 74: {
            Texture = input.ReadBytes();
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the DatabaseUser message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      internal sealed partial class Query : pb::IMessage<Query>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Query> _parser = new pb::MessageParser<Query>(() => new Query());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Query> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.DatabaseUser.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query(Query other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          filter_ = other.filter_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Query Clone() {
          return new Query(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server whose users will be queried.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "filter" field.</summary>
        public const int FilterFieldNumber = 2;
        private readonly static string FilterDefaultValue = "";

        private string filter_;
        /// <summary>
        /// A string to filter the users by.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Filter {
          get { return filter_ ?? FilterDefaultValue; }
          set {
            filter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "filter" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasFilter {
          get { return filter_ != null; }
        }
        /// <summary>Clears the value of the "filter" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearFilter() {
          filter_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Query);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Query other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (Filter != other.Filter) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (HasFilter) hash ^= Filter.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasFilter) {
            output.WriteRawTag(18);
            output.WriteString(Filter);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasFilter) {
            output.WriteRawTag(18);
            output.WriteString(Filter);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (HasFilter) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Filter);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Query other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.HasFilter) {
            Filter = other.Filter;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                Filter = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                Filter = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

      internal sealed partial class List : pb::IMessage<List>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<List> _parser = new pb::MessageParser<List>(() => new List());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<List> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.DatabaseUser.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List(List other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          users_ = other.users_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public List Clone() {
          return new List(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server on which the users are registered.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "users" field.</summary>
        public const int UsersFieldNumber = 2;
        private static readonly pb::FieldCodec<global::MurmurRPC.DatabaseUser> _repeated_users_codec
            = pb::FieldCodec.ForMessage(18, global::MurmurRPC.DatabaseUser.Parser);
        private readonly pbc::RepeatedField<global::MurmurRPC.DatabaseUser> users_ = new pbc::RepeatedField<global::MurmurRPC.DatabaseUser>();
        /// <summary>
        /// The users.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::MurmurRPC.DatabaseUser> Users {
          get { return users_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as List);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(List other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if(!users_.Equals(other.users_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          hash ^= users_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          users_.WriteTo(output, _repeated_users_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          users_.WriteTo(ref output, _repeated_users_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          size += users_.CalculateSize(_repeated_users_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(List other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          users_.Add(other.users_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                users_.AddEntriesFrom(input, _repeated_users_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                users_.AddEntriesFrom(ref input, _repeated_users_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      internal sealed partial class Verify : pb::IMessage<Verify>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Verify> _parser = new pb::MessageParser<Verify>(() => new Verify());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Verify> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::MurmurRPC.DatabaseUser.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Verify() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Verify(Verify other) : this() {
          server_ = other.server_ != null ? other.server_.Clone() : null;
          name_ = other.name_;
          password_ = other.password_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Verify Clone() {
          return new Verify(this);
        }

        /// <summary>Field number for the "server" field.</summary>
        public const int ServerFieldNumber = 1;
        private global::MurmurRPC.Server server_;
        /// <summary>
        /// The server on which the user-password pair will be authenticated.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::MurmurRPC.Server Server {
          get { return server_; }
          set {
            server_ = value;
          }
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 2;
        private readonly static string NameDefaultValue = "";

        private string name_;
        /// <summary>
        /// The user's name.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_ ?? NameDefaultValue; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "name" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasName {
          get { return name_ != null; }
        }
        /// <summary>Clears the value of the "name" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearName() {
          name_ = null;
        }

        /// <summary>Field number for the "password" field.</summary>
        public const int PasswordFieldNumber = 3;
        private readonly static string PasswordDefaultValue = "";

        private string password_;
        /// <summary>
        /// The user's password.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Password {
          get { return password_ ?? PasswordDefaultValue; }
          set {
            password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }
        /// <summary>Gets whether the "password" field is set</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool HasPassword {
          get { return password_ != null; }
        }
        /// <summary>Clears the value of the "password" field</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void ClearPassword() {
          password_ = null;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Verify);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Verify other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Server, other.Server)) return false;
          if (Name != other.Name) return false;
          if (Password != other.Password) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (server_ != null) hash ^= Server.GetHashCode();
          if (HasName) hash ^= Name.GetHashCode();
          if (HasPassword) hash ^= Password.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasPassword) {
            output.WriteRawTag(26);
            output.WriteString(Password);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (server_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Server);
          }
          if (HasName) {
            output.WriteRawTag(18);
            output.WriteString(Name);
          }
          if (HasPassword) {
            output.WriteRawTag(26);
            output.WriteString(Password);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (server_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
          }
          if (HasName) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (HasPassword) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Verify other) {
          if (other == null) {
            return;
          }
          if (other.server_ != null) {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            Server.MergeFrom(other.Server);
          }
          if (other.HasName) {
            Name = other.Name;
          }
          if (other.HasPassword) {
            Password = other.Password;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Password = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 10: {
                if (server_ == null) {
                  Server = new global::MurmurRPC.Server();
                }
                input.ReadMessage(Server);
                break;
              }
              case 18: {
                Name = input.ReadString();
                break;
              }
              case 26: {
                Password = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  internal sealed partial class RedirectWhisperGroup : pb::IMessage<RedirectWhisperGroup>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RedirectWhisperGroup> _parser = new pb::MessageParser<RedirectWhisperGroup>(() => new RedirectWhisperGroup());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RedirectWhisperGroup> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MurmurRPC.MurmurRPCReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectWhisperGroup() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectWhisperGroup(RedirectWhisperGroup other) : this() {
      server_ = other.server_ != null ? other.server_.Clone() : null;
      user_ = other.user_ != null ? other.user_.Clone() : null;
      source_ = other.source_ != null ? other.source_.Clone() : null;
      target_ = other.target_ != null ? other.target_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RedirectWhisperGroup Clone() {
      return new RedirectWhisperGroup(this);
    }

    /// <summary>Field number for the "server" field.</summary>
    public const int ServerFieldNumber = 1;
    private global::MurmurRPC.Server server_;
    /// <summary>
    /// The server on which the whisper redirection will take place.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.Server Server {
      get { return server_; }
      set {
        server_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::MurmurRPC.User user_;
    /// <summary>
    /// The user to whom the redirection will be applied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 3;
    private global::MurmurRPC.ACL.Types.Group source_;
    /// <summary>
    /// The source group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.ACL.Types.Group Source {
      get { return source_; }
      set {
        source_ = value;
      }
    }

    /// <summary>Field number for the "target" field.</summary>
    public const int TargetFieldNumber = 4;
    private global::MurmurRPC.ACL.Types.Group target_;
    /// <summary>
    /// The target group.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MurmurRPC.ACL.Types.Group Target {
      get { return target_; }
      set {
        target_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RedirectWhisperGroup);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RedirectWhisperGroup other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Server, other.Server)) return false;
      if (!object.Equals(User, other.User)) return false;
      if (!object.Equals(Source, other.Source)) return false;
      if (!object.Equals(Target, other.Target)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (server_ != null) hash ^= Server.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (source_ != null) hash ^= Source.GetHashCode();
      if (target_ != null) hash ^= Target.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (source_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Source);
      }
      if (target_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (server_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Server);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (source_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Source);
      }
      if (target_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Target);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (server_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Server);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (source_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
      }
      if (target_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Target);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RedirectWhisperGroup other) {
      if (other == null) {
        return;
      }
      if (other.server_ != null) {
        if (server_ == null) {
          Server = new global::MurmurRPC.Server();
        }
        Server.MergeFrom(other.Server);
      }
      if (other.user_ != null) {
        if (user_ == null) {
          User = new global::MurmurRPC.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.source_ != null) {
        if (source_ == null) {
          Source = new global::MurmurRPC.ACL.Types.Group();
        }
        Source.MergeFrom(other.Source);
      }
      if (other.target_ != null) {
        if (target_ == null) {
          Target = new global::MurmurRPC.ACL.Types.Group();
        }
        Target.MergeFrom(other.Target);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::MurmurRPC.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            if (source_ == null) {
              Source = new global::MurmurRPC.ACL.Types.Group();
            }
            input.ReadMessage(Source);
            break;
          }
          case 34: {
            if (target_ == null) {
              Target = new global::MurmurRPC.ACL.Types.Group();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (server_ == null) {
              Server = new global::MurmurRPC.Server();
            }
            input.ReadMessage(Server);
            break;
          }
          case 18: {
            if (user_ == null) {
              User = new global::MurmurRPC.User();
            }
            input.ReadMessage(User);
            break;
          }
          case 26: {
            if (source_ == null) {
              Source = new global::MurmurRPC.ACL.Types.Group();
            }
            input.ReadMessage(Source);
            break;
          }
          case 34: {
            if (target_ == null) {
              Target = new global::MurmurRPC.ACL.Types.Group();
            }
            input.ReadMessage(Target);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
